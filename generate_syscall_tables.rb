#!/usr/bin/env ruby

@syscalls = Hash.new # maps syscall number onto syscall name
@handlers = Hash.new # maps syscall name onto syscall handlers
@aliases  = Hash.new # maps alias name onto syscall name
@numcalls = 0

if `getconf LONG_BIT`.chop == "32"
  @unistd="/usr/include/i386-linux-gnu/asm/unistd_32.h"
  @arch="MVEE/Inc/arch/i386"
else
  @unistd="/usr/include/x86_64-linux-gnu/asm/unistd_64.h"
  @arch="MVEE/Inc/arch/amd64"
end

def md5(file)
  `md5sum #{file} | cut -d' ' -f1`
end

def replace_if_different(oldfile, newfile)
  if (not File.exists?(oldfile)) or (md5(oldfile) != md5(newfile))
    print("> File has changed.\n")
    `mv #{newfile} #{oldfile}`
  else
    print("> File has not changed.\n")
    `rm #{newfile}`
  end
end

File.open(@unistd).each { |line|
  if line.match(/^#define.*__NR_[[:graph:]]*[[:digit:]]*/)
    callnum = line.split(" ")[-1]
    callname = line.split(" ")[-2].gsub("__NR_","")
    @syscalls[callnum] = callname
    @numcalls = callnum.to_i+1
  end
}

File.open("MVEE/Src/MVEE_syscalls_handlers.cpp").each { |line|
  if line.match(/(GET_CALL_TYPE|PRECALL|LOG_ARGS|LOG_RETURN|POSTCALL|CALL)\([[:graph:]]*\)/)
    syscall     = line.split("(")[1].split(")")[0]
    handlertype = line.match(/(GET_CALL_TYPE|PRECALL|LOG_ARGS|LOG_RETURN|POSTCALL|CALL)/)[1]
    notneeded   = line.match(/DONTNEED/)
    handlerfunc = "handle_#{syscall}_#{handlertype.downcase}"
    
    @handlers[syscall] = Hash.new if not @handlers[syscall] 
    if notneeded
      @handlers[syscall][handlertype] = "MVEE_HANDLER_DONTNEED"
    else
      @handlers[syscall][handlertype] = handlerfunc
    end

  elsif line.match(/ALIAS\s+[[:graph:]]*\s+[[:graph:]]/)
    @aliases[line.split(" ")[2]] = line.split(" ")[1]
  end
}

def write_handler(file, name, handler, default)
  if @handlers[name] and @handlers[name][handler]
    if @handlers[name][handler].start_with?('MVEE_HANDLER')
      file.write(sprintf("\t%s,\n", @handlers[name][handler]))
    else
      file.write(sprintf("\t&monitor::%s,\n", @handlers[name][handler]))
    end
  else
    file.write("\t#{default},\n")
  end
end

def write_header(file, name, num, cnt, default)
    while num>cnt
      file.write("/* gap in syscall table - num: #{num} */\n\{\n")
      default.each { |h|
        file.write("\t#{h},\n")
      }
      file.write("},\n")
      cnt += 1
    end
    
    file.write(sprintf("/* handlers for %03d sys\_#{name} */\n{\n", num))
end

def write_footer(file)
  file.write("},\n")
end

print("generating MVEE_syscall_handler_table.h...\n")
File.open("#{@arch}/MVEE_syscall_handler_table.tmp", 'w') { |file|
  file.write("/* this file was generated by #{$PROGRAM_NAME} - do not edit manually */\n")
  file.write("const mvee_syscall_handler monitor::syscall_handler_table[MAX_CALLS][4] = {\n")

  cnt=0
  @syscalls.each { |num, name|
    write_header(file, name, num.to_i, cnt, ["MVEE_HANDLER_DONTNEED"]*4)

    name = @aliases[name] if @aliases[name]

    write_handler(file, name, "GET_CALL_TYPE", "MVEE_HANDLER_DONTNEED")
    write_handler(file, name, "PRECALL", "MVEE_HANDLER_DONTHAVE")
    write_handler(file, name, "CALL", "MVEE_HANDLER_DONTNEED")
    write_handler(file, name, "POSTCALL", "MVEE_HANDLER_DONTNEED")
    write_footer(file)

    cnt = num.to_i+1
  }

  file.write("};\n")
  file.write("const mvee_syscall_logger monitor::syscall_logger_table[MAX_CALLS][2] = {\n")
  cnt=0
  @syscalls.each { |num, name|
    write_header(file, name, num.to_i, cnt, ["MVEE_HANDLER_DONTNEED"]*2)

    name = @aliases[name] if @aliases[name]

    write_handler(file, name, "LOG_ARGS", "MVEE_LOGGER_DONTNEED")
    write_handler(file, name, "LOG_RETURN", "MVEE_LOGGER_DONTNEED")
    write_footer(file)

    cnt = num.to_i+1    
  }

  file.write("};")
}

replace_if_different("#{@arch}/MVEE_syscall_handler_table.h", "#{@arch}/MVEE_syscall_handler_table.tmp")

print("generating MVEE_syscall_string_table.h...\n")
File.open("#{@arch}/MVEE_syscall_string_table.tmp", 'w') { |file|
  file.write("/* this file was generated by #{$PROGRAM_NAME} - do not edit manually */\n")
  file.write("const char* mvee_syscall_string_table[MAX_CALLS] = {\n")
  cnt=0
  @syscalls.each { |num, name|
    while num.to_i>cnt
      file.write(sprintf("/* %03d */ \"sys_undefined\",\n", cnt))
      cnt += 1
    end

    file.write(sprintf("/* %03d */ \"sys_#{name}\",\n", cnt))
    cnt = num.to_i+1
  }    
  file.write("};\n")
}

replace_if_different("#{@arch}/MVEE_syscall_string_table.h", "#{@arch}/MVEE_syscall_string_table.tmp")

print("generating MVEE_syscall_alias_locks.h...\n")
File.open("#{@arch}/MVEE_syscall_alias_locks.tmp", 'w') { |file|
  file.write("/* this file was generated by #{$PROGRAM_NAME} - do not edit manually */\n")
  @aliases.each { |aliass, orig|
    file.write("#if defined(__NR_#{aliass}) && defined(__NR_#{orig})\n")
    file.write("mvee_handlers_setalias(__NR_#{orig}, __NR_#{aliass});\n")
    file.write("#endif\n")
  }
}

replace_if_different("#{@arch}/MVEE_syscall_alias_locks.h", "#{@arch}/MVEE_syscall_alias_locks.tmp")

print("generating MVEE_syscall_handler_prototypes.h...\n")
File.open("#{@arch}/MVEE_syscall_handler_prototypes.tmp", 'w') { |file|
  file.write("/* this file was generated by #{$PROGRAM_NAME} - do not edit manually */\n")
  @handlers.each { |syscall, funcs|
    funcs.each { |type, func|
      if (func.match(/(log_args|log_return)/))
          file.write("void #{func}(int variantnum);\n") if not func.match(/DONTNEED/)
      else
        file.write("long #{func}(int variantnum);\n") if not func.match(/DONTNEED/)     
      end
    }
  }
}

replace_if_different("#{@arch}/MVEE_syscall_handler_prototypes.h", "#{@arch}/MVEE_syscall_handler_prototypes.tmp")

print("generating MVEE_numcalls.h...\n")
File.open("MVEE/Inc/MVEE_numcalls.tmp", 'w') { |file|
  file.write("/* this file was generated by #{$PROGRAM_NAME} - do not edit manually */\n")
  file.write("#define MAX_CALLS #{@numcalls}\n")
}

replace_if_different("MVEE/Inc/MVEE_numcalls.h", "MVEE/Inc/MVEE_numcalls.tmp")
