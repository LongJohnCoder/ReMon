diff -r --unified -N glibc-2.19-woc/csu/ipmon_stub_asm.S glibc-2.19-ipmon/csu/ipmon_stub_asm.S
--- glibc-2.19-woc/csu/ipmon_stub_asm.S	1969-12-31 16:00:00.000000000 -0800
+++ glibc-2.19-ipmon/csu/ipmon_stub_asm.S	2016-01-26 05:51:27.801449054 -0800
@@ -0,0 +1,22 @@
+/* This just performs the syscall and returns, it does not set errno
+   like the normal syscall function does. We can use it as a weak
+   symbol until the IP-MON overrides it */
+	
+        .text
+        .globl ipmon_syscall
+        .type ipmon_syscall,@function
+		.weak ipmon_syscall
+		.cfi_startproc
+        .align 16
+
+ipmon_syscall:
+        movq %rdi, %rax
+        movq %rsi, %rdi
+        movq %rdx, %rsi
+        movq %rcx, %rdx
+        movq %r8, %r10
+        movq %r9, %r8
+        movq 8(%rsp), %r9
+        syscall
+        ret
+		.cfi_endproc
diff -r --unified -N glibc-2.19-woc/csu/ipmon_stub.c glibc-2.19-ipmon/csu/ipmon_stub.c
--- glibc-2.19-woc/csu/ipmon_stub.c	1969-12-31 16:00:00.000000000 -0800
+++ glibc-2.19-ipmon/csu/ipmon_stub.c	2016-01-26 05:51:27.802449054 -0800
@@ -0,0 +1,8 @@
+/* 
+ * This file contains stubs that are overridden at run-time by IP-MON
+ */
+
+void __attribute__((weak)) ipmon_register_thread(void)
+{
+
+}
diff -r --unified -N glibc-2.19-woc/csu/Makefile glibc-2.19-ipmon/csu/Makefile
--- glibc-2.19-woc/csu/Makefile	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/csu/Makefile	2016-01-26 05:51:27.802449054 -0800
@@ -25,7 +25,7 @@
 subdir := csu
 
 routines = init-first libc-start $(libc-init) sysdep version check_fds \
-	   libc-tls elf-init dso_handle
+	   libc-tls elf-init dso_handle ipmon_stub ipmon_stub_asm
 aux	 = errno
 elide-routines.os = libc-tls
 static-only-routines = elf-init
diff -r --unified -N glibc-2.19-woc/csu/Versions glibc-2.19-ipmon/csu/Versions
--- glibc-2.19-woc/csu/Versions	2016-03-31 13:07:41.516882650 -0700
+++ glibc-2.19-ipmon/csu/Versions	2016-01-26 05:51:27.802449054 -0800
@@ -12,6 +12,8 @@
     mvee_all_heaps_aligned;
     mvee_should_sync_tid;
     mvee_should_futex_unlock;
+    ipmon_syscall;
+    ipmon_register_thread;
   }
   GLIBC_2.1 {
     # New special glibc functions.
diff -r --unified -N glibc-2.19-woc/malloc/malloc.c glibc-2.19-ipmon/malloc/malloc.c
--- glibc-2.19-woc/malloc/malloc.c	2016-03-31 13:07:41.519882650 -0700
+++ glibc-2.19-ipmon/malloc/malloc.c	2016-01-26 05:51:27.803449055 -0800
@@ -4615,7 +4615,7 @@
                        content.  */
                     memset (paligned_mem, 0x89, size & ~psm1);
 #endif
-                    __madvise (paligned_mem, size & ~psm1, MADV_DONTNEED);
+		    __madvise (paligned_mem, size & ~psm1, MADV_DONTNEED);
 
                     result = 1;
                   }
diff -r --unified -N glibc-2.19-woc/nptl/pthread_create.c glibc-2.19-ipmon/nptl/pthread_create.c
--- glibc-2.19-woc/nptl/pthread_create.c	2016-03-31 13:07:41.524882650 -0700
+++ glibc-2.19-ipmon/nptl/pthread_create.c	2016-01-26 05:51:27.803449055 -0800
@@ -304,6 +304,9 @@
 
       LIBC_PROBE (pthread_start, 3, (pthread_t) pd, pd->start_routine, pd->arg);
 
+      /* MVEE IP-MON patch. TLS is initialized here so it should be safe to register IP-MON! */ 
+      ipmon_register_thread();
+
       /* Run the code the user provided.  */
 #ifdef CALL_THREAD_FCT
       THREAD_SETMEM (pd, result, CALL_THREAD_FCT (pd));
diff -r --unified -N glibc-2.19-woc/nptl/sysdeps/unix/sysv/linux/fork.c glibc-2.19-ipmon/nptl/sysdeps/unix/sysv/linux/fork.c
--- glibc-2.19-woc/nptl/sysdeps/unix/sysv/linux/fork.c	2016-03-31 13:07:41.528882651 -0700
+++ glibc-2.19-ipmon/nptl/sysdeps/unix/sysv/linux/fork.c	2016-01-31 15:21:11.909309382 -0800
@@ -207,6 +207,8 @@
 
       /* Initialize the fork lock.  */
       __fork_lock = LLL_LOCK_INITIALIZER;
+
+	  ipmon_register_thread();
     }
   else
     {
diff -r --unified -N glibc-2.19-woc/nptl/sysdeps/unix/sysv/linux/x86_64/cancellation.S glibc-2.19-ipmon/nptl/sysdeps/unix/sysv/linux/x86_64/cancellation.S
--- glibc-2.19-woc/nptl/sysdeps/unix/sysv/linux/x86_64/cancellation.S	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/nptl/sysdeps/unix/sysv/linux/x86_64/cancellation.S	2016-01-26 05:51:27.804449055 -0800
@@ -111,7 +111,7 @@
 	xorq	%r10, %r10
 	addq	$CANCELHANDLING, %rdi
 	LOAD_PRIVATE_FUTEX_WAIT (%esi)
-	syscall
+	DO_SYSCALL
 	movl	%fs:CANCELHANDLING, %eax
 	jmp	3b
 END(__pthread_disable_asynccancel)
diff -r --unified -N glibc-2.19-woc/nptl/sysdeps/x86_64/pthreaddef.h glibc-2.19-ipmon/nptl/sysdeps/x86_64/pthreaddef.h
--- glibc-2.19-woc/nptl/sysdeps/x86_64/pthreaddef.h	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/nptl/sysdeps/x86_64/pthreaddef.h	2016-01-26 05:51:27.804449055 -0800
@@ -47,5 +47,10 @@
 /* XXX Until we have a better place keep the definitions here.  */
 
 /* While there is no such syscall.  */
+#if defined IS_IN_rtld
 #define __exit_thread_inline(val) \
   asm volatile ("syscall" :: "a" (__NR_exit), "D" (val))
+#else /* !defined IS_IN_rtld */
+#define __exit_thread_inline(val) \
+  ipmon_syscall(__NR_exit, val)
+#endif /* defined IS_IN_rtld */
diff -r --unified -N glibc-2.19-woc/nptl/sysdeps/x86_64/tls.h glibc-2.19-ipmon/nptl/sysdeps/x86_64/tls.h
--- glibc-2.19-woc/nptl/sysdeps/x86_64/tls.h	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/nptl/sysdeps/x86_64/tls.h	2016-01-26 05:51:27.804449055 -0800
@@ -144,6 +144,7 @@
 
    We have to make the syscall for both uses of the macro since the
    address might be (and probably is) different.  */
+#if defined IS_IN_rtld
 # define TLS_INIT_TP(thrdescr, secondcall) \
   ({ void *_thrdescr = (thrdescr);					      \
      tcbhead_t *_head = _thrdescr;					      \
@@ -163,7 +164,21 @@
 									      \
     _result ? "cannot set %fs base address for thread-local storage" : 0;     \
   })
-
+#else /* !defined IS_IN_rtld */
+# define TLS_INIT_TP(thrdescr, secondcall) \
+  ({ void *_thrdescr = (thrdescr);					      \
+     tcbhead_t *_head = _thrdescr;					      \
+     int _result;							      \
+									      \
+     _head->tcb = _thrdescr;						      \
+     /* For now the thread descriptor is at the same address.  */	      \
+     _head->self = _thrdescr;						      \
+									      \
+     /* It is a simple syscall to set the %fs value for the thread.  */	      \
+     _result = ipmon_syscall(__NR_arch_prctl, ARCH_SET_FS, _thrdescr);         \
+    _result ? "cannot set %fs base address for thread-local storage" : 0;     \
+  })
+#endif /* defined IS_IN_rtld */
 
 /* Return the address of the dtv for the current thread.  */
 # define THREAD_DTV() \
diff -r --unified -N glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/clone.S glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/clone.S
--- glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/clone.S	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/clone.S	2016-01-26 05:51:27.804449055 -0800
@@ -99,7 +99,7 @@
 	movl	$-1, %eax
 	jne	2f
 	movl	$SYS_ify(getpid), %eax
-	syscall
+	DO_SYSCALL
 2:	movl	%eax, %fs:PID
 	movl	%eax, %fs:TID
 1:
diff -r --unified -N glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/getcontext.S glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/getcontext.S
--- glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/getcontext.S	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/getcontext.S	2016-01-26 05:51:27.804449055 -0800
@@ -75,7 +75,7 @@
 #endif
 	movl	$_NSIG8,%r10d
 	movl	$__NR_rt_sigprocmask, %eax
-	syscall
+	DO_SYSCALL
 	cmpq	$-4095, %rax		/* Check %rax for error.  */
 	jae	SYSCALL_ERROR_LABEL	/* Jump to error handler if error.  */
 
diff -r --unified -N glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/____longjmp_chk.S glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/____longjmp_chk.S
--- glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/____longjmp_chk.S	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/____longjmp_chk.S	2016-01-26 05:51:27.805449055 -0800
@@ -84,7 +84,7 @@
 	xorl	%edi, %edi
 	lea	-sizeSS(%rsp), %RSI_LP
 	movl	$__NR_sigaltstack, %eax
-	syscall
+	DO_SYSCALL
 	/* Without working sigaltstack we cannot perform the test.  */
 	testl	%eax, %eax
 	jne	.Lok2
diff -r --unified -N glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/sched_getcpu.S glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/sched_getcpu.S
--- glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/sched_getcpu.S	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/sched_getcpu.S	2016-01-26 05:51:27.805449055 -0800
@@ -42,7 +42,7 @@
 #else
 # ifdef __NR_getcpu
 	movl	$__NR_getcpu, %eax
-	syscall
+	DO_SYSCALL
 #  ifndef __ASSUME_GETCPU_SYSCALL
 	cmpq	$-ENOSYS, %rax
 	jne	1f
diff -r --unified -N glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/setcontext.S glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/setcontext.S
--- glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/setcontext.S	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/setcontext.S	2016-01-26 05:51:27.805449055 -0800
@@ -43,7 +43,7 @@
 	movl	$SIG_SETMASK, %edi
 	movl	$_NSIG8,%r10d
 	movl	$__NR_rt_sigprocmask, %eax
-	syscall
+	DO_SYSCALL
 	popq	%rdi			/* Reload %rdi, adjust stack.  */
 	cfi_adjust_cfa_offset(-8)
 	cmpq	$-4095, %rax		/* Check %rax for error.  */
diff -r --unified -N glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/swapcontext.S glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/swapcontext.S
--- glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/swapcontext.S	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/swapcontext.S	2016-01-26 05:51:27.805449055 -0800
@@ -75,7 +75,7 @@
 	movl	$SIG_SETMASK, %edi
 	movl	$_NSIG8,%r10d
 	movl	$__NR_rt_sigprocmask, %eax
-	syscall
+	DO_SYSCALL
 	cmpq	$-4095, %rax		/* Check %rax for error.  */
 	jae	SYSCALL_ERROR_LABEL	/* Jump to error handler if error.  */
 
diff -r --unified -N glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/syscall.S glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/syscall.S
--- glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/syscall.S	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/syscall.S	2016-01-26 05:51:27.805449055 -0800
@@ -27,6 +27,7 @@
 
 	.text
 ENTRY (syscall)
+#if defined IS_IN_rtld
 	movq %rdi, %rax		/* Syscall number -> rax.  */
 	movq %rsi, %rdi		/* shift arg1 - arg5.  */
 	movq %rdx, %rsi
@@ -35,6 +36,16 @@
 	movq %r9, %r8
 	movq 8(%rsp),%r9	/* arg6 is on the stack.  */
 	syscall			/* Do the system call.  */
+#else
+		
+//	pushq %r9
+//	movq 16(%rsp),%rax
+//	pushq %rax
+	CALL_IPMON_SYSCALL
+//	popq %r9
+//	popq %r9
+		
+#endif
 	cmpq $-4095, %rax	/* Check %rax for error.  */
 	jae SYSCALL_ERROR_LABEL	/* Jump to error handler if error.  */
 	ret			/* Return to caller.  */
diff -r --unified -N glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/sysdep.h glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/sysdep.h
--- glibc-2.19-woc/sysdeps/unix/sysv/linux/x86_64/sysdep.h	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/unix/sysv/linux/x86_64/sysdep.h	2016-01-26 05:51:27.806449055 -0800
@@ -172,12 +172,16 @@
 
     Syscalls of more than 6 arguments are not supported.  */
 
+#if defined IS_IN_rtld
+
 # undef	DO_CALL
 # define DO_CALL(syscall_name, args)		\
     DOARGS_##args				\
     movl $SYS_ify (syscall_name), %eax;		\
     syscall;
 
+# define DO_SYSCALL syscall;
+
 # define DOARGS_0 /* nothing */
 # define DOARGS_1 /* nothing */
 # define DOARGS_2 /* nothing */
@@ -186,6 +190,73 @@
 # define DOARGS_5 DOARGS_4
 # define DOARGS_6 DOARGS_5
 
+#else /* !defined IS_IN_rtld */
+
+# undef DO_CALL
+# define DO_CALL(syscall_name, args)		\
+    SAVE_REGS					\
+    DOARGS_##args				\
+    movl $SYS_ify (syscall_name), %edi;		\
+    CALL_IPMON_SYSCALL				\
+    RESTORE_REGS
+
+/* replace a syscall instruction with a call to ipmon_syscall */
+# define DO_SYSCALL				\
+  SAVE_REGS					\
+  movq %r8, %r9;				\
+  movq %r10, %r8;				\
+  movq %rdx, %rcx;				\
+  movq %rsi, %rdx;				\
+  movq %rdi, %rsi;				\
+  movq %rax, %rdi;				\
+  CALL_IPMON_SYSCALL				\
+  RESTORE_REGS
+
+
+#if defined PIC
+# define CALL_IPMON_SYSCALL call ipmon_syscall@plt;
+#else  /* !PIC */
+# define CALL_IPMON_SYSCALL call ipmon_syscall;
+#endif /* defined PIC */
+
+# define SAVE_REGS				\
+  pushq %rdx;					\
+  cfi_adjust_cfa_offset(8);		\
+  pushq %rsi;					\
+  cfi_adjust_cfa_offset(8);		\
+  pushq %rdi;					\
+  cfi_adjust_cfa_offset(8);		\
+  pushq %r8;					\
+  cfi_adjust_cfa_offset(8);		\
+  pushq %r10;					\
+  cfi_adjust_cfa_offset(8);		\
+  pushq %r9;					\
+  cfi_adjust_cfa_offset(8);
+
+# define RESTORE_REGS			\
+	popq %r9;					\
+	cfi_adjust_cfa_offset(-8);	\
+	popq %r10;					\
+	cfi_adjust_cfa_offset(-8);	\
+	popq %r8;					\
+	cfi_adjust_cfa_offset(-8);	\
+	popq %rdi;					\
+	cfi_adjust_cfa_offset(-8);	\
+	popq %rsi;					\
+	cfi_adjust_cfa_offset(-8);	\
+	popq %rdx;					\
+	cfi_adjust_cfa_offset(-8); 
+
+# define DOARGS_0 /* nothing */
+# define DOARGS_1 movq %rdi, %rsi;
+# define DOARGS_2 movq %rsi, %rdx; DOARGS_1
+# define DOARGS_3 movq %rdx, %rcx; DOARGS_2
+# define DOARGS_4 movq %rcx, %r8; DOARGS_3
+# define DOARGS_5 movq %r8, %r9; DOARGS_4
+# define DOARGS_6 DOARGS_5 /* r9 has already been pushed to the top of the stack in the SAVE_REGS macro */
+
+#endif /* defined IS_IN_rtld */
+
 #else	/* !__ASSEMBLER__ */
 /* Define a macro which expands inline into the wrapper code for a system
    call.  */
@@ -217,6 +288,7 @@
 # undef INTERNAL_SYSCALL_DECL
 # define INTERNAL_SYSCALL_DECL(err) do { } while (0)
 
+#if defined IS_IN_rtld
 # define INTERNAL_SYSCALL_NCS(name, err, nr, args...) \
   ({									      \
     unsigned long int resultvar;					      \
@@ -227,9 +299,6 @@
     : "=a" (resultvar)							      \
     : "0" (name) ASM_ARGS_##nr : "memory", "cc", "r11", "cx");		      \
     (long int) resultvar; })
-# undef INTERNAL_SYSCALL
-# define INTERNAL_SYSCALL(name, err, nr, args...) \
-  INTERNAL_SYSCALL_NCS (__NR_##name, err, nr, ##args)
 
 # define INTERNAL_SYSCALL_NCS_TYPES(name, err, nr, args...) \
   ({									      \
@@ -241,6 +310,51 @@
     : "=a" (resultvar)							      \
     : "0" (name) ASM_ARGS_##nr : "memory", "cc", "r11", "cx");		      \
     (long int) resultvar; })
+
+# define DO_SYSCALL "	syscall\n"
+
+#else /* !defined IS_IN_rtld */
+
+# define INTERNAL_SYSCALL_NCS(name, err, nr, args...) IPMON_SYSCALL_##nr(name, args)
+
+# define IPMON_SYSCALL_0(name, args...) ipmon_syscall(name)
+# define IPMON_SYSCALL_1(name, args...) ipmon_syscall(name, args)
+# define IPMON_SYSCALL_2(name, args...) ipmon_syscall(name, args)
+# define IPMON_SYSCALL_3(name, args...) ipmon_syscall(name, args)
+# define IPMON_SYSCALL_4(name, args...) ipmon_syscall(name, args)
+# define IPMON_SYSCALL_5(name, args...) ipmon_syscall(name, args)
+# define IPMON_SYSCALL_6(name, args...) ipmon_syscall(name, args)
+
+# define INTERNAL_SYSCALL_NCS_TYPES(name, err, nr, args...)	\
+  IPMON_SYSCALL_TYPES_##nr(name, args)
+
+# define IPMON_SYSCALL_TYPES_0(name)		\
+  ipmon_syscall(name)
+# define IPMON_SYSCALL_TYPES_1(name, t1, a1)	\
+  ipmon_syscall(name, a1)
+# define IPMON_SYSCALL_TYPES_2(name, t1, a1, t2, a2)	\
+  ipmon_syscall(name, a1, a2)
+# define IPMON_SYSCALL_TYPES_3(name, t1, a1, t2, a2, t3, a3)	\
+  ipmon_syscall(name, a1, a2, a3)
+# define IPMON_SYSCALL_TYPES_4(name, t1, a1, t2, a2, t3, a3, t4, a4)	\
+  ipmon_syscall(name, a1, a2, a3, a4)
+# define IPMON_SYSCALL_TYPES_5(name, t1, a1, t2, a2, t3, a3, t4, a4, t5, a5) \
+  ipmon_syscall(name, a1, a2, a3, a4, a5)
+# define IPMON_SYSCALL_TYPES_6(name, t1, a1, t2, a2, t3, a3, t4, a4, t5, a5, t6, a6) \
+  ipmon_syscall(name, a1, a2, a3, a4, a5, a6)
+
+#if defined PIC
+# define CALL_IPMON_SYSCALL "	call ipmon_syscall@plt\n"
+#else  /* !PIC */
+# define CALL_IPMON_SYSCALL "	call ipmon_syscall\n"
+#endif
+
+#endif /* defined IS_IN_rtld */
+
+# undef INTERNAL_SYSCALL
+# define INTERNAL_SYSCALL(name, err, nr, args...) \
+  INTERNAL_SYSCALL_NCS (__NR_##name, err, nr, ##args)
+
 # undef INTERNAL_SYSCALL_TYPES
 # define INTERNAL_SYSCALL_TYPES(name, err, nr, args...) \
   INTERNAL_SYSCALL_NCS_TYPES (__NR_##name, err, nr, ##args)
@@ -432,3 +546,4 @@
 #endif
 
 #endif /* linux/x86_64/sysdep.h */
+
diff -r --unified -N glibc-2.19-woc/sysdeps/x86_64/sysdep.h glibc-2.19-ipmon/sysdeps/x86_64/sysdep.h
--- glibc-2.19-woc/sysdeps/x86_64/sysdep.h	2014-02-07 01:04:38.000000000 -0800
+++ glibc-2.19-ipmon/sysdeps/x86_64/sysdep.h	2016-01-26 05:51:27.806449055 -0800
@@ -152,6 +152,9 @@
 #define R14_LP	"r14"
 #define R15_LP	"r15"
 
+extern unsigned long   ipmon_syscall            (unsigned long syscall_no, ...);
+extern void            ipmon_register_thread    (void);
+
 #endif	/* __ASSEMBLER__ */
 
 #endif	/* _X86_64_SYSDEP_H */
