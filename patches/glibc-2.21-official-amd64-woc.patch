diff -N -r --unified glibc-2.21.orig/crypt/crypt_util.c glibc-2.21/crypt/crypt_util.c
--- glibc-2.21.orig/crypt/crypt_util.c	2015-04-27 12:45:19.726251481 -0700
+++ glibc-2.21/crypt/crypt_util.c	2015-04-27 12:45:50.883314452 -0700
@@ -353,10 +353,10 @@
   sb[2] = (long64*)__data->sb2; sb[3] = (long64*)__data->sb3;
 #endif
 
-  if(small_tables_initialized == 0) {
+  if(atomic_load(small_tables_initialized) == 0) {
 #ifdef __GNU_LIBRARY__
     __libc_lock_lock (_ufc_tables_lock);
-    if(small_tables_initialized)
+    if(atomic_load(small_tables_initialized))
       goto small_tables_done;
 #endif
 
@@ -460,7 +460,7 @@
       }
     }
     atomic_write_barrier ();
-    small_tables_initialized = 1;
+    atomic_store(small_tables_initialized, 1);
 #ifdef __GNU_LIBRARY__
 small_tables_done:
     __libc_lock_unlock(_ufc_tables_lock);
diff -N -r --unified glibc-2.21.orig/csu/libc-start.c glibc-2.21/csu/libc-start.c
--- glibc-2.21.orig/csu/libc-start.c	2015-04-27 12:45:19.730249541 -0700
+++ glibc-2.21/csu/libc-start.c	2015-04-28 19:16:30.221082316 -0700
@@ -105,6 +105,304 @@
 # define MAIN_AUXVEC_PARAM
 #endif
 
+#ifdef USE_MVEE_LIBC
+
+
+#define MVEE_SLAVE_YIELD
+// #define MVEE_TICKET_LOCKS
+#define MVEE_TOTAL_CLOCK_COUNT   2048
+#define MVEE_CLOCK_GROUP_SIZE    64
+#define MVEE_TOTAL_CLOCK_GROUPS  (MVEE_TOTAL_CLOCK_COUNT / MVEE_CLOCK_GROUP_SIZE)
+
+struct mvee_counter
+{
+  volatile unsigned long lock;
+  volatile unsigned long counter;
+  unsigned char padding[64 - 2 * sizeof(unsigned long)]; // prevents false sharing
+};
+
+struct mvee_op_entry
+{
+  volatile unsigned long  counter_and_idx; // the value we must see in mvee_counters[idx] before we can replay the operation
+};
+
+static unsigned char                  mvee_sync_enabled             = 0;
+static unsigned char                  mvee_libc_initialized         = 0;
+static unsigned char                  mvee_master_variant           = 0;
+static __thread unsigned long         mvee_thread_local_pos         = 0; // our position in the thread local queue
+static __thread  
+    struct mvee_op_entry*             mvee_thread_local_queue       = NULL;
+static __thread unsigned long         mvee_thread_local_queue_size  = 0; // nr of slots in the thread local queue
+static __thread unsigned short        mvee_prev_idx                 = 0;
+
+__attribute__((aligned (64)))
+static struct mvee_counter            mvee_counters[MVEE_TOTAL_CLOCK_COUNT + 1];
+
+#define likely(x)       __builtin_expect((x),1)
+#define unlikely(x)     __builtin_expect((x),0)
+
+/* MVEE PATCH:
+   Checks wether or not all variants got HEAP_MAX_SIZE aligned heaps from
+   the previous mmap request. If some of them have not, ALL variants
+   have to bail out and fall back to another heap allocation method.
+   This ensures that the variants stay in sync with respect to future mm
+   requests.
+*/
+#define HEAP_MIN_SIZE (32 * 1024)
+#ifndef HEAP_MAX_SIZE
+# ifdef DEFAULT_MMAP_THRESHOLD_MAX
+#  define HEAP_MAX_SIZE (2 * DEFAULT_MMAP_THRESHOLD_MAX)
+# else
+#  define HEAP_MAX_SIZE (1024 * 1024) /* must be a power of two */
+# endif
+#endif
+
+int
+mvee_all_heaps_aligned(char* heap)
+{
+  // if we're not running under MVEE control,
+  // just check the alignment of the current heap
+  if (!mvee_thread_local_queue)
+    {
+      if ((unsigned long)heap & (HEAP_MAX_SIZE-1))
+	return 0;
+      return 1;
+    }
+
+  // We ARE running under MVEE control
+  // => ask the MVEE to check the alignments
+  // of ALL heaps
+  return syscall(MVEE_ALL_HEAPS_ALIGNED);
+}
+
+/* 
+ * mvee_infinite_loop:
+ * this function is used for both thread transfering and signal delivery 
+ * 
+ * 1) to transfer threads to a new monitor, the original monitor (i.e. the 
+ * monitor that monitors the childs that instigated the fork event) needs to
+ * detach from the threads first. While the threads are detached, they can
+ * run freely, without the intervention of a debugger.
+ * As such, we have to move the program counter to an infinite loop while
+ * the threads are detached. This way, the threads will all be in an equivalent
+ * state when the new monitor attaches to them.
+ * Because we're going to replace the registers by their original contents
+ * when the new monitor attaches, we can use sys_pause calls in the infinite
+ * loop.
+ * 
+ * 2) delivering signals through the ptrace API happens asynchronously 
+ * (I found out the hard way). As such, we should wait for the threads to be
+ * in equivalent states (e.g. stopped on the same syscall). Then the registers
+ * should be backed up and the syscall nr should be replaced by a harmless
+ * syscall that doesn't modify the program state. We use sys_getpid for this
+ * purpose. When that replaced syscall returns, we change the pc to this
+ * infinite loop while we wait for async signal delivery.
+ * We probably cannot use syscalls while waiting for signal delivery. 
+ * One possible exception is sys_sched_yield. Our modified MVEE kernel does
+ * not report this syscall to the ptracer
+ * 
+ * the with_syscalls parameter is passed through the ecx register!
+ */
+void mvee_infinite_loop(int with_syscalls, int dummy)
+{
+  if (with_syscalls)
+    {
+      for (;;)
+	syscall(__NR_pause);
+    }
+  else
+    {
+      for (;;)
+	{
+	  dummy = dummy << 2;
+	}
+    }
+}
+
+static inline void mvee_check_buffer(void)
+{
+  if (unlikely(!mvee_thread_local_queue))
+    {
+      long mvee_thread_local_queue_id = syscall(MVEE_GET_SHARED_BUFFER, &mvee_counters, MVEE_LIBC_ATOMIC_BUFFER, &mvee_thread_local_queue_size, &mvee_thread_local_pos, NULL);
+      mvee_thread_local_queue_size   /= sizeof(struct mvee_op_entry);
+      mvee_thread_local_queue         = (void*)syscall(__NR_shmat, mvee_thread_local_queue_id, NULL, 0);     
+    }
+}
+
+
+// This function is a bit tricky, especially on x86_64!
+// In some contexts, such as syscalls that enable asynchronous cancellation,
+// libc expects none of the code it executes to touch registers other than
+// %rax and %r11. Consequently, we have to make sure that at most 2 registers
+// live at any point during our mvee funcs!
+static inline int mvee_should_sync(void)
+{
+  if (unlikely(!mvee_libc_initialized))
+  {
+    syscall(MVEE_RUNS_UNDER_MVEE_CONTROL, &mvee_sync_enabled, &mvee_infinite_loop, 
+		       NULL, NULL, &mvee_master_variant);
+    mvee_libc_initialized = 1;
+  }
+  return mvee_sync_enabled;
+}
+
+
+int mvee_should_sync_tid(void)
+{
+  return mvee_should_sync();
+}
+
+void mvee_invalidate_buffer(void)
+{
+  mvee_thread_local_queue = NULL;
+}
+
+#define cpu_relax() asm volatile("rep; nop" ::: "memory")
+
+#define gcc_barrier() asm volatile("" ::: "memory")
+
+static unsigned short mvee_hash_word_ptr(void* word_ptr)
+{
+  // page number defines the clock group
+  // offset within page defines the clock within that group
+
+  return 
+    (((((unsigned long)word_ptr >> 24) % MVEE_TOTAL_CLOCK_GROUPS) * (MVEE_CLOCK_GROUP_SIZE) 
+     + ((((unsigned long)word_ptr & 4095) >> 6) % MVEE_CLOCK_GROUP_SIZE))
+     & 0xFFF) + 1;
+}
+
+#ifdef MVEE_TICKET_LOCKS
+static inline unsigned long mvee_write_lock_result_prepare(unsigned short idx)
+{
+  unsigned long cntr = __sync_fetch_and_add(&mvee_counters[idx].lock, 1);
+
+  while (cntr != mvee_counters[idx].counter)
+    cpu_relax();
+
+  return cntr;
+}
+
+static inline void mvee_write_lock_result_finish(unsigned short idx)
+{
+  gcc_barrier();
+  mvee_counters[idx].counter++;
+}
+
+#else
+static inline unsigned long mvee_write_lock_result_prepare(unsigned short idx)
+{
+  while (!__sync_bool_compare_and_swap(&mvee_counters[idx].lock, 0, 1))
+    cpu_relax();
+
+  return mvee_counters[idx].counter;    
+}
+
+static inline void mvee_write_lock_result_finish(unsigned short idx)
+{
+  gcc_barrier();
+  orig_nonatomic_increment(&mvee_counters[idx].counter);
+  mvee_counters[idx].lock = 0;
+}
+#endif
+
+static inline void mvee_write_lock_result_write(unsigned long pos, unsigned short idx)
+{  
+  mvee_thread_local_queue[mvee_thread_local_pos++].counter_and_idx 
+    = (pos << 12) | idx;
+}
+
+static inline void mvee_read_lock_result_wait(void)
+{
+  unsigned long counter_and_idx = 0;
+
+  while (unlikely(1))
+    {
+      counter_and_idx = mvee_thread_local_queue[mvee_thread_local_pos].counter_and_idx;
+
+      if (likely(counter_and_idx))
+	break;
+
+#ifdef MVEE_SLAVE_YIELD
+	syscall(__NR_sched_yield);
+#else
+	cpu_relax();
+#endif
+    }
+
+  mvee_prev_idx = counter_and_idx & 0xFFF;
+  counter_and_idx &= ~0xFFF;
+
+  while ((mvee_counters[mvee_prev_idx].counter << 12) != counter_and_idx)
+#ifdef MVEE_SLAVE_YIELD
+    syscall(__NR_sched_yield);
+#else
+    cpu_relax();
+#endif
+}
+
+static inline void mvee_read_lock_result_wake(unsigned short idx)
+{
+  gcc_barrier();
+  mvee_counters[idx].counter++;
+  mvee_thread_local_pos++;
+}
+
+static inline void mvee_maybe_flush_queue(void)
+{
+  if (unlikely(mvee_thread_local_pos >= mvee_thread_local_queue_size))
+    {
+      syscall(MVEE_FLUSH_SHARED_BUFFER, MVEE_LIBC_ATOMIC_BUFFER);
+      mvee_thread_local_pos = 0;
+    }
+}
+
+unsigned char mvee_atomic_preop_internal(void* word_ptr)
+{
+  if (unlikely(!mvee_should_sync()))
+    return 0;
+  mvee_check_buffer();
+  mvee_maybe_flush_queue();
+  if (likely(mvee_master_variant))
+    {
+      mvee_prev_idx = mvee_hash_word_ptr(word_ptr);
+      unsigned long pos = mvee_write_lock_result_prepare(mvee_prev_idx);
+      mvee_write_lock_result_write(pos, mvee_prev_idx);
+      return 1;
+    }
+  else
+    {
+      mvee_read_lock_result_wait();
+      return 2;
+    }
+}
+
+void mvee_atomic_postop_internal(unsigned char preop_result)
+{
+  if(likely(preop_result) == 1)
+    mvee_write_lock_result_finish(mvee_prev_idx);
+  else if (likely(preop_result) == 2)
+    mvee_read_lock_result_wake(mvee_prev_idx);
+}
+
+unsigned char mvee_atomic_preop(unsigned short op_type, void* word_ptr)
+{
+  return mvee_atomic_preop_internal(word_ptr);
+}
+
+void mvee_atomic_postop(unsigned char preop_result)
+{
+  mvee_atomic_postop_internal(preop_result);
+}
+
+unsigned char mvee_should_futex_unlock(void)
+{
+  return (!mvee_master_variant && mvee_should_sync()) ? 1 : 0;
+}
+
+
+#endif
+
 STATIC int LIBC_START_MAIN (int (*main) (int, char **, char **
 					 MAIN_AUXVEC_DECL),
 			    int argc,
diff -N -r --unified glibc-2.21.orig/csu/Versions glibc-2.21/csu/Versions
--- glibc-2.21.orig/csu/Versions	2015-04-27 12:45:19.730249541 -0700
+++ glibc-2.21/csu/Versions	2015-04-28 13:38:06.677867230 -0700
@@ -2,6 +2,13 @@
   GLIBC_2.0 {
     # helper functions
     __libc_init_first; __libc_start_main;
+    mvee_atomic_preop;
+    mvee_atomic_postop;
+    mvee_atomic_preop_internal;
+    mvee_atomic_postop_internal;
+    mvee_invalidate_buffer;
+    mvee_all_heaps_aligned;
+    mvee_should_sync_tid;
   }
   GLIBC_2.1 {
     # New special glibc functions.
diff -N -r --unified glibc-2.21.orig/include/list.h glibc-2.21/include/list.h
--- glibc-2.21.orig/include/list.h	2015-04-27 12:45:19.778226262 -0700
+++ glibc-2.21/include/list.h	2015-04-27 12:46:54.885145456 -0700
@@ -57,11 +57,11 @@
 static inline void
 list_add (list_t *newp, list_t *head)
 {
-  newp->next = head->next;
+  newp->next = atomic_load(head->next);
   newp->prev = head;
-  head->next->prev = newp;
+  atomic_store(head->next->prev, newp);
   atomic_write_barrier ();
-  head->next = newp;
+  atomic_store(head->next, newp);
 }
 
 
@@ -69,8 +69,8 @@
 static inline void
 list_del (list_t *elem)
 {
-  elem->next->prev = elem->prev;
-  elem->prev->next = elem->next;
+  atomic_store(elem->next->prev, elem->prev);
+  atomic_store(elem->prev->next, elem->next);
 }
 
 
@@ -79,12 +79,12 @@
 list_splice (list_t *add, list_t *head)
 {
   /* Do nothing if the list which gets added is empty.  */
-  if (add != add->next)
+  if (add != atomic_load(add->next))
     {
-      add->next->prev = head;
-      add->prev->next = head->next;
-      head->next->prev = add->prev;
-      head->next = add->next;
+      atomic_store(add->next->prev, head);
+      atomic_store(add->prev->next, head->next);
+      atomic_store(head->next->prev, add->prev);
+      atomic_store(head->next, add->next);
     }
 }
 
@@ -97,20 +97,20 @@
 
 /* Iterate forward over the elements of the list.  */
 # define list_for_each(pos, head) \
-  for (pos = (head)->next; pos != (head); pos = pos->next)
+  for (pos = atomic_load((head)->next); pos != (head); pos = atomic_load(pos->next))
 
 
 /* Iterate forward over the elements of the list.  */
 # define list_for_each_prev(pos, head) \
-  for (pos = (head)->prev; pos != (head); pos = pos->prev)
+  for (pos = atomic_load((head)->prev); pos != (head); pos = atomic_load(pos->prev))
 
 
 /* Iterate backwards over the elements list.  The list elements can be
    removed from the list while doing this.  */
 # define list_for_each_prev_safe(pos, p, head) \
-  for (pos = (head)->prev, p = pos->prev; \
+  for (pos = atomic_load((head)->prev), p = atomic_load(pos->prev);	\
        pos != (head); \
-       pos = p, p = pos->prev)
+       pos = p, p = atomic_load(pos->prev))
 
 #endif /* _LIST_H */
 
diff -N -r --unified glibc-2.21.orig/inet/getnetgrent_r.c glibc-2.21/inet/getnetgrent_r.c
--- glibc-2.21.orig/inet/getnetgrent_r.c	2015-04-27 12:45:19.782224322 -0700
+++ glibc-2.21/inet/getnetgrent_r.c	2015-04-27 12:45:50.883314452 -0700
@@ -50,7 +50,7 @@
   static service_user *startp;
   int no_more;
 
-  if (!startp_initialized)
+  if (!atomic_load(startp_initialized))
     {
       /* Executing this more than once at the same time must yield the
 	 same result every time.  So we need no locking.  */
@@ -60,7 +60,7 @@
       PTR_MANGLE (startp);
 #endif
       atomic_write_barrier ();
-      startp_initialized = true;
+      atomic_store(startp_initialized, true);
     }
   else
     {
diff -N -r --unified glibc-2.21.orig/malloc/arena.c glibc-2.21/malloc/arena.c
--- glibc-2.21.orig/malloc/arena.c	2015-04-27 12:45:19.830201044 -0700
+++ glibc-2.21/malloc/arena.c	2015-04-27 12:57:25.770988603 -0700
@@ -511,7 +511,7 @@
 new_heap (size_t size, size_t top_pad)
 {
   size_t page_mask = GLRO (dl_pagesize) - 1;
-  char *p1, *p2;
+  char *p1, *p2, *prev_heap_area;
   unsigned long ul;
   heap_info *h;
 
@@ -530,12 +530,34 @@
      mapping (on Linux, this is the case for all non-writable mappings
      anyway). */
   p2 = MAP_FAILED;
-  if (aligned_heap_area)
+  prev_heap_area = atomic_load(aligned_heap_area);
+  if (prev_heap_area)
     {
-      p2 = (char *) MMAP (aligned_heap_area, HEAP_MAX_SIZE, PROT_NONE,
+      p2 = (char *) MMAP (prev_heap_area, HEAP_MAX_SIZE, PROT_NONE,
                           MAP_NORESERVE);
-      aligned_heap_area = NULL;
-      if (p2 != MAP_FAILED && ((unsigned long) p2 & (HEAP_MAX_SIZE - 1)))
+      atomic_store(aligned_heap_area, NULL);
+      /* MVEE Patch:
+	 The original code tries to do the following:
+	 1) It tries to allocate a new heap that expands the previously
+	 allocated heap (prev_heap_area) downwards. This way, 
+	 fragmentation can be minimized.
+	 2) It ensures that the newly allocated heap is HEAP_MAX_SIZE
+	 aligned. If it is not, the allocation is considered to have failed
+	 and malloc will allocate a HEAP_MAX_SIZE aligned block elsewhere.
+
+	 Inside the MVEE though, there is a bit of a problem. With ASLR
+	 enabled, it is very much possible that some replicae get a
+	 HEAP_MAX_SIZE aligned block, while others do not. This can happen
+	 because the previous heap cannot be extended downwards and the
+	 kernel picks a new base address randomly.
+
+	 In order to maintain consistent behavior later on, all allocations
+	 must either fail or succeed.
+	 => if we run under the MVEE's control, we check whether all
+	 heaps are aligned. If not, we unmap all of them, even if some
+	 WERE aligned!!!
+       */
+      if (p2 != MAP_FAILED && !mvee_all_heaps_aligned(p2))
         {
           __munmap (p2, HEAP_MAX_SIZE);
           p2 = MAP_FAILED;
@@ -543,6 +565,16 @@
     }
   if (p2 == MAP_FAILED)
     {
+      /* MVEE Patch:
+	 The MVEE will hold its internal MMAN lock across this mmap call
+	 and the subsequent (optional) munmap calls, thus ensuring that
+	 all replicae will have a consistent memory map after this whole
+	 operation.
+	 
+	 Because of this, we have to make sure that the MMAP+munmaps
+	 sequence is atomic and cannot block (=> we should _NOT_ grab
+	 ANY locks until after the last munmap)	
+       */
       p1 = (char *) MMAP (0, HEAP_MAX_SIZE << 1, PROT_NONE, MAP_NORESERVE);
       if (p1 != MAP_FAILED)
         {
@@ -551,9 +583,10 @@
           ul = p2 - p1;
           if (ul)
             __munmap (p1, ul);
-          else
-            aligned_heap_area = p2 + HEAP_MAX_SIZE;
+
           __munmap (p2 + HEAP_MAX_SIZE, HEAP_MAX_SIZE - ul);
+
+	  atomic_store(aligned_heap_area, p2 + HEAP_MAX_SIZE);
         }
       else
         {
@@ -563,7 +596,8 @@
           if (p2 == MAP_FAILED)
             return 0;
 
-          if ((unsigned long) p2 & (HEAP_MAX_SIZE - 1))
+	  /* MVEE patch: see comment above */
+          if (!mvee_all_heaps_aligned(p2))
             {
               __munmap (p2, HEAP_MAX_SIZE);
               return 0;
@@ -645,8 +679,8 @@
 
 #define delete_heap(heap) \
   do {									      \
-      if ((char *) (heap) + HEAP_MAX_SIZE == aligned_heap_area)		      \
-        aligned_heap_area = NULL;					      \
+    if ((char *) (heap) + HEAP_MAX_SIZE == atomic_load(aligned_heap_area)) \
+      atomic_store(aligned_heap_area, NULL);				\
       __munmap ((char *) (heap), HEAP_MAX_SIZE);			      \
     } while (0)
 
@@ -768,14 +802,10 @@
 static mstate
 get_free_list (void)
 {
+  (void) mutex_lock (&list_lock);
   mstate result = free_list;
-  if (result != NULL)
-    {
-      (void) mutex_lock (&list_lock);
-      result = free_list;
       if (result != NULL)
         free_list = result->next_free;
-      (void) mutex_unlock (&list_lock);
 
       if (result != NULL)
         {
@@ -783,7 +813,8 @@
           (void) mutex_lock (&result->mutex);
           tsd_setspecific (arena_key, (void *) result);
         }
-    }
+
+  (void) mutex_unlock (&list_lock);
 
   return result;
 }
@@ -838,24 +869,24 @@
   if (a == NULL)
     {
       /* Nothing immediately available, so generate a new arena.  */
-      if (narenas_limit == 0)
+      if (atomic_load(narenas_limit) == 0)
         {
           if (mp_.arena_max != 0)
-            narenas_limit = mp_.arena_max;
-          else if (narenas > mp_.arena_test)
+            atomic_store(narenas_limit, mp_.arena_max);
+          else if (atomic_load(narenas) > mp_.arena_test)
             {
               int n = __get_nprocs ();
 
               if (n >= 1)
-                narenas_limit = NARENAS_FROM_NCORES (n);
+                atomic_store(narenas_limit, NARENAS_FROM_NCORES (n));
               else
                 /* We have no information about the system.  Assume two
                    cores.  */
-                narenas_limit = NARENAS_FROM_NCORES (2);
+                atomic_store(narenas_limit, NARENAS_FROM_NCORES (2));
             }
         }
     repeat:;
-      size_t n = narenas;
+      size_t n = atomic_load(narenas);
       /* NB: the following depends on the fact that (size_t)0 - 1 is a
          very large number and that the underflow is OK.  If arena_max
          is set the value of arena_test is irrelevant.  If arena_test
@@ -863,7 +894,7 @@
          narenas_limit is 0.  There is no possibility for narenas to
          be too big for the test to always fail since there is not
          enough address space to create that many arenas.  */
-      if (__glibc_unlikely (n <= narenas_limit - 1))
+      if (__glibc_unlikely (n <= atomic_load(narenas_limit) - 1))
         {
           if (catomic_compare_and_exchange_bool_acq (&narenas, n + 1, n))
             goto repeat;
diff -N -r --unified glibc-2.21.orig/malloc/malloc.c glibc-2.21/malloc/malloc.c
--- glibc-2.21.orig/malloc/malloc.c	2015-04-27 12:45:19.830201044 -0700
+++ glibc-2.21/malloc/malloc.c	2015-04-27 12:59:41.852979578 -0700
@@ -1706,6 +1706,9 @@
 
 struct malloc_par
 {
+  /* MVEE patch */
+  mutex_t mutex;
+
   /* Tunable parameters */
   unsigned long trim_threshold;
   INTERNAL_SIZE_T top_pad;
@@ -1749,6 +1752,7 @@
 
 static struct malloc_par mp_ =
 {
+  .mutex = MUTEX_INITIALIZER,
   .top_pad = DEFAULT_TOP_PAD,
   .n_mmaps_max = DEFAULT_MMAP_MAX,
   .mmap_threshold = DEFAULT_MMAP_THRESHOLD,
@@ -2276,10 +2280,12 @@
      allocated mmapped regions, try to directly map this request
      rather than expanding top.
    */
-
+  
+  (void) mutex_lock(&mp_.mutex);
   if ((unsigned long) (nb) >= (unsigned long) (mp_.mmap_threshold) &&
       (mp_.n_mmaps < mp_.n_mmaps_max))
     {
+      (void) mutex_unlock(&mp_.mutex);
       char *mm;           /* return value from mmap call*/
 
     try_mmap:
@@ -2350,6 +2356,8 @@
             }
         }
     }
+  else
+    (void) mutex_unlock(&mp_.mutex);
 
   /* Record incoming configuration of top */
 
@@ -2887,13 +2895,17 @@
 
   arena_lock (ar_ptr, bytes);
   if (!ar_ptr)
-    return 0;
+    {
+      MVEE_MALLOC_HOOK(LIBC_MALLOC, 0, bytes, 0, 0);
+      return 0;
+    }
 
   victim = _int_malloc (ar_ptr, bytes);
   if (!victim)
     {
       LIBC_PROBE (memory_malloc_retry, 1, bytes);
       ar_ptr = arena_get_retry (ar_ptr, bytes);
+      MVEE_MALLOC_HOOK(LIBC_MALLOC, 1, bytes, ar_ptr, 0);
       if (__builtin_expect (ar_ptr != NULL, 1))
         {
           victim = _int_malloc (ar_ptr, bytes);
@@ -2901,9 +2913,15 @@
         }
     }
   else
-    (void) mutex_unlock (&ar_ptr->mutex);
+    {
+      MVEE_MALLOC_HOOK(LIBC_MALLOC, 2, bytes, ar_ptr, victim);
+      (void) mutex_unlock (&ar_ptr->mutex);
+    }
+
   assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||
           ar_ptr == arena_for_chunk (mem2chunk (victim)));
+
+  MVEE_MALLOC_HOOK(LIBC_MALLOC, 3, bytes, ar_ptr, victim);
   return victim;
 }
 libc_hidden_def (__libc_malloc)
@@ -2929,7 +2947,9 @@
 
   if (chunk_is_mmapped (p))                       /* release mmapped memory. */
     {
+      MVEE_MALLOC_HOOK(LIBC_FREE, 0, chunksize(p), 0, p);
       /* see if the dynamic brk/mmap threshold needs adjusting */
+      (void) mutex_lock(&mp_.mutex);
       if (!mp_.no_dyn_threshold
           && p->size > mp_.mmap_threshold
           && p->size <= DEFAULT_MMAP_THRESHOLD_MAX)
@@ -2939,11 +2959,13 @@
           LIBC_PROBE (memory_mallopt_free_dyn_thresholds, 2,
                       mp_.mmap_threshold, mp_.trim_threshold);
         }
+      (void) mutex_unlock(&mp_.mutex);
       munmap_chunk (p);
       return;
     }
 
   ar_ptr = arena_for_chunk (p);
+  MVEE_MALLOC_HOOK(LIBC_FREE, 1, chunksize(p), ar_ptr, p);
   _int_free (ar_ptr, p, 0);
 }
 libc_hidden_def (__libc_free)
@@ -3001,15 +3023,22 @@
 #endif
       /* Note the extra SIZE_SZ overhead. */
       if (oldsize - SIZE_SZ >= nb)
-        return oldmem;                         /* do nothing */
+	{
+	  MVEE_MALLOC_HOOK(LIBC_REALLOC, 0, bytes, 0, oldmem);
+	  return oldmem;                         /* do nothing */
+	}
 
       /* Must alloc, copy, free. */
       newmem = __libc_malloc (bytes);
       if (newmem == 0)
-        return 0;              /* propagate failure */
+	{
+	  MVEE_MALLOC_HOOK(LIBC_REALLOC, 1, bytes, 0, oldmem);
+	  return 0;              /* propagate failure */
+	}
 
       memcpy (newmem, oldmem, oldsize - 2 * SIZE_SZ);
       munmap_chunk (oldp);
+      MVEE_MALLOC_HOOK(LIBC_REALLOC, 2, bytes, 0, newmem);
       return newmem;
     }
 
@@ -3017,6 +3046,7 @@
   (void) mutex_lock (&ar_ptr->mutex);
 
 
+  MVEE_MALLOC_HOOK(LIBC_REALLOC, 3, bytes, ar_ptr, oldp);
   newp = _int_realloc (ar_ptr, oldp, oldsize, nb);
 
   (void) mutex_unlock (&ar_ptr->mutex);
@@ -3025,6 +3055,7 @@
 
   if (newp == NULL)
     {
+      MVEE_MALLOC_HOOK(LIBC_REALLOC, 4, bytes, 0, oldp);
       /* Try harder to allocate memory in other arenas.  */
       LIBC_PROBE (memory_realloc_retry, 2, bytes, oldmem);
       newp = __libc_malloc (bytes);
@@ -3035,6 +3066,7 @@
         }
     }
 
+  MVEE_MALLOC_HOOK(LIBC_REALLOC, 5, bytes, 0, newp);
   return newp;
 }
 libc_hidden_def (__libc_realloc)
@@ -3043,6 +3075,7 @@
 __libc_memalign (size_t alignment, size_t bytes)
 {
   void *address = RETURN_ADDRESS (0);
+  MVEE_MALLOC_HOOK(LIBC_MEMALIGN, 0, bytes, NULL, (void*)alignment);
   return _mid_memalign (alignment, bytes, address);
 }
 
@@ -3109,6 +3142,7 @@
     (void) mutex_unlock (&ar_ptr->mutex);
   assert (!p || chunk_is_mmapped (mem2chunk (p)) ||
           ar_ptr == arena_for_chunk (mem2chunk (p)));
+  MVEE_MALLOC_HOOK(LIBC_MEMALIGN, 1, bytes, ar_ptr, p);
   return p;
 }
 /* For ISO C11.  */
@@ -3185,9 +3219,13 @@
 
   sz = bytes;
 
+  MVEE_MALLOC_HOOK(LIBC_CALLOC, 0, bytes, 0, 0);
   arena_get (av, sz);
   if (!av)
-    return 0;
+    {
+      MVEE_MALLOC_HOOK(LIBC_CALLOC, 1, bytes, 0, 0);
+      return 0;
+    }
 
   /* Check if we hand out the top chunk, in which case there may be no
      need to clear. */
@@ -3215,6 +3253,7 @@
 
   if (mem == 0)
     {
+      MVEE_MALLOC_HOOK(LIBC_CALLOC, 2, bytes, 0, 0);
       LIBC_PROBE (memory_calloc_retry, 1, sz);
       av = arena_get_retry (av, sz);
       if (__builtin_expect (av != NULL, 1))
@@ -3232,6 +3271,7 @@
   /* Two optional cases in which clearing not necessary */
   if (chunk_is_mmapped (p))
     {
+      MVEE_MALLOC_HOOK(LIBC_CALLOC, 3, bytes, 0, 0);
       if (__builtin_expect (perturb_byte, 0))
         return memset (mem, 0, sz);
 
@@ -3248,6 +3288,8 @@
     }
 #endif
 
+  MVEE_MALLOC_HOOK(LIBC_CALLOC, 4, bytes, 0, 0);
+
   /* Unroll clear of <= 36 bytes (72 if 8byte sizes).  We know that
      contents have an odd number of INTERNAL_SIZE_T-sized words;
      minimally 3.  */
@@ -3322,6 +3364,8 @@
 
   checked_request2size (bytes, nb);
 
+  MVEE_MALLOC_HOOK(_INT_MALLOC, 0, nb, 0, 0);
+
   /*
      If the size qualifies as a fastbin, first check corresponding bin.
      This code is safe to execute even if av is not yet initialized, so we
@@ -3329,8 +3373,9 @@
    */
 
   if ((unsigned long) (nb) <= (unsigned long) (get_max_fast ()))
-    {
+    {      
       idx = fastbin_index (nb);
+      MVEE_MALLOC_HOOK(_INT_MALLOC, 1, nb, av, idx);
       mfastbinptr *fb = &fastbin (av, idx);
       mchunkptr pp = *fb;
       do
@@ -3343,6 +3388,7 @@
              != victim);
       if (victim != 0)
         {
+	  MVEE_MALLOC_HOOK(_INT_MALLOC, 2, nb, av, victim);
           if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))
             {
               errstr = "malloc(): memory corruption (fast)";
@@ -3355,6 +3401,10 @@
           alloc_perturb (p, bytes);
           return p;
         }
+      else
+	{
+	  MVEE_MALLOC_HOOK(_INT_MALLOC, 3, nb, av, 0);
+	}
     }
 
   /*
@@ -3369,13 +3419,18 @@
     {
       idx = smallbin_index (nb);
       bin = bin_at (av, idx);
+      MVEE_MALLOC_HOOK(_INT_MALLOC, 4, nb, av, idx);
 
       if ((victim = last (bin)) != bin)
         {
           if (victim == 0) /* initialization check */
-            malloc_consolidate (av);
+	    {
+	      MVEE_MALLOC_HOOK(_INT_MALLOC, 5, nb, av, idx);
+	      malloc_consolidate (av);
+	    }
           else
             {
+	      MVEE_MALLOC_HOOK(_INT_MALLOC, 6, nb, av, victim);
               bck = victim->bk;
 	if (__glibc_unlikely (bck->fd != victim))
                 {
@@ -3410,8 +3465,12 @@
   else
     {
       idx = largebin_index (nb);
+      MVEE_MALLOC_HOOK(_INT_MALLOC, 7, nb, av, idx);
       if (have_fastchunks (av))
-        malloc_consolidate (av);
+	{
+	  MVEE_MALLOC_HOOK(_INT_MALLOC, 8, nb, av, 0);
+	  malloc_consolidate (av);
+	}
     }
 
   /*
@@ -3454,6 +3513,7 @@
             {
               /* split and reattach remainder */
               remainder_size = size - nb;
+	      MVEE_MALLOC_HOOK(_INT_MALLOC, 9, size, av, victim);
               remainder = chunk_at_offset (victim, nb);
               unsorted_chunks (av)->bk = unsorted_chunks (av)->fd = remainder;
               av->last_remainder = remainder;
@@ -3483,6 +3543,7 @@
 
           if (size == nb)
             {
+	      MVEE_MALLOC_HOOK(_INT_MALLOC, 10, size, av, victim);
               set_inuse_bit_at_offset (victim, size);
               if (av != &main_arena)
                 victim->size |= NON_MAIN_ARENA;
@@ -3556,7 +3617,10 @@
 
 #define MAX_ITERS       10000
           if (++iters >= MAX_ITERS)
-            break;
+	    {
+	      MVEE_MALLOC_HOOK(_INT_MALLOC, 11, nb, av, 0);
+	      break;
+	    }
         }
 
       /*
@@ -3568,6 +3632,8 @@
         {
           bin = bin_at (av, idx);
 
+	  MVEE_MALLOC_HOOK(_INT_MALLOC, 12, nb, av, idx);
+
           /* skip scan if empty or largest chunk is too small */
           if ((victim = first (bin)) != bin &&
               (unsigned long) (victim->size) >= (unsigned long) (nb))
@@ -3582,6 +3648,8 @@
               if (victim != last (bin) && victim->size == victim->fd->size)
                 victim = victim->fd;
 
+	      MVEE_MALLOC_HOOK(_INT_MALLOC, 13, nb, av, victim);
+
               remainder_size = size - nb;
               unlink (victim, bck, fwd);
 
@@ -3643,6 +3711,8 @@
       map = av->binmap[block];
       bit = idx2bit (idx);
 
+      MVEE_MALLOC_HOOK(_INT_MALLOC, 14, nb, av, idx);
+
       for (;; )
         {
           /* Skip rest of block if there are no more set bits in this block.  */
@@ -3682,6 +3752,8 @@
             {
               size = chunksize (victim);
 
+	      MVEE_MALLOC_HOOK(_INT_MALLOC, 15, size, av, idx);
+
               /*  We know the first chunk in this bin is big enough to use. */
               assert ((unsigned long) (size) >= (unsigned long) (nb));
 
@@ -3758,6 +3830,7 @@
 
       if ((unsigned long) (size) >= (unsigned long) (nb + MINSIZE))
         {
+	  MVEE_MALLOC_HOOK(_INT_MALLOC, 16, size, av, idx);
           remainder_size = size - nb;
           remainder = chunk_at_offset (victim, nb);
           av->top = remainder;
@@ -3781,6 +3854,7 @@
             idx = smallbin_index (nb);
           else
             idx = largebin_index (nb);
+	  MVEE_MALLOC_HOOK(_INT_MALLOC, 17, nb, av, idx);
         }
 
       /*
@@ -3788,6 +3862,7 @@
        */
       else
         {
+	  MVEE_MALLOC_HOOK(_INT_MALLOC, 18, nb, av, 0);
           void *p = sysmalloc (nb, av);
           if (p != NULL)
             alloc_perturb (p, bytes);
@@ -3857,6 +3932,8 @@
 #endif
       ) {
 
+    MVEE_MALLOC_HOOK(_INT_FREE, 0, size, av, p);
+
     if (__builtin_expect (chunk_at_offset (p, size)->size <= 2 * SIZE_SZ, 0)
 	|| __builtin_expect (chunksize (chunk_at_offset (p, size))
 			     >= av->system_mem, 0))
@@ -3884,15 +3961,19 @@
 
     free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);
 
+    if (!have_lock)
+      (void) mutex_lock(&av->mutex);
+
     set_fastchunks(av);
     unsigned int idx = fastbin_index(size);
     fb = &fastbin (av, idx);
 
+    MVEE_MALLOC_HOOK(_INT_FREE, 1, size, av, idx);
+
     /* Atomically link P to its fastbin: P->FD = *FB; *FB = P;  */
     mchunkptr old = *fb, old2;
     unsigned int old_idx = ~0u;
-    do
-      {
+
 	/* Check that the top of the bin is not the record we are going to add
 	   (i.e., double free).  */
 	if (__builtin_expect (old == p, 0))
@@ -3907,8 +3988,10 @@
 	if (have_lock && old != NULL)
 	  old_idx = fastbin_index(chunksize(old));
 	p->fd = old2 = old;
-      }
-    while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);
+	*fb = p;
+
+    if (!have_lock)
+      (void) mutex_unlock(&av->mutex);
 
     if (have_lock && old != NULL && __builtin_expect (old_idx != idx, 0))
       {
@@ -3927,6 +4010,8 @@
       locked = 1;
     }
 
+    MVEE_MALLOC_HOOK(_INT_FREE, 2, size, av, 0);
+
     nextchunk = chunk_at_offset(p, size);
 
     /* Lightweight tests: check whether the block is already the
@@ -3964,6 +4049,7 @@
     /* consolidate backward */
     if (!prev_inuse(p)) {
       prevsize = p->prev_size;
+      MVEE_MALLOC_HOOK(_INT_FREE, 3, prevsize, av, 0);
       size += prevsize;
       p = chunk_at_offset(p, -((long) prevsize));
       unlink(p, bck, fwd);
@@ -4015,6 +4101,7 @@
     */
 
     else {
+      MVEE_MALLOC_HOOK(_INT_FREE, 4, size, av, 0);
       size += nextsize;
       set_head(p, size | PREV_INUSE);
       av->top = p;
@@ -4035,14 +4122,22 @@
     */
 
     if ((unsigned long)(size) >= FASTBIN_CONSOLIDATION_THRESHOLD) {
+      MVEE_MALLOC_HOOK(_INT_FREE, 5, size, av, 0);
+
       if (have_fastchunks(av))
 	malloc_consolidate(av);
 
       if (av == &main_arena) {
 #ifndef MORECORE_CANNOT_TRIM
+	(void) mutex_lock(&mp_.mutex);
 	if ((unsigned long)(chunksize(av->top)) >=
 	    (unsigned long)(mp_.trim_threshold))
-	  systrim(mp_.top_pad, av);
+	  {
+	    (void) mutex_unlock(&mp_.mutex);
+	    systrim(mp_.top_pad, av);
+	  }
+	else
+	  (void) mutex_unlock(&mp_.mutex);
 #endif
       } else {
 	/* Always try heap_trim(), even if the top chunk is not
@@ -4064,6 +4159,7 @@
   */
 
   else {
+    MVEE_MALLOC_HOOK(_INT_FREE, 6, size, av, p);
     munmap_chunk (p);
   }
 }
@@ -4100,6 +4196,8 @@
   mchunkptr       bck;
   mchunkptr       fwd;
 
+  int cnt = 0;
+
   /*
     If max_fast is 0, we know that av hasn't
     yet been initialized, in which case do so below
@@ -4169,6 +4267,8 @@
 	    av->top = p;
 	  }
 
+	  cnt++;
+
 	} while ( (p = nextp) != 0);
 
       }
@@ -4178,6 +4278,8 @@
     malloc_init_state(av);
     check_malloc_state(av);
   }
+
+  MVEE_MALLOC_HOOK(MALLOC_CONSOLIDATE, 0, cnt, av, 0);
 }
 
 /*
@@ -4245,6 +4347,7 @@
           (unsigned long) (newsize = oldsize + nextsize) >=
           (unsigned long) (nb + MINSIZE))
         {
+	  MVEE_MALLOC_HOOK(_INT_REALLOC, 0, newsize, av, next);
           set_head_size (oldp, nb | (av != &main_arena ? NON_MAIN_ARENA : 0));
           av->top = chunk_at_offset (oldp, nb);
           set_head (av->top, (newsize - nb) | PREV_INUSE);
@@ -4258,6 +4361,7 @@
                (unsigned long) (newsize = oldsize + nextsize) >=
                (unsigned long) (nb))
         {
+	  MVEE_MALLOC_HOOK(_INT_REALLOC, 1, newsize, av, next);
           newp = oldp;
           unlink (next, bck, fwd);
         }
@@ -4265,6 +4369,7 @@
       /* allocate, copy, free */
       else
         {
+	  MVEE_MALLOC_HOOK(_INT_REALLOC, 2, newsize, av, 0);
           newmem = _int_malloc (av, nb - MALLOC_ALIGN_MASK);
           if (newmem == 0)
             return 0; /* propagate failure */
@@ -4277,6 +4382,7 @@
            */
           if (newp == next)
             {
+	      MVEE_MALLOC_HOOK(_INT_REALLOC, 3, newsize, av, 0);
               newsize += oldsize;
               newp = oldp;
             }
@@ -4287,6 +4393,7 @@
                  We know that contents have an odd number of
                  INTERNAL_SIZE_T-sized words; minimally 3.
                */
+	      MVEE_MALLOC_HOOK(_INT_REALLOC, 4, newsize, av, newmem);
 
               copysize = oldsize - SIZE_SZ;
               s = (INTERNAL_SIZE_T *) (chunk2mem (oldp));
@@ -4334,11 +4441,13 @@
 
   if (remainder_size < MINSIZE)   /* not enough extra to split off */
     {
+      MVEE_MALLOC_HOOK(_INT_REALLOC, 5, newsize, av, newp);
       set_head_size (newp, newsize | (av != &main_arena ? NON_MAIN_ARENA : 0));
       set_inuse_bit_at_offset (newp, newsize);
     }
   else   /* split remainder */
     {
+      MVEE_MALLOC_HOOK(_INT_REALLOC, 6, newsize, av, newp);
       remainder = chunk_at_offset (newp, nb);
       set_head_size (newp, nb | (av != &main_arena ? NON_MAIN_ARENA : 0));
       set_head (remainder, remainder_size | PREV_INUSE |
@@ -4517,13 +4626,15 @@
     ptmalloc_init ();
 
   mstate ar_ptr = &main_arena;
+  mstate tmp;
   do
     {
       (void) mutex_lock (&ar_ptr->mutex);
       result |= mtrim (ar_ptr, s);
+      tmp = ar_ptr->next;
       (void) mutex_unlock (&ar_ptr->mutex);
 
-      ar_ptr = ar_ptr->next;
+      ar_ptr = tmp;
     }
   while (ar_ptr != &main_arena);
 
@@ -4624,9 +4735,11 @@
   m->fsmblks += fastavail;
   if (av == &main_arena)
     {
+      (void) mutex_lock(&mp_.mutex);
       m->hblks = mp_.n_mmaps;
       m->hblkhd = mp_.mmapped_mem;
-      m->usmblks = mp_.max_total_mem;
+      m->usmblks = mp_.max_total_mem;      
+      (void) mutex_unlock(&mp_.mutex);
       m->keepcost = chunksize (av->top);
     }
 }
@@ -4637,6 +4750,7 @@
 {
   struct mallinfo m;
   mstate ar_ptr;
+  mstate tmp;
 
   if (__malloc_initialized < 0)
     ptmalloc_init ();
@@ -4647,9 +4761,10 @@
     {
       (void) mutex_lock (&ar_ptr->mutex);
       int_mallinfo (ar_ptr, &m);
+      tmp = ar_ptr->next;
       (void) mutex_unlock (&ar_ptr->mutex);
 
-      ar_ptr = ar_ptr->next;
+      ar_ptr = tmp;
     }
   while (ar_ptr != &main_arena);
 
@@ -4665,7 +4780,9 @@
 {
   int i;
   mstate ar_ptr;
+  (void) mutex_lock(&mp_.mutex);
   unsigned int in_use_b = mp_.mmapped_mem, system_b = in_use_b;
+  (void) mutex_unlock(&mp_.mutex);
 
   if (__malloc_initialized < 0)
     ptmalloc_init ();
@@ -4688,17 +4805,20 @@
 #endif
       system_b += mi.arena;
       in_use_b += mi.uordblks;
+      mstate tmp = ar_ptr->next;
       (void) mutex_unlock (&ar_ptr->mutex);
-      ar_ptr = ar_ptr->next;
+      ar_ptr = tmp;
       if (ar_ptr == &main_arena)
         break;
     }
   fprintf (stderr, "Total (incl. mmap):\n");
   fprintf (stderr, "system bytes     = %10u\n", system_b);
   fprintf (stderr, "in use bytes     = %10u\n", in_use_b);
+  (void) mutex_lock(&mp_.mutex);
   fprintf (stderr, "max mmap regions = %10u\n", (unsigned int) mp_.max_n_mmaps);
   fprintf (stderr, "max mmap bytes   = %10lu\n",
            (unsigned long) mp_.max_mmapped_mem);
+  (void) mutex_unlock(&mp_.mutex);
   ((_IO_FILE *) stderr)->_flags2 |= old_flags2;
   _IO_funlockfile (stderr);
 }
@@ -4735,20 +4855,25 @@
       break;
 
     case M_TRIM_THRESHOLD:
+      (void) mutex_lock(&mp_.mutex);
       LIBC_PROBE (memory_mallopt_trim_threshold, 3, value,
                   mp_.trim_threshold, mp_.no_dyn_threshold);
       mp_.trim_threshold = value;
       mp_.no_dyn_threshold = 1;
+      (void) mutex_unlock(&mp_.mutex);
       break;
 
     case M_TOP_PAD:
+      (void) mutex_lock(&mp_.mutex);
       LIBC_PROBE (memory_mallopt_top_pad, 3, value,
                   mp_.top_pad, mp_.no_dyn_threshold);
       mp_.top_pad = value;
       mp_.no_dyn_threshold = 1;
+      (void) mutex_unlock(&mp_.mutex);
       break;
 
     case M_MMAP_THRESHOLD:
+      (void) mutex_lock(&mp_.mutex);
       /* Forbid setting the threshold too high. */
       if ((unsigned long) value > HEAP_MAX_SIZE / 2)
         res = 0;
@@ -4759,13 +4884,16 @@
           mp_.mmap_threshold = value;
           mp_.no_dyn_threshold = 1;
         }
+      (void) mutex_unlock(&mp_.mutex);
       break;
 
     case M_MMAP_MAX:
+      (void) mutex_lock(&mp_.mutex);
       LIBC_PROBE (memory_mallopt_mmap_max, 3, value,
                   mp_.n_mmaps_max, mp_.no_dyn_threshold);
       mp_.n_mmaps_max = value;
       mp_.no_dyn_threshold = 1;
+      (void) mutex_unlock(&mp_.mutex);
       break;
 
     case M_CHECK_ACTION:
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-alias.c glibc-2.21/nis/nss_nisplus/nisplus-alias.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-alias.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-alias.c	2015-04-27 12:45:50.891312524 -0700
@@ -43,7 +43,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -62,7 +62,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -176,7 +176,7 @@
     return NSS_STATUS_UNAVAIL;
 
   next_entry = 0;
-  result = nis_list (tablename_val, FOLLOW_PATH | FOLLOW_LINKS, NULL, NULL);
+  result = nis_list (atomic_load(tablename_val), FOLLOW_PATH | FOLLOW_LINKS, NULL, NULL);
   if (result == NULL)
     {
       status = NSS_STATUS_TRYAGAIN;
@@ -279,7 +279,7 @@
 {
   int parse_res;
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-ethers.c glibc-2.21/nis/nss_nisplus/nisplus-ethers.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-ethers.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-ethers.c	2015-04-27 12:45:50.891312524 -0700
@@ -88,7 +88,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -107,7 +107,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
   return NSS_STATUS_SUCCESS;
 }
@@ -157,7 +157,7 @@
 internal_nisplus_getetherent_r (struct etherent *ether, char *buffer,
 				size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       enum nss_status status = _nss_create_tablename (errnop);
 
@@ -236,7 +236,7 @@
 _nss_nisplus_gethostton_r (const char *name, struct etherent *eth,
 			   char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       enum nss_status status = _nss_create_tablename (errnop);
 
@@ -294,7 +294,7 @@
 _nss_nisplus_getntohost_r (const struct ether_addr *addr, struct etherent *eth,
 			   char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-grp.c glibc-2.21/nis/nss_nisplus/nisplus-grp.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-grp.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-grp.c	2015-04-27 12:45:50.891312524 -0700
@@ -50,7 +50,7 @@
 enum nss_status
 _nss_grp_create_tablename (int *errnop)
 {
-  if (grp_tablename_val == NULL)
+  if (atomic_load(grp_tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -106,7 +106,7 @@
 {
   enum nss_status status = NSS_STATUS_SUCCESS;
 
-  if (grp_tablename_val == NULL)
+  if (atomic_load(grp_tablename_val) == NULL)
     status = _nss_grp_create_tablename (errnop);
 
   if (status == NSS_STATUS_SUCCESS)
@@ -288,7 +288,7 @@
 {
   int parse_res;
 
-  if (grp_tablename_val == NULL)
+  if (atomic_load(grp_tablename_val) == NULL)
     {
       enum nss_status status = _nss_grp_create_tablename (errnop);
 
@@ -347,7 +347,7 @@
 _nss_nisplus_getgrgid_r (const gid_t gid, struct group *gr,
 			 char *buffer, size_t buflen, int *errnop)
 {
-  if (grp_tablename_val == NULL)
+  if (atomic_load(grp_tablename_val) == NULL)
     {
       enum nss_status status = _nss_grp_create_tablename (errnop);
 
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-hosts.c glibc-2.21/nis/nss_nisplus/nisplus-hosts.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-hosts.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-hosts.c	2015-04-27 12:45:50.891312524 -0700
@@ -191,7 +191,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -210,7 +210,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -231,7 +231,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     status = _nss_create_tablename (&err);
 
   __libc_lock_unlock (lock);
@@ -271,7 +271,7 @@
       if (result == NULL)
 	{
 	  saved_res = NULL;
-	  if (tablename_val == NULL)
+	  if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status = _nss_create_tablename (errnop);
 
@@ -300,7 +300,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -383,7 +383,7 @@
 			   char *buffer, size_t buflen, int *errnop,
 			   int *herrnop, int flags)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       enum nss_status status = get_tablename (herrnop);
       if (status != NSS_STATUS_SUCCESS)
@@ -518,7 +518,7 @@
 			      struct hostent *host, char *buffer,
 			      size_t buflen, int *errnop, int *herrnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       enum nss_status status = get_tablename (herrnop);
       if (status != NSS_STATUS_SUCCESS)
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-network.c glibc-2.21/nis/nss_nisplus/nisplus-network.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-network.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-network.c	2015-04-27 12:45:50.895311559 -0700
@@ -142,7 +142,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -161,7 +161,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -180,7 +180,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       int err;
       status = _nss_create_tablename (&err);
@@ -222,7 +222,7 @@
 	{
 	  saved_res = NULL;
 
-	  if (tablename_val == NULL)
+	  if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status = _nss_create_tablename (errnop);
 
@@ -254,7 +254,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -311,7 +311,7 @@
 {
   int parse_res, retval;
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
@@ -414,7 +414,7 @@
 			     struct netent *network, char *buffer,
 			     size_t buflen, int *errnop, int *herrnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-proto.c glibc-2.21/nis/nss_nisplus/nisplus-proto.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-proto.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-proto.c	2015-04-27 12:45:50.895311559 -0700
@@ -137,7 +137,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -156,7 +156,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -175,7 +175,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       int err;
       status = _nss_create_tablename (&err);
@@ -216,7 +216,7 @@
       if (result == NULL)
 	{
 	  saved_res = NULL;
-	  if (tablename_val == NULL)
+	  if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status = _nss_create_tablename (errnop);
 
@@ -236,7 +236,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -290,7 +290,7 @@
 {
   int parse_res;
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
@@ -383,7 +383,7 @@
 _nss_nisplus_getprotobynumber_r (const int number, struct protoent *proto,
 				 char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-pwd.c glibc-2.21/nis/nss_nisplus/nisplus-pwd.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-pwd.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-pwd.c	2015-04-27 12:45:50.895311559 -0700
@@ -49,7 +49,7 @@
 enum nss_status
 _nss_pwd_create_tablename (int *errnop)
 {
-  if (pwd_tablename_val == NULL)
+  if (atomic_load(pwd_tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -105,7 +105,7 @@
 {
   enum nss_status status = NSS_STATUS_SUCCESS;
 
-  if (pwd_tablename_val == NULL)
+  if (atomic_load(pwd_tablename_val) == NULL)
     status = _nss_pwd_create_tablename (errnop);
 
   if (status == NSS_STATUS_SUCCESS)
@@ -289,7 +289,7 @@
 {
   int parse_res;
 
-  if (pwd_tablename_val == NULL)
+  if (atomic_load(pwd_tablename_val) == NULL)
     {
       enum nss_status status = _nss_pwd_create_tablename (errnop);
 
@@ -352,7 +352,7 @@
 _nss_nisplus_getpwuid_r (const uid_t uid, struct passwd *pw,
 			 char *buffer, size_t buflen, int *errnop)
 {
-  if (pwd_tablename_val == NULL)
+  if (atomic_load(pwd_tablename_val) == NULL)
     {
       enum nss_status status = _nss_pwd_create_tablename (errnop);
 
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-rpc.c glibc-2.21/nis/nss_nisplus/nisplus-rpc.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-rpc.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-rpc.c	2015-04-27 12:45:50.895311559 -0700
@@ -138,7 +138,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -157,7 +157,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -177,7 +177,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       int err;
       status = _nss_create_tablename (&err);
@@ -218,7 +218,7 @@
       if (result == NULL)
 	{
 	  saved_res = NULL;
-          if (tablename_val == NULL)
+          if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status =  _nss_create_tablename (errnop);
 
@@ -238,7 +238,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -292,7 +292,7 @@
 {
   int parse_res;
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
@@ -385,7 +385,7 @@
 _nss_nisplus_getrpcbynumber_r (const int number, struct rpcent *rpc,
 			       char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -N -r --unified glibc-2.21.orig/nis/nss_nisplus/nisplus-service.c glibc-2.21/nis/nss_nisplus/nisplus-service.c
--- glibc-2.21.orig/nis/nss_nisplus/nisplus-service.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nis/nss_nisplus/nisplus-service.c	2015-04-27 12:45:50.895311559 -0700
@@ -145,7 +145,7 @@
 static enum nss_status
 _nss_create_tablename (int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       const char *local_dir = nis_local_directory ();
       size_t local_dir_len = strlen (local_dir);
@@ -164,7 +164,7 @@
 
       atomic_write_barrier ();
 
-      tablename_val = p;
+      atomic_store(tablename_val, p);
     }
 
   return NSS_STATUS_SUCCESS;
@@ -185,7 +185,7 @@
       result = NULL;
     }
 
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     status = _nss_create_tablename (&err);
 
   __libc_lock_unlock (lock);
@@ -223,7 +223,7 @@
       if (result == NULL)
 	{
 	  saved_res = NULL;
-          if (tablename_val == NULL)
+          if (atomic_load(tablename_val) == NULL)
 	    {
 	      enum nss_status status = _nss_create_tablename (errnop);
 
@@ -243,7 +243,7 @@
       else
 	{
 	  saved_res = result;
-	  result = nis_next_entry (tablename_val, &result->cookie);
+	  result = nis_next_entry (atomic_load(tablename_val), &result->cookie);
 	  if (result == NULL)
 	    {
 	      *errnop = errno;
@@ -294,7 +294,7 @@
 			      struct servent *serv,
 			      char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
@@ -396,7 +396,7 @@
 			      struct servent *serv,
 			      char *buffer, size_t buflen, int *errnop)
 {
-  if (tablename_val == NULL)
+  if (atomic_load(tablename_val) == NULL)
     {
       __libc_lock_lock (lock);
 
diff -N -r --unified glibc-2.21.orig/nptl/allocatestack.c glibc-2.21/nptl/allocatestack.c
--- glibc-2.21.orig/nptl/allocatestack.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nptl/allocatestack.c	2015-04-27 13:17:45.362200186 -0700
@@ -131,13 +131,13 @@
 
 
 /* Check whether the stack is still used or not.  */
-#define FREE_P(descr) ((descr)->tid <= 0)
+#define FREE_P(descr) (atomic_load((descr)->tid) <= 0)
 
 
 static void
 stack_list_del (list_t *elem)
 {
-  in_flight_stack = (uintptr_t) elem;
+  atomic_store(in_flight_stack, (uintptr_t) elem);
 
   atomic_write_barrier ();
 
@@ -145,14 +145,14 @@
 
   atomic_write_barrier ();
 
-  in_flight_stack = 0;
+  atomic_store(in_flight_stack, 0);
 }
 
 
 static void
 stack_list_add (list_t *elem, list_t *list)
 {
-  in_flight_stack = (uintptr_t) elem | 1;
+  atomic_store(in_flight_stack, (uintptr_t) elem | 1);
 
   atomic_write_barrier ();
 
@@ -160,7 +160,7 @@
 
   atomic_write_barrier ();
 
-  in_flight_stack = 0;
+  atomic_store(in_flight_stack, 0);
 }
 
 
@@ -216,7 +216,7 @@
     }
 
   /* Don't allow setxid until cloned.  */
-  result->setxid_futex = -1;
+  atomic_store(result->setxid_futex, -1);
 
   /* Dequeue the entry.  */
   stack_list_del (&result->list);
@@ -235,7 +235,7 @@
   *memp = result->stackblock;
 
   /* Cancellation handling is back to the default.  */
-  result->cancelhandling = 0;
+  atomic_store(result->cancelhandling, 0);
   result->cleanup = NULL;
 
   /* No pending event.  */
@@ -437,7 +437,7 @@
       pd->pid = THREAD_GETMEM (THREAD_SELF, pid);
 
       /* Don't allow setxid until cloned.  */
-      pd->setxid_futex = -1;
+      atomic_store(pd->setxid_futex, -1);
 
       /* Allocate the DTV for this thread.  */
       if (_dl_allocate_tls (TLS_TPADJ (pd)) == NULL)
@@ -570,7 +570,7 @@
 #endif
 
 	  /* Don't allow setxid until cloned.  */
-	  pd->setxid_futex = -1;
+	  atomic_store(pd->setxid_futex, -1);
 
 	  /* The process ID is also the same as that of the caller.  */
 	  pd->pid = THREAD_GETMEM (THREAD_SELF, pid);
@@ -822,10 +822,10 @@
      we have to be aware that we might have interrupted a list
      operation.  */
 
-  if (in_flight_stack != 0)
+  if (atomic_load(in_flight_stack) != 0)
     {
-      bool add_p = in_flight_stack & 1;
-      list_t *elem = (list_t *) (in_flight_stack & ~(uintptr_t) 1);
+      bool add_p = atomic_load(in_flight_stack) & 1;
+      list_t *elem = (list_t *) (atomic_load(in_flight_stack) & ~(uintptr_t) 1);
 
       if (add_p)
 	{
@@ -834,24 +834,24 @@
 	     pointers at the head of the list are inconsistent.  */
 	  list_t *l = NULL;
 
-	  if (stack_used.next->prev != &stack_used)
+	  if (atomic_load(stack_used.next->prev) != &stack_used)
 	    l = &stack_used;
-	  else if (stack_cache.next->prev != &stack_cache)
+	  else if (atomic_load(stack_cache.next->prev) != &stack_cache)
 	    l = &stack_cache;
 
 	  if (l != NULL)
 	    {
-	      assert (l->next->prev == elem);
-	      elem->next = l->next;
-	      elem->prev = l;
-	      l->next = elem;
+	      assert (atomic_load(l->next->prev) == elem);
+	      atomic_store(elem->next, l->next);
+	      atomic_store(elem->prev, l);
+	      atomic_store(l->next, elem);
 	    }
 	}
       else
 	{
 	  /* We can simply always replay the delete operation.  */
-	  elem->next->prev = elem->prev;
-	  elem->prev->next = elem->next;
+	  atomic_store(elem->next->prev, elem->prev);
+	  atomic_store(elem->prev->next, elem->next);
 	}
     }
 
@@ -863,7 +863,7 @@
       if (curp != self)
 	{
 	  /* This marks the stack as free.  */
-	  curp->tid = 0;
+	  atomic_store(curp->tid, 0);
 
 	  /* The PID field must be initialized for the new process.  */
 	  curp->pid = self->pid;
@@ -920,7 +920,7 @@
   /* There is one thread running.  */
   __nptl_nthreads = 1;
 
-  in_flight_stack = 0;
+  atomic_store(in_flight_stack, 0);
 
   /* Initialize locks.  */
   stack_cache_lock = LLL_LOCK_INITIALIZER;
@@ -947,7 +947,7 @@
 
       curp = list_entry (runp, struct pthread, list);
 
-      if (curp->tid == tid)
+      if (atomic_load(curp->tid) == tid)
 	{
 	  result = curp;
 	  goto out;
@@ -961,7 +961,7 @@
 
       curp = list_entry (runp, struct pthread, list);
 
-      if (curp->tid == tid)
+      if (atomic_load(curp->tid) == tid)
 	{
 	  result = curp;
 	  goto out;
@@ -984,18 +984,18 @@
   int ch;
 
   /* Wait until this thread is cloned.  */
-  if (t->setxid_futex == -1
+  if (atomic_load(t->setxid_futex) == -1
       && ! atomic_compare_and_exchange_bool_acq (&t->setxid_futex, -2, -1))
     do
       lll_futex_wait (&t->setxid_futex, -2, LLL_PRIVATE);
-    while (t->setxid_futex == -2);
+    while (atomic_load(t->setxid_futex) == -2);
 
   /* Don't let the thread exit before the setxid handler runs.  */
-  t->setxid_futex = 0;
+  atomic_store(t->setxid_futex, 0);
 
   do
     {
-      ch = t->cancelhandling;
+      ch = atomic_load(t->cancelhandling);
 
       /* If the thread is exiting right now, ignore it.  */
       if ((ch & EXITING_BITMASK) != 0)
@@ -1004,7 +1004,7 @@
 	     progress.  */
 	  if ((ch & SETXID_BITMASK) == 0)
 	    {
-	      t->setxid_futex = 1;
+	      atomic_store(t->setxid_futex, 1);
 	      lll_futex_wake (&t->setxid_futex, 1, LLL_PRIVATE);
 	    }
 	  return;
@@ -1023,7 +1023,7 @@
 
   do
     {
-      ch = t->cancelhandling;
+      ch = atomic_load(t->cancelhandling);
       if ((ch & SETXID_BITMASK) == 0)
 	return;
     }
@@ -1031,7 +1031,7 @@
 					       ch & ~SETXID_BITMASK, ch));
 
   /* Release the futex just in case.  */
-  t->setxid_futex = 1;
+  atomic_store(t->setxid_futex, 1);
   lll_futex_wake (&t->setxid_futex, 1, LLL_PRIVATE);
 }
 
@@ -1040,13 +1040,13 @@
 internal_function
 setxid_signal_thread (struct xid_command *cmdp, struct pthread *t)
 {
-  if ((t->cancelhandling & SETXID_BITMASK) == 0)
+  if ((atomic_load(t->cancelhandling) & SETXID_BITMASK) == 0)
     return 0;
 
   int val;
   INTERNAL_SYSCALL_DECL (err);
   val = INTERNAL_SYSCALL (tgkill, err, 3, THREAD_GETMEM (THREAD_SELF, pid),
-			  t->tid, SIGSETXID);
+			  atomic_load(t->tid), SIGSETXID);
 
   /* If this failed, it must have had not started yet or else exited.  */
   if (!INTERNAL_SYSCALL_ERROR_P (val, err))
@@ -1068,7 +1068,7 @@
 {
   do
     {
-      int olderror = cmdp->error;
+      int olderror = atomic_load(cmdp->error);
       if (olderror == error)
 	break;
       if (olderror != -1)
@@ -1240,7 +1240,7 @@
   list_for_each (runp, &stack_used)
     {
       struct pthread *t = list_entry (runp, struct pthread, list);
-      if (t == self || t->header.gscope_flag == THREAD_GSCOPE_FLAG_UNUSED)
+      if (t == self || atomic_load(t->header.gscope_flag) == THREAD_GSCOPE_FLAG_UNUSED)
 	continue;
 
       int *const gscope_flagp = &t->header.gscope_flag;
@@ -1255,14 +1255,14 @@
 
       do
 	lll_futex_wait (gscope_flagp, THREAD_GSCOPE_FLAG_WAIT, LLL_PRIVATE);
-      while (*gscope_flagp == THREAD_GSCOPE_FLAG_WAIT);
+      while (atomic_load(*gscope_flagp) == THREAD_GSCOPE_FLAG_WAIT);
     }
 
   /* Now the list with threads using user-allocated stacks.  */
   list_for_each (runp, &__stack_user)
     {
       struct pthread *t = list_entry (runp, struct pthread, list);
-      if (t == self || t->header.gscope_flag == THREAD_GSCOPE_FLAG_UNUSED)
+      if (t == self || atomic_load(t->header.gscope_flag) == THREAD_GSCOPE_FLAG_UNUSED)
 	continue;
 
       int *const gscope_flagp = &t->header.gscope_flag;
@@ -1277,7 +1277,7 @@
 
       do
 	lll_futex_wait (gscope_flagp, THREAD_GSCOPE_FLAG_WAIT, LLL_PRIVATE);
-      while (*gscope_flagp == THREAD_GSCOPE_FLAG_WAIT);
+      while (atomic_load(*gscope_flagp) == THREAD_GSCOPE_FLAG_WAIT);
     }
 
   lll_unlock (stack_cache_lock, LLL_PRIVATE);
diff -N -r --unified glibc-2.21.orig/nptl/descr.h glibc-2.21/nptl/descr.h
--- glibc-2.21.orig/nptl/descr.h	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nptl/descr.h	2015-04-27 12:45:50.899310595 -0700
@@ -343,7 +343,7 @@
      in normal operation.  */
   struct pthread *joinid;
   /* Check whether a thread is detached.  */
-#define IS_DETACHED(pd) ((pd)->joinid == (pd))
+#define IS_DETACHED(pd) (atomic_load((pd)->joinid) == (pd))
 
   /* The result of the thread function.  */
   void *result;
diff -N -r --unified glibc-2.21.orig/nptl/lowlevellock.c glibc-2.21/nptl/lowlevellock.c
--- glibc-2.21.orig/nptl/lowlevellock.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nptl/lowlevellock.c	2015-04-27 13:09:38.051119215 -0700
@@ -26,7 +26,7 @@
 void
 __lll_lock_wait_private (int *futex)
 {
-  if (*futex == 2)
+  if (atomic_load(*futex) == 2)
     lll_futex_wait (futex, 2, LLL_PRIVATE); /* Wait if *futex == 2.  */
 
   while (atomic_exchange_acq (futex, 2) != 0)
@@ -39,7 +39,7 @@
 void
 __lll_lock_wait (int *futex, int private)
 {
-  if (*futex == 2)
+  if (atomic_load(*futex) == 2)
     lll_futex_wait (futex, 2, private); /* Wait if *futex == 2.  */
 
   while (atomic_exchange_acq (futex, 2) != 0)
@@ -97,7 +97,7 @@
     return EINVAL;
 
   /* Repeat until thread terminated.  */
-  while ((tid = *tidp) != 0)
+  while ((tid = atomic_load(*tidp)) != 0)
     {
       struct timeval tv;
       struct timespec rt;
diff -N -r --unified glibc-2.21.orig/nptl/lowlevelrobustlock.c glibc-2.21/nptl/lowlevelrobustlock.c
--- glibc-2.21.orig/nptl/lowlevelrobustlock.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nptl/lowlevelrobustlock.c	2015-04-27 12:48:32.924458850 -0700
@@ -27,7 +27,7 @@
 int
 __lll_robust_lock_wait (int *futex, int private)
 {
-  int oldval = *futex;
+  int oldval = atomic_load(*futex);
   int tid = THREAD_GETMEM (THREAD_SELF, tid);
 
   /* If the futex changed meanwhile try locking again.  */
@@ -68,7 +68,7 @@
     return EINVAL;
 
   int tid = THREAD_GETMEM (THREAD_SELF, tid);
-  int oldval = *futex;
+  int oldval = atomic_load(*futex);
 
   /* If the futex changed meanwhile, try locking again.  */
   if (oldval == 0)
diff -N -r --unified glibc-2.21.orig/nptl/nptl-init.c glibc-2.21/nptl/nptl-init.c
--- glibc-2.21.orig/nptl/nptl-init.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nptl/nptl-init.c	2015-04-27 12:45:50.899310595 -0700
@@ -49,7 +49,7 @@
 #ifndef __ASSUME_SET_ROBUST_LIST
 /* Negative if we do not have the system call and we can use it.  */
 int __set_robust_list_avail;
-# define set_robust_list_not_avail() \
+# define set_robust_list_not_avail()		\
   __set_robust_list_avail = -1
 #else
 # define set_robust_list_not_avail() do { } while (0)
@@ -277,7 +277,7 @@
   while (flags != newval);
 
   /* And release the futex.  */
-  self->setxid_futex = 1;
+  atomic_store(self->setxid_futex, 1);
   lll_futex_wake (&self->setxid_futex, 1, LLL_PRIVATE);
 
   if (atomic_decrement_val (&__xidcmd->cntr) == 0)
diff -N -r --unified glibc-2.21.orig/nptl/pthread_barrier_wait.c glibc-2.21/nptl/pthread_barrier_wait.c
--- glibc-2.21.orig/nptl/pthread_barrier_wait.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nptl/pthread_barrier_wait.c	2015-04-27 12:45:50.899310595 -0700
@@ -41,7 +41,10 @@
     {
       /* Yes. Increment the event counter to avoid invalid wake-ups and
 	 tell the current waiters that it is their turn.  */
-      ++ibarrier->curr_event;
+
+      // MVEE patch: with partial lock ordering, the original (non-atomic) 
+      // increment raced with the futex_wait loop below.
+      atomic_increment(&ibarrier->curr_event);
 
       /* Wake up everybody.  */
       lll_futex_wake (&ibarrier->curr_event, INT_MAX,
@@ -54,7 +57,9 @@
     {
       /* The number of the event we are waiting for.  The barrier's event
 	 number must be bumped before we continue.  */
-      unsigned int event = ibarrier->curr_event;
+
+      // MVEE patch: racy with partial lock ordering
+      unsigned int event = atomic_load(ibarrier->curr_event);
 
       /* Before suspending, make the barrier available to others.  */
       lll_unlock (ibarrier->lock, ibarrier->private ^ FUTEX_PRIVATE_FLAG);
@@ -63,11 +68,11 @@
       do
 	lll_futex_wait (&ibarrier->curr_event, event,
 			ibarrier->private ^ FUTEX_PRIVATE_FLAG);
-      while (event == ibarrier->curr_event);
+      while (event == atomic_load(ibarrier->curr_event));
     }
 
   /* Make sure the init_count is stored locally or in a register.  */
-  unsigned int init_count = ibarrier->init_count;
+  unsigned int init_count = atomic_load(ibarrier->init_count);
 
   /* If this was the last woken thread, unlock.  */
   if (atomic_increment_val (&ibarrier->left) == init_count)
diff -N -r --unified glibc-2.21.orig/nptl/pthread_cancel.c glibc-2.21/nptl/pthread_cancel.c
--- glibc-2.21.orig/nptl/pthread_cancel.c	2015-04-27 12:45:19.862185524 -0700
+++ glibc-2.21/nptl/pthread_cancel.c	2015-04-27 12:45:50.899310595 -0700
@@ -43,7 +43,7 @@
   do
     {
     again:
-      oldval = pd->cancelhandling;
+      oldval = atomic_load(pd->cancelhandling);
       newval = oldval | CANCELING_BITMASK | CANCELED_BITMASK;
 
       /* Avoid doing unnecessary work.  The atomic operation can
@@ -76,7 +76,7 @@
 	     is not guaranteed to be async-safe.  */
 	  int val;
 	  val = INTERNAL_SYSCALL (tgkill, err, 3,
-				  THREAD_GETMEM (THREAD_SELF, pid), pd->tid,
+				  THREAD_GETMEM (THREAD_SELF, pid), atomic_load(pd->tid),
 				  SIGCANCEL);
 
 	  if (INTERNAL_SYSCALL_ERROR_P (val, err))
diff -N -r --unified glibc-2.21.orig/nptl/pthread_cond_signal.c glibc-2.21/nptl/pthread_cond_signal.c
--- glibc-2.21.orig/nptl/pthread_cond_signal.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_cond_signal.c	2015-04-27 12:45:50.899310595 -0700
@@ -63,12 +63,18 @@
 	}
       else
 #endif
+
+	/* MVEE patch: since this syscall unlocks the cond_lock, we have to 
+	   wrap it in a (VERY long) critical section. It is actually faster
+	   to just wake... */
+#if 0
 	/* Wake one.  */
 	if (! __builtin_expect (lll_futex_wake_unlock (&cond->__data.__futex,
 						       1, 1,
 						       &cond->__data.__lock,
 						       pshared), 0))
 	  return 0;
+#endif
 
       /* Fallback if neither of them work.  */
       lll_futex_wake (&cond->__data.__futex, 1, pshared);
diff -N -r --unified glibc-2.21.orig/nptl/pthread_create.c glibc-2.21/nptl/pthread_create.c
--- glibc-2.21.orig/nptl/pthread_create.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_create.c	2015-04-27 13:05:05.299395554 -0700
@@ -288,7 +288,7 @@
   /* If the parent was running cancellation handlers while creating
      the thread the new thread inherited the signal mask.  Reset the
      cancellation signal mask.  */
-  if (__glibc_unlikely (pd->parent_cancelhandling & CANCELING_BITMASK))
+  if (__glibc_unlikely (atomic_load(pd->parent_cancelhandling) & CANCELING_BITMASK))
     {
       INTERNAL_SYSCALL_DECL (err);
       sigset_t mask;
@@ -373,7 +373,7 @@
 	      pd->eventbuf.eventdata = pd;
 
 	      do
-		pd->nextevent = __nptl_last_event;
+		pd->nextevent = atomic_load(__nptl_last_event);
 	      while (atomic_compare_and_exchange_bool_acq (&__nptl_last_event,
 							   pd, pd->nextevent));
 	    }
@@ -437,16 +437,16 @@
   if (IS_DETACHED (pd))
     /* Free the TCB.  */
     __free_tcb (pd);
-  else if (__glibc_unlikely (pd->cancelhandling & SETXID_BITMASK))
+  else if (__glibc_unlikely (atomic_load(pd->cancelhandling) & SETXID_BITMASK))
     {
       /* Some other thread might call any of the setXid functions and expect
 	 us to reply.  In this case wait until we did that.  */
       do
 	lll_futex_wait (&pd->setxid_futex, 0, LLL_PRIVATE);
-      while (pd->cancelhandling & SETXID_BITMASK);
+      while (atomic_load(pd->cancelhandling) & SETXID_BITMASK);
 
       /* Reset the value so that the stack can be reused.  */
-      pd->setxid_futex = 0;
+      atomic_store(pd->setxid_futex, 0);
     }
 
   /* We cannot call '_exit' here.  '_exit' will terminate the process.
diff -N -r --unified glibc-2.21.orig/nptl/pthread_detach.c glibc-2.21/nptl/pthread_detach.c
--- glibc-2.21.orig/nptl/pthread_detach.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_detach.c	2015-04-27 12:45:50.899310595 -0700
@@ -47,7 +47,7 @@
   else
     /* Check whether the thread terminated meanwhile.  In this case we
        will just free the TCB.  */
-    if ((pd->cancelhandling & EXITING_BITMASK) != 0)
+    if ((atomic_load(pd->cancelhandling) & EXITING_BITMASK) != 0)
       /* Note that the code in __free_tcb makes sure each thread
 	 control block is freed only once.  */
       __free_tcb (pd);
diff -N -r --unified glibc-2.21.orig/nptl/pthread_getattr_np.c glibc-2.21/nptl/pthread_getattr_np.c
--- glibc-2.21.orig/nptl/pthread_getattr_np.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_getattr_np.c	2015-04-27 12:45:50.899310595 -0700
@@ -66,7 +66,7 @@
     {
       /* No stack information available.  This must be for the initial
 	 thread.  Get the info in some magical way.  */
-      assert (abs (thread->pid) == thread->tid);
+      assert (abs (thread->pid) == atomic_load(thread->tid));
 
       /* Stack size limit.  */
       struct rlimit rl;
diff -N -r --unified glibc-2.21.orig/nptl/pthread_getcpuclockid.c glibc-2.21/nptl/pthread_getcpuclockid.c
--- glibc-2.21.orig/nptl/pthread_getcpuclockid.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_getcpuclockid.c	2015-04-27 12:45:50.899310595 -0700
@@ -42,11 +42,11 @@
 
      If some day more clock IDs are needed the ID part can be
      enlarged.  The IDs are entirely internal.  */
-  if (pd->tid >= 1 << (8 * sizeof (*clockid) - CLOCK_IDFIELD_SIZE))
+  if (atomic_load(pd->tid) >= 1 << (8 * sizeof (*clockid) - CLOCK_IDFIELD_SIZE))
     return ERANGE;
 
   /* Store the number.  */
-  *clockid = CLOCK_THREAD_CPUTIME_ID | (pd->tid << CLOCK_IDFIELD_SIZE);
+  *clockid = CLOCK_THREAD_CPUTIME_ID | (atomic_load(pd->tid) << CLOCK_IDFIELD_SIZE);
 
   return 0;
 #else
diff -N -r --unified glibc-2.21.orig/nptl/pthread_getschedparam.c glibc-2.21/nptl/pthread_getschedparam.c
--- glibc-2.21.orig/nptl/pthread_getschedparam.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_getschedparam.c	2015-04-27 12:45:50.899310595 -0700
@@ -46,7 +46,7 @@
      not yet been retrieved do it now.  */
   if ((pd->flags & ATTR_FLAG_SCHED_SET) == 0)
     {
-      if (__sched_getparam (pd->tid, &pd->schedparam) != 0)
+      if (__sched_getparam (atomic_load(pd->tid), &pd->schedparam) != 0)
 	result = 1;
       else
 	pd->flags |= ATTR_FLAG_SCHED_SET;
@@ -54,7 +54,7 @@
 
   if ((pd->flags & ATTR_FLAG_POLICY_SET) == 0)
     {
-      pd->schedpolicy = __sched_getscheduler (pd->tid);
+      pd->schedpolicy = __sched_getscheduler (atomic_load(pd->tid));
       if (pd->schedpolicy == -1)
 	result = 1;
       else
diff -N -r --unified glibc-2.21.orig/nptl/pthread_join.c glibc-2.21/nptl/pthread_join.c
--- glibc-2.21.orig/nptl/pthread_join.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_join.c	2015-04-27 12:45:50.899310595 -0700
@@ -65,11 +65,11 @@
   int oldtype = CANCEL_ASYNC ();
 
   if ((pd == self
-       || (self->joinid == pd
-	   && (pd->cancelhandling
+       || (atomic_load(self->joinid) == pd
+	   && (atomic_load(pd->cancelhandling)
 	       & (CANCELING_BITMASK | CANCELED_BITMASK | EXITING_BITMASK
 		  | TERMINATED_BITMASK)) == 0))
-      && !CANCEL_ENABLED_AND_CANCELED (self->cancelhandling))
+      && !CANCEL_ENABLED_AND_CANCELED (atomic_load(self->cancelhandling)))
     /* This is a deadlock situation.  The threads are waiting for each
        other to finish.  Note that this is a "may" error.  To be 100%
        sure we catch this error we would have to lock the data
@@ -100,7 +100,7 @@
   if (__glibc_likely (result == 0))
     {
       /* We mark the thread as terminated and as joined.  */
-      pd->tid = -1;
+      atomic_store(pd->tid, -1);
 
       /* Store the return value if the caller is interested.  */
       if (thread_return != NULL)
diff -N -r --unified glibc-2.21.orig/nptl/pthread_key_create.c glibc-2.21/nptl/pthread_key_create.c
--- glibc-2.21.orig/nptl/pthread_key_create.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_key_create.c	2015-04-27 12:45:50.899310595 -0700
@@ -29,7 +29,7 @@
   /* Find a slot in __pthread_kyes which is unused.  */
   for (size_t cnt = 0; cnt < PTHREAD_KEYS_MAX; ++cnt)
     {
-      uintptr_t seq = __pthread_keys[cnt].seq;
+      uintptr_t seq = atomic_load(__pthread_keys[cnt].seq);
 
       if (KEY_UNUSED (seq) && KEY_USABLE (seq)
 	  /* We found an unused slot.  Try to allocate it.  */
diff -N -r --unified glibc-2.21.orig/nptl/pthread_key_delete.c glibc-2.21/nptl/pthread_key_delete.c
--- glibc-2.21.orig/nptl/pthread_key_delete.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_key_delete.c	2015-04-27 12:45:50.899310595 -0700
@@ -29,7 +29,7 @@
 
   if (__glibc_likely (key < PTHREAD_KEYS_MAX))
     {
-      unsigned int seq = __pthread_keys[key].seq;
+      unsigned int seq = atomic_load(__pthread_keys[key].seq);
 
       if (__builtin_expect (! KEY_UNUSED (seq), 1)
 	  && ! atomic_compare_and_exchange_bool_acq (&__pthread_keys[key].seq,
diff -N -r --unified glibc-2.21.orig/nptl/pthread_mutex_lock.c glibc-2.21/nptl/pthread_mutex_lock.c
--- glibc-2.21.orig/nptl/pthread_mutex_lock.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_mutex_lock.c	2015-04-27 12:45:50.899310595 -0700
@@ -184,7 +184,7 @@
       THREAD_SETMEM (THREAD_SELF, robust_head.list_op_pending,
 		     &mutex->__data.__list.__next);
 
-      oldval = mutex->__data.__lock;
+      oldval = atomic_load(mutex->__data.__lock);
       do
 	{
 	again:
@@ -298,7 +298,7 @@
 			 (void *) (((uintptr_t) &mutex->__data.__list.__next)
 				   | 1));
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (__glibc_unlikely ((oldval & FUTEX_TID_MASK) == id))
@@ -359,7 +359,7 @@
 		  pause_not_cancel ();
 	      }
 
-	    oldval = mutex->__data.__lock;
+	    oldval = atomic_load(mutex->__data.__lock);
 
 	    assert (robust || (oldval & FUTEX_OWNER_DIED) == 0);
 	  }
@@ -422,7 +422,7 @@
       {
 	int kind = mutex->__data.__kind & PTHREAD_MUTEX_KIND_MASK_NP;
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (mutex->__data.__owner == id)
diff -N -r --unified glibc-2.21.orig/nptl/pthread_mutex_setprioceiling.c glibc-2.21/nptl/pthread_mutex_setprioceiling.c
--- glibc-2.21.orig/nptl/pthread_mutex_setprioceiling.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_mutex_setprioceiling.c	2015-04-27 12:45:50.903309630 -0700
@@ -61,7 +61,7 @@
 	locked = true;
     }
 
-  int oldval = mutex->__data.__lock;
+  int oldval = atomic_load(mutex->__data.__lock);
   if (! locked)
     do
       {
@@ -111,9 +111,9 @@
 
   int newlock = 0;
   if (locked)
-    newlock = (mutex->__data.__lock & ~PTHREAD_MUTEX_PRIO_CEILING_MASK);
-  mutex->__data.__lock = newlock
-			 | (prioceiling << PTHREAD_MUTEX_PRIO_CEILING_SHIFT);
+    newlock = (atomic_load(mutex->__data.__lock) & ~PTHREAD_MUTEX_PRIO_CEILING_MASK);
+  atomic_store(mutex->__data.__lock, newlock
+	       | (prioceiling << PTHREAD_MUTEX_PRIO_CEILING_SHIFT));
   atomic_full_barrier ();
 
   lll_futex_wake (&mutex->__data.__lock, INT_MAX,
diff -N -r --unified glibc-2.21.orig/nptl/pthread_mutex_timedlock.c glibc-2.21/nptl/pthread_mutex_timedlock.c
--- glibc-2.21.orig/nptl/pthread_mutex_timedlock.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_mutex_timedlock.c	2015-04-27 12:45:50.903309630 -0700
@@ -143,7 +143,7 @@
       THREAD_SETMEM (THREAD_SELF, robust_head.list_op_pending,
 		     &mutex->__data.__list.__next);
 
-      oldval = mutex->__data.__lock;
+      oldval = atomic_load(mutex->__data.__lock);
       do
 	{
 	again:
@@ -253,7 +253,7 @@
 			 (void *) (((uintptr_t) &mutex->__data.__list.__next)
 				   | 1));
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (__glibc_unlikely ((oldval & FUTEX_TID_MASK) == id))
@@ -338,7 +338,7 @@
 		return INTERNAL_SYSCALL_ERRNO (e, __err);
 	      }
 
-	    oldval = mutex->__data.__lock;
+	    oldval = atomic_load(mutex->__data.__lock);
 
 	    assert (robust || (oldval & FUTEX_OWNER_DIED) == 0);
 	  }
@@ -396,7 +396,7 @@
       {
 	int kind = mutex->__data.__kind & PTHREAD_MUTEX_KIND_MASK_NP;
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (mutex->__data.__owner == id)
diff -N -r --unified glibc-2.21.orig/nptl/pthread_mutex_trylock.c glibc-2.21/nptl/pthread_mutex_trylock.c
--- glibc-2.21.orig/nptl/pthread_mutex_trylock.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_mutex_trylock.c	2015-04-27 12:45:50.903309630 -0700
@@ -94,7 +94,7 @@
       THREAD_SETMEM (THREAD_SELF, robust_head.list_op_pending,
 		     &mutex->__data.__list.__next);
 
-      oldval = mutex->__data.__lock;
+      oldval = atomic_load(mutex->__data.__lock);
       do
 	{
 	again:
@@ -209,7 +209,7 @@
 			 (void *) (((uintptr_t) &mutex->__data.__list.__next)
 				   | 1));
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (__glibc_unlikely ((oldval & FUTEX_TID_MASK) == id))
@@ -268,7 +268,7 @@
 		return EBUSY;
 	      }
 
-	    oldval = mutex->__data.__lock;
+	    oldval = atomic_load(mutex->__data.__lock);
 	  }
 
 	if (__glibc_unlikely (oldval & FUTEX_OWNER_DIED))
@@ -328,7 +328,7 @@
       {
 	int kind = mutex->__data.__kind & PTHREAD_MUTEX_KIND_MASK_NP;
 
-	oldval = mutex->__data.__lock;
+	oldval = atomic_load(mutex->__data.__lock);
 
 	/* Check whether we already hold the mutex.  */
 	if (mutex->__data.__owner == id)
diff -N -r --unified glibc-2.21.orig/nptl/pthread_mutex_unlock.c glibc-2.21/nptl/pthread_mutex_unlock.c
--- glibc-2.21.orig/nptl/pthread_mutex_unlock.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_mutex_unlock.c	2015-04-27 12:45:50.903309630 -0700
@@ -233,7 +233,7 @@
 	--mutex->__data.__nusers;
 
       /* Unlock.  */
-      if ((mutex->__data.__lock & FUTEX_WAITERS) != 0
+      if ((atomic_load(mutex->__data.__lock) & FUTEX_WAITERS) != 0
 	  || atomic_compare_and_exchange_bool_rel (&mutex->__data.__lock, 0,
 						   THREAD_GETMEM (THREAD_SELF,
 								  tid)))
@@ -282,7 +282,7 @@
       int newval, oldval;
       do
 	{
-	  oldval = mutex->__data.__lock;
+	  oldval = atomic_load(mutex->__data.__lock);
 	  newval = oldval & PTHREAD_MUTEX_PRIO_CEILING_MASK;
 	}
       while (atomic_compare_and_exchange_bool_rel (&mutex->__data.__lock,
diff -N -r --unified glibc-2.21.orig/nptl/pthread_setschedparam.c glibc-2.21/nptl/pthread_setschedparam.c
--- glibc-2.21.orig/nptl/pthread_setschedparam.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_setschedparam.c	2015-04-27 12:45:50.903309630 -0700
@@ -54,7 +54,7 @@
     }
 
   /* Try to set the scheduler information.  */
-  if (__builtin_expect (__sched_setscheduler (pd->tid, policy,
+  if (__builtin_expect (__sched_setscheduler (atomic_load(pd->tid), policy,
 					      param) == -1, 0))
     result = errno;
   else
diff -N -r --unified glibc-2.21.orig/nptl/pthread_setschedprio.c glibc-2.21/nptl/pthread_setschedprio.c
--- glibc-2.21.orig/nptl/pthread_setschedprio.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_setschedprio.c	2015-04-27 13:05:45.667722221 -0700
@@ -48,7 +48,7 @@
     param.sched_priority = pd->tpp->priomax;
 
   /* Try to set the scheduler information.  */
-  if (__glibc_unlikely (sched_setparam (pd->tid, &param) == -1))
+  if (__glibc_unlikely (sched_setparam (atomic_load(pd->tid), &param) == -1))
     result = errno;
   else
     {
diff -N -r --unified glibc-2.21.orig/nptl/pthread_spin_lock.c glibc-2.21/nptl/pthread_spin_lock.c
--- glibc-2.21.orig/nptl/pthread_spin_lock.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_spin_lock.c	2015-04-27 16:37:24.436404064 -0700
@@ -24,7 +24,7 @@
   of atomic_compare_and_exchange_val_acq.  If spinning forever is optimal
   then use -1.  If no plain reads here would ever be optimal, use 0.  */
 #ifndef SPIN_LOCK_READS_BETWEEN_CMPXCHG
-# warning machine-dependent file should define SPIN_LOCK_READS_BETWEEN_CMPXCHG
+//# warning machine-dependent file should define SPIN_LOCK_READS_BETWEEN_CMPXCHG
 # define SPIN_LOCK_READS_BETWEEN_CMPXCHG 1000
 #endif
 
@@ -54,12 +54,12 @@
 	{
 	  int wait = SPIN_LOCK_READS_BETWEEN_CMPXCHG;
 
-	  while (*lock != 0 && wait > 0)
+	  while (atomic_load(*lock) != 0 && wait > 0)
 	    --wait;
 	}
       else
 	{
-	  while (*lock != 0)
+	  while (atomic_load(*lock) != 0)
 	    ;
 	}
     }
diff -N -r --unified glibc-2.21.orig/nptl/pthread_spin_unlock.c glibc-2.21/nptl/pthread_spin_unlock.c
--- glibc-2.21.orig/nptl/pthread_spin_unlock.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_spin_unlock.c	2015-04-27 12:45:50.907308666 -0700
@@ -24,6 +24,6 @@
 pthread_spin_unlock (pthread_spinlock_t *lock)
 {
   atomic_full_barrier ();
-  *lock = 0;
+  atomic_store(*lock, 0);
   return 0;
 }
diff -N -r --unified glibc-2.21.orig/nptl/pthread_timedjoin.c glibc-2.21/nptl/pthread_timedjoin.c
--- glibc-2.21.orig/nptl/pthread_timedjoin.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_timedjoin.c	2015-04-27 12:45:50.907308666 -0700
@@ -48,7 +48,7 @@
     return EINVAL;
 
   self = THREAD_SELF;
-  if (pd == self || self->joinid == pd)
+  if (pd == self || atomic_load(self->joinid) == pd)
     /* This is a deadlock situation.  The threads are waiting for each
        other to finish.  Note that this is a "may" error.  To be 100%
        sure we catch this error we would have to lock the data
@@ -98,7 +98,7 @@
       __free_tcb (pd);
     }
   else
-    pd->joinid = NULL;
+    atomic_store(pd->joinid, NULL);
 
   return result;
 }
diff -N -r --unified glibc-2.21.orig/nptl/pthread_tryjoin.c glibc-2.21/nptl/pthread_tryjoin.c
--- glibc-2.21.orig/nptl/pthread_tryjoin.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/pthread_tryjoin.c	2015-04-27 12:45:50.907308666 -0700
@@ -42,7 +42,7 @@
     return EINVAL;
 
   self = THREAD_SELF;
-  if (pd == self || self->joinid == pd)
+  if (pd == self || atomic_load(self->joinid) == pd)
     /* This is a deadlock situation.  The threads are waiting for each
        other to finish.  Note that this is a "may" error.  To be 100%
        sure we catch this error we would have to lock the data
@@ -53,7 +53,7 @@
     return EDEADLK;
 
   /* Return right away if the thread hasn't terminated yet.  */
-  if (pd->tid != 0)
+  if (atomic_load(pd->tid) != 0)
     return EBUSY;
 
   /* Wait for the thread to finish.  If it is already locked something
diff -N -r --unified glibc-2.21.orig/nptl/register-atfork.c glibc-2.21/nptl/register-atfork.c
--- glibc-2.21.orig/nptl/register-atfork.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/register-atfork.c	2015-04-27 12:49:10.702258724 -0700
@@ -51,18 +51,18 @@
     {
       /* Search for an empty entry.  */
       for (i = 0; i < NHANDLER; ++i)
-	if (runp->mem[i].refcntr == 0)
+	if (atomic_load(runp->mem[i].refcntr) == 0)
 	  goto found;
     }
-  while ((runp = runp->next) != NULL);
+  while ((runp = atomic_load(runp->next)) != NULL);
 
   /* We have to allocate a new entry.  */
   runp = (struct fork_handler_pool *) calloc (1, sizeof (*runp));
   if (runp != NULL)
     {
       /* Enqueue the new memory pool into the list.  */
-      runp->next = fork_handler_pool.next;
-      fork_handler_pool.next = runp;
+      runp->next = atomic_load(fork_handler_pool.next);
+      atomic_store(fork_handler_pool.next, runp);
 
       /* We use the last entry on the page.  This means when we start
 	 searching from the front the next time we will find the first
@@ -71,8 +71,8 @@
 
     found:
       result = &runp->mem[i];
-      result->refcntr = 1;
-      result->need_signal = 0;
+      atomic_store(result->refcntr, 1);
+      atomic_store(result->need_signal, 0);
     }
 
   return result;
@@ -115,7 +115,7 @@
 __linkin_atfork (struct fork_handler *newp)
 {
   do
-    newp->next = __fork_handlers;
+    newp->next = atomic_load(__fork_handlers);
   while (catomic_compare_and_exchange_bool_acq (&__fork_handlers,
 						newp, newp->next) != 0);
 }
@@ -127,7 +127,7 @@
   lll_lock (__fork_lock, LLL_PRIVATE);
 
   /* No more fork handlers.  */
-  __fork_handlers = NULL;
+  atomic_store(__fork_handlers, NULL);
 
   /* Free eventually allocated memory blocks for the object pool.  */
   struct fork_handler_pool *runp = fork_handler_pool.next;
diff -N -r --unified glibc-2.21.orig/nptl/tpp.c glibc-2.21/nptl/tpp.c
--- glibc-2.21.orig/nptl/tpp.c	2015-04-27 12:45:19.866183584 -0700
+++ glibc-2.21/nptl/tpp.c	2015-04-27 12:52:07.326795974 -0700
@@ -122,7 +122,7 @@
 
   if ((self->flags & ATTR_FLAG_SCHED_SET) == 0)
     {
-      if (__sched_getparam (self->tid, &self->schedparam) != 0)
+      if (__sched_getparam (atomic_load(self->tid), &self->schedparam) != 0)
 	result = errno;
       else
 	self->flags |= ATTR_FLAG_SCHED_SET;
@@ -130,7 +130,7 @@
 
   if ((self->flags & ATTR_FLAG_POLICY_SET) == 0)
     {
-      self->schedpolicy = __sched_getscheduler (self->tid);
+      self->schedpolicy = __sched_getscheduler (atomic_load(self->tid));
       if (self->schedpolicy == -1)
 	result = errno;
       else
@@ -145,7 +145,7 @@
 	  if (sp.sched_priority < newpriomax)
 	    sp.sched_priority = newpriomax;
 
-	  if (__sched_setscheduler (self->tid, self->schedpolicy, &sp) < 0)
+	  if (__sched_setscheduler (atomic_load(self->tid), self->schedpolicy, &sp) < 0)
 	    result = errno;
 	}
     }
@@ -169,7 +169,7 @@
 
   if ((self->flags & ATTR_FLAG_SCHED_SET) == 0)
     {
-      if (__sched_getparam (self->tid, &self->schedparam) != 0)
+      if (__sched_getparam (atomic_load(self->tid), &self->schedparam) != 0)
 	result = -1;
       else
 	self->flags |= ATTR_FLAG_SCHED_SET;
@@ -177,7 +177,7 @@
 
   if ((self->flags & ATTR_FLAG_POLICY_SET) == 0)
     {
-      self->schedpolicy = __sched_getscheduler (self->tid);
+      self->schedpolicy = __sched_getscheduler (atomic_load(self->tid));
       if (self->schedpolicy == -1)
 	result = -1;
       else
diff -N -r --unified glibc-2.21.orig/nptl/unregister-atfork.c glibc-2.21/nptl/unregister-atfork.c
--- glibc-2.21.orig/nptl/unregister-atfork.c	2015-04-27 12:45:19.874179704 -0700
+++ glibc-2.21/nptl/unregister-atfork.c	2015-04-27 12:50:22.962170366 -0700
@@ -33,16 +33,16 @@
      We do not worry about other threads adding entries for this DSO
      right this moment.  If this happens this is a race and we can do
      whatever we please.  The program will crash anyway seen.  */
-  struct fork_handler *runp = __fork_handlers;
+  struct fork_handler *runp = atomic_load(__fork_handlers);
   struct fork_handler *lastp = NULL;
 
   while (runp != NULL)
-    if (runp->dso_handle == dso_handle)
+    if (atomic_load(runp->dso_handle) == dso_handle)
       break;
     else
       {
 	lastp = runp;
-	runp = runp->next;
+	runp = atomic_load(runp->next);
       }
 
   if (runp == NULL)
@@ -67,7 +67,7 @@
   do
     {
     again:
-      if (runp->dso_handle == dso_handle)
+      if (atomic_load(runp->dso_handle) == dso_handle)
 	{
 	  if (lastp == NULL)
 	    {
@@ -77,12 +77,12 @@
 							 runp->next, runp)
 		  != 0)
 		{
-		  runp = __fork_handlers;
+		  runp = atomic_load(__fork_handlers);
 		  goto again;
 		}
 	    }
 	  else
-	    lastp->next = runp->next;
+	    atomic_store(lastp->next, runp->next);
 
 	  /* We cannot overwrite the ->next element now.  Put the deleted
 	     entries in a separate list.  */
@@ -94,7 +94,7 @@
       else
 	lastp = runp;
 
-      runp = runp->next;
+      runp = atomic_load(runp->next);
     }
   while (runp != NULL);
 
@@ -105,7 +105,7 @@
   while (deleted != NULL)
     {
       /* We need to be informed by possible current users.  */
-      deleted->handler->need_signal = 1;
+      atomic_store(deleted->handler->need_signal, 1);
       /* Make sure this gets written out first.  */
       atomic_write_barrier ();
 
@@ -113,7 +113,7 @@
 	 wait for the last user.  */
       atomic_decrement (&deleted->handler->refcntr);
       unsigned int val;
-      while ((val = deleted->handler->refcntr) != 0)
+      while ((val = atomic_load(deleted->handler->refcntr)) != 0)
 	lll_futex_wait (&deleted->handler->refcntr, val, LLL_PRIVATE);
 
       deleted = deleted->next;
diff -N -r --unified glibc-2.21.orig/nss/getXXbyYY_r.c glibc-2.21/nss/getXXbyYY_r.c
--- glibc-2.21.orig/nss/getXXbyYY_r.c	2015-04-27 12:45:19.874179704 -0700
+++ glibc-2.21/nss/getXXbyYY_r.c	2015-04-27 12:52:07.326795974 -0700
@@ -200,7 +200,7 @@
     }
 #endif
 
-  if (! startp_initialized)
+  if (! atomic_load(startp_initialized))
     {
       no_more = DB_LOOKUP_FCT (&nip, REENTRANT_NAME_STRING,
 			       REENTRANT2_NAME_STRING, &fct.ptr);
@@ -244,7 +244,7 @@
       /* Make sure start_fct and startp are written before
 	 startp_initialized.  */
       atomic_write_barrier ();
-      startp_initialized = true;
+      atomic_store(startp_initialized, true);
     }
   else
     {
diff -N -r --unified glibc-2.21.orig/stdlib/cxa_atexit.c glibc-2.21/stdlib/cxa_atexit.c
--- glibc-2.21.orig/stdlib/cxa_atexit.c	2015-04-27 12:45:19.902166125 -0700
+++ glibc-2.21/stdlib/cxa_atexit.c	2015-04-27 12:52:07.326795974 -0700
@@ -44,7 +44,7 @@
   new->func.cxa.arg = arg;
   new->func.cxa.dso_handle = d;
   atomic_write_barrier ();
-  new->flavor = ef_cxa;
+  atomic_store(new->flavor, ef_cxa);
   return 0;
 }
 
diff -N -r --unified glibc-2.21.orig/stdlib/cxa_finalize.c glibc-2.21/stdlib/cxa_finalize.c
--- glibc-2.21.orig/stdlib/cxa_finalize.c	2015-04-27 12:45:19.902166125 -0700
+++ glibc-2.21/stdlib/cxa_finalize.c	2015-04-27 12:52:07.326795974 -0700
@@ -32,7 +32,7 @@
   struct exit_function_list *funcs;
 
  restart:
-  for (funcs = __exit_funcs; funcs; funcs = funcs->next)
+  for (funcs = atomic_load(__exit_funcs); funcs; funcs = atomic_load(funcs->next))
     {
       struct exit_function *f;
 
@@ -41,10 +41,10 @@
 	  void (*cxafn) (void *arg, int status);
 	  void *cxaarg;
 
-	  if ((d == NULL || d == f->func.cxa.dso_handle)
+	  if ((d == NULL || d == atomic_load(f->func.cxa.dso_handle))
 	      /* We don't want to run this cleanup more than once.  */
-	      && (cxafn = f->func.cxa.fn,
-		  cxaarg = f->func.cxa.arg,
+	      && (cxafn = atomic_load(f->func.cxa.fn),
+		  cxaarg = atomic_load(f->func.cxa.arg),
 		  ! catomic_compare_and_exchange_bool_acq (&f->flavor, ef_free,
 							   ef_cxa)))
 	    {
@@ -64,13 +64,13 @@
     }
 
   /* Also remove the quick_exit handlers, but do not call them.  */
-  for (funcs = __quick_exit_funcs; funcs; funcs = funcs->next)
+  for (funcs = atomic_load(__quick_exit_funcs); funcs; funcs = atomic_load(funcs->next))
     {
       struct exit_function *f;
 
       for (f = &funcs->fns[funcs->idx - 1]; f >= &funcs->fns[0]; --f)
-	if (d == NULL || d == f->func.cxa.dso_handle)
-	  f->flavor = ef_free;
+	if (d == NULL || d == atomic_load(f->func.cxa.dso_handle))
+	  atomic_store(f->flavor, ef_free);
     }
 
   /* Remove the registered fork handlers.  We do not have to
diff -N -r --unified glibc-2.21.orig/stdlib/msort.c glibc-2.21/stdlib/msort.c
--- glibc-2.21.orig/stdlib/msort.c	2015-04-27 12:45:19.906164185 -0700
+++ glibc-2.21/stdlib/msort.c	2015-04-27 12:52:07.326795974 -0700
@@ -182,7 +182,7 @@
       static long int phys_pages;
       static int pagesize;
 
-      if (pagesize == 0)
+      if (atomic_load(pagesize) == 0)
 	{
 	  phys_pages = __sysconf (_SC_PHYS_PAGES);
 
@@ -200,7 +200,7 @@
 	  /* Make sure phys_pages is written to memory.  */
 	  atomic_write_barrier ();
 
-	  pagesize = __sysconf (_SC_PAGESIZE);
+	  atomic_store(pagesize, __sysconf (_SC_PAGESIZE));
 	}
 
       /* Just a comment here.  We cannot compute
diff -N -r --unified glibc-2.21.orig/stdlib/on_exit.c glibc-2.21/stdlib/on_exit.c
--- glibc-2.21.orig/stdlib/on_exit.c	2015-04-27 12:45:19.906164185 -0700
+++ glibc-2.21/stdlib/on_exit.c	2015-04-27 12:52:07.326795974 -0700
@@ -35,7 +35,7 @@
   new->func.on.fn = func;
   new->func.on.arg = arg;
   atomic_write_barrier ();
-  new->flavor = ef_on;
+  atomic_store(new->flavor, ef_on);
   return 0;
 }
 weak_alias (__on_exit, on_exit)
diff -N -r --unified glibc-2.21.orig/sysdeps/nptl/fork.c glibc-2.21/sysdeps/nptl/fork.c
--- glibc-2.21.orig/sysdeps/nptl/fork.c	2015-04-27 12:45:19.994121507 -0700
+++ glibc-2.21/sysdeps/nptl/fork.c	2015-04-27 16:17:52.434711722 -0700
@@ -56,12 +56,12 @@
   /* Run all the registered preparation handlers.  In reverse order.
      While doing this we build up a list of all the entries.  */
   struct fork_handler *runp;
-  while ((runp = __fork_handlers) != NULL)
+  while ((runp = atomic_load(__fork_handlers)) != NULL)
     {
       /* Make sure we read from the current RUNP pointer.  */
       atomic_full_barrier ();
 
-      unsigned int oldval = runp->refcntr;
+      unsigned int oldval = atomic_load(runp->refcntr);
 
       if (oldval == 0)
 	/* This means some other thread removed the list just after
@@ -96,7 +96,7 @@
 	  allp = newp;
 
 	  /* Advance to the next handler.  */
-	  runp = runp->next;
+	  runp = atomic_load(runp->next);
 	  if (runp == NULL)
 	    break;
 
@@ -132,6 +132,8 @@
     {
       struct pthread *self = THREAD_SELF;
 
+      mvee_invalidate_buffer();
+
       assert (THREAD_GETMEM (self, tid) != ppid);
 
       /* See __pthread_once.  */
@@ -218,10 +220,10 @@
 	    allp->handler->parent_handler ();
 
 	  if (atomic_decrement_and_test (&allp->handler->refcntr)
-	      && allp->handler->need_signal)
+	      && atomic_load(allp->handler->need_signal))
 	    lll_futex_wake (&allp->handler->refcntr, 1, LLL_PRIVATE);
 
-	  allp = allp->next;
+	  allp = atomic_load(allp->next);
 	}
     }
 
diff -N -r --unified glibc-2.21.orig/sysdeps/nptl/lowlevellock.h glibc-2.21/sysdeps/nptl/lowlevellock.h
--- glibc-2.21.orig/sysdeps/nptl/lowlevellock.h	2015-04-27 12:45:19.994121507 -0700
+++ glibc-2.21/sysdeps/nptl/lowlevellock.h	2015-04-27 15:45:02.459321847 -0700
@@ -72,9 +72,11 @@
 #define lll_cond_trylock(lock)	\
   atomic_compare_and_exchange_bool_acq (&(lock), 2, 0)
 
+#ifndef __ASSEMBLER__
 extern void __lll_lock_wait_private (int *futex) attribute_hidden;
 extern void __lll_lock_wait (int *futex, int private) attribute_hidden;
 extern int __lll_robust_lock_wait (int *futex, int private) attribute_hidden;
+#endif
 
 /* This is an expression rather than a statement even though its value is
    void, so that it can be used in a comma expression or as an expression
@@ -148,10 +150,12 @@
   __lll_robust_lock (&(futex), (id) | FUTEX_WAITERS, private)
 
 
+#ifndef __ASSEMBLER__
 extern int __lll_timedlock_wait (int *futex, const struct timespec *,
 				 int private) attribute_hidden;
 extern int __lll_robust_timedlock_wait (int *futex, const struct timespec *,
 					int private) attribute_hidden;
+#endif
 
 
 /* As __lll_lock, but with a timeout.  If the timeout occurs then return
@@ -246,15 +250,17 @@
       lll_futex_wait (&(tid), __tid, LLL_SHARED);\
   } while (0)
 
+#ifndef __ASSEMBLER__
 extern int __lll_timedwait_tid (int *, const struct timespec *)
      attribute_hidden;
+#endif
 
 /* As lll_wait_tid, but with a timeout.  If the timeout occurs then return
    ETIMEDOUT.  If ABSTIME is invalid, return EINVAL.  */
 #define lll_timedwait_tid(tid, abstime) \
   ({							\
     int __res = 0;					\
-    if ((tid) != 0)					\
+    if (atomic_load(tid) != 0 || mvee_should_sync_tid())	\
       __res = __lll_timedwait_tid (&(tid), (abstime));	\
     __res;						\
   })
diff -N -r --unified glibc-2.21.orig/sysdeps/nptl/unwind-forcedunwind.c glibc-2.21/sysdeps/nptl/unwind-forcedunwind.c
--- glibc-2.21.orig/sysdeps/nptl/unwind-forcedunwind.c	2015-04-27 12:45:19.994121507 -0700
+++ glibc-2.21/sysdeps/nptl/unwind-forcedunwind.c	2015-04-27 16:16:05.924736396 -0700
@@ -42,7 +42,7 @@
   void *getcfa;
   void *handle;
 
-  if (__glibc_likely (libgcc_s_handle != NULL))
+  if (__glibc_likely (atomic_load(libgcc_s_handle) != NULL))
     {
       /* Force gcc to reload all values.  */
       asm volatile ("" ::: "memory");
@@ -75,17 +75,17 @@
      pthread_cancel_init might return early even when the pointer the
      caller is interested in is not initialized yet.  */
   atomic_write_barrier ();
-  libgcc_s_handle = handle;
+  atomic_store(libgcc_s_handle, handle);
 }
 
 void
 __libc_freeres_fn_section
 __unwind_freeres (void)
 {
-  void *handle = libgcc_s_handle;
+  void *handle = atomic_load(libgcc_s_handle);
   if (handle != NULL)
     {
-      libgcc_s_handle = NULL;
+      atomic_store(libgcc_s_handle, NULL);
       __libc_dlclose (handle);
     }
 }
@@ -94,7 +94,7 @@
 void
 _Unwind_Resume (struct _Unwind_Exception *exc)
 {
-  if (__glibc_unlikely (libgcc_s_handle == NULL))
+  if (__glibc_unlikely (atomic_load(libgcc_s_handle) == NULL))
     pthread_cancel_init ();
   else
     atomic_read_barrier ();
@@ -108,7 +108,7 @@
 _Unwind_Reason_Code
 __gcc_personality_v0 PERSONALITY_PROTO
 {
-  if (__glibc_unlikely (libgcc_s_handle == NULL))
+  if (__glibc_unlikely (atomic_load(libgcc_s_handle) == NULL))
     pthread_cancel_init ();
   else
     atomic_read_barrier ();
@@ -122,7 +122,7 @@
 _Unwind_ForcedUnwind (struct _Unwind_Exception *exc, _Unwind_Stop_Fn stop,
 		      void *stop_argument)
 {
-  if (__glibc_unlikely (libgcc_s_handle == NULL))
+  if (__glibc_unlikely (atomic_load(libgcc_s_handle) == NULL))
     pthread_cancel_init ();
   else
     atomic_read_barrier ();
@@ -137,7 +137,7 @@
 _Unwind_Word
 _Unwind_GetCFA (struct _Unwind_Context *context)
 {
-  if (__glibc_unlikely (libgcc_s_handle == NULL))
+  if (__glibc_unlikely (atomic_load(libgcc_s_handle) == NULL))
     pthread_cancel_init ();
   else
     atomic_read_barrier ();
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/check_pf.c glibc-2.21/sysdeps/unix/sysv/linux/check_pf.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/check_pf.c	2015-04-27 12:45:20.046096717 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/check_pf.c	2015-04-27 12:52:07.326795974 -0700
@@ -74,7 +74,7 @@
   if (atomic_increment_val (&nl_timestamp) == 0)
     atomic_increment (&nl_timestamp);
 
-  return nl_timestamp;
+  return atomic_load(nl_timestamp);
 }
 #endif
 
@@ -343,7 +343,7 @@
       *in6ailen = data->in6ailen;
       *in6ai = data->in6ai;
 
-      if (olddata != NULL && olddata->usecnt > 0
+      if (atomic_load(olddata) != NULL && atomic_load(olddata->usecnt) > 0
 	  && atomic_add_zero (&olddata->usecnt, -1))
 	free (olddata);
 
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/getsysstats.c glibc-2.21/sysdeps/unix/sysv/linux/getsysstats.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/getsysstats.c	2015-04-27 12:45:20.050094816 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/getsysstats.c	2015-04-27 12:52:07.326795974 -0700
@@ -129,7 +129,7 @@
   static time_t timestamp;
 
   time_t now = time (NULL);
-  time_t prev = timestamp;
+  time_t prev = atomic_load(timestamp);
   atomic_read_barrier ();
   if (now == prev && cached_result > -1)
     return cached_result;
@@ -219,7 +219,7 @@
  out:
   cached_result = result;
   atomic_write_barrier ();
-  timestamp = now;
+  atomic_store(timestamp, now);
 
   return result;
 }
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/malloc-sysdep.h glibc-2.21/sysdeps/unix/sysv/linux/malloc-sysdep.h
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/malloc-sysdep.h	2015-04-27 12:45:20.062089115 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/malloc-sysdep.h	2015-04-27 12:52:07.330794152 -0700
@@ -34,13 +34,14 @@
 check_may_shrink_heap (void)
 {
   static int may_shrink_heap = -1;
+  int tmp_shrink_heap = atomic_load(may_shrink_heap);
 
-  if (__builtin_expect (may_shrink_heap >= 0, 1))
-    return may_shrink_heap;
+  if (__builtin_expect (tmp_shrink_heap >= 0, 1))
+    return tmp_shrink_heap;
 
-  may_shrink_heap = __libc_enable_secure;
+  atomic_store(may_shrink_heap, __libc_enable_secure);
 
-  if (__builtin_expect (may_shrink_heap == 0, 1))
+  if (__builtin_expect (atomic_load(may_shrink_heap) == 0, 1))
     {
       int fd = open_not_cancel_2 ("/proc/sys/vm/overcommit_memory",
 				  O_RDONLY | O_CLOEXEC);
@@ -48,12 +49,12 @@
 	{
 	  char val;
 	  ssize_t n = read_not_cancel (fd, &val, 1);
-	  may_shrink_heap = n > 0 && val == '2';
+	  atomic_store(may_shrink_heap, n > 0 && val == '2');
 	  close_not_cancel_no_status (fd);
 	}
     }
 
-  return may_shrink_heap;
+  return atomic_load(may_shrink_heap);
 }
 
 #define HAVE_MREMAP 1
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_getaffinity.c glibc-2.21/sysdeps/unix/sysv/linux/pthread_getaffinity.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_getaffinity.c	2015-04-27 12:45:20.074083413 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/pthread_getaffinity.c	2015-04-27 13:10:18.146822951 -0700
@@ -32,7 +32,7 @@
   const struct pthread *pd = (const struct pthread *) th;
 
   INTERNAL_SYSCALL_DECL (err);
-  int res = INTERNAL_SYSCALL (sched_getaffinity, err, 3, pd->tid,
+  int res = INTERNAL_SYSCALL (sched_getaffinity, err, 3, atomic_load(pd->tid),
 			      MIN (INT_MAX, cpusetsize), cpuset);
   if (INTERNAL_SYSCALL_ERROR_P (res, err))
     return INTERNAL_SYSCALL_ERRNO (res, err);
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_getcpuclockid.c glibc-2.21/sysdeps/unix/sysv/linux/pthread_getcpuclockid.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_getcpuclockid.c	2015-04-27 12:45:20.074083413 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/pthread_getcpuclockid.c	2015-04-27 13:11:56.647274240 -0700
@@ -37,7 +37,7 @@
 
   /* The clockid_t value is a simple computation from the TID.  */
 
-  const clockid_t tidclock = MAKE_THREAD_CPUCLOCK (pd->tid, CPUCLOCK_SCHED);
+  const clockid_t tidclock = MAKE_THREAD_CPUCLOCK (atomic_load(pd->tid), CPUCLOCK_SCHED);
 
   *clockid = tidclock;
   return 0;
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_getname.c glibc-2.21/sysdeps/unix/sysv/linux/pthread_getname.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_getname.c	2015-04-27 12:45:20.074083413 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/pthread_getname.c	2015-04-27 13:06:39.827868285 -0700
@@ -46,7 +46,7 @@
 
 #define FMT "/proc/self/task/%u/comm"
   char fname[sizeof (FMT) + 8];
-  sprintf (fname, FMT, (unsigned int) pd->tid);
+  sprintf (fname, FMT, (unsigned int) atomic_load(pd->tid));
 
   int fd = open_not_cancel_2 (fname, O_RDONLY);
   if (fd == -1)
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_setaffinity.c glibc-2.21/sysdeps/unix/sysv/linux/pthread_setaffinity.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_setaffinity.c	2015-04-27 12:45:20.074083413 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/pthread_setaffinity.c	2015-04-27 13:37:43.924665434 -0700
@@ -63,7 +63,7 @@
 
   if (__glibc_unlikely (__kernel_cpumask_size == 0))
     {
-      res = __determine_cpumask_size (pd->tid);
+      res = __determine_cpumask_size (atomic_load(pd->tid));
       if (res != 0)
 	return res;
     }
@@ -76,7 +76,7 @@
 	 fulfilled.  */
       return EINVAL;
 
-  res = INTERNAL_SYSCALL (sched_setaffinity, err, 3, pd->tid, cpusetsize,
+  res = INTERNAL_SYSCALL (sched_setaffinity, err, 3, atomic_load(pd->tid), cpusetsize,
 			  cpuset);
 
 #ifdef RESET_VGETCPU_CACHE
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_setname.c glibc-2.21/sysdeps/unix/sysv/linux/pthread_setname.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/pthread_setname.c	2015-04-27 12:45:20.074083413 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/pthread_setname.c	2015-04-27 13:00:56.140472591 -0700
@@ -46,7 +46,7 @@
 
 #define FMT "/proc/self/task/%u/comm"
   char fname[sizeof (FMT) + 8];
-  sprintf (fname, FMT, (unsigned int) pd->tid);
+  sprintf (fname, FMT, (unsigned int) atomic_load(pd->tid));
 
   int fd = open_not_cancel_2 (fname, O_RDWR);
   if (fd == -1)
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/timer_routines.c glibc-2.21/sysdeps/unix/sysv/linux/timer_routines.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/timer_routines.c	2015-04-27 12:45:21.917216034 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/timer_routines.c	2015-04-27 13:38:59.749810380 -0700
@@ -181,7 +181,7 @@
   int res = pthread_create (&th, &attr, timer_helper_thread, NULL);
   if (res == 0)
     /* We managed to start the helper thread.  */
-    __helper_tid = ((struct pthread *) th)->tid;
+    __helper_tid = atomic_load(((struct pthread *) th)->tid);
 
   /* Restore the signal mask.  */
   INTERNAL_SYSCALL (rt_sigprocmask, err, 4, SIG_SETMASK, &oss, NULL,
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/cancellation.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/cancellation.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/cancellation.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/cancellation.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,117 +0,0 @@
-/* Copyright (C) 2009-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2009.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <tcb-offsets.h>
-#include <kernel-features.h>
-#include "lowlevellock.h"
-
-#if IS_IN (libpthread)
-# if defined SHARED && !defined NO_HIDDEN
-#  define __pthread_unwind __GI___pthread_unwind
-# endif
-#else
-# ifndef SHARED
-	.weak __pthread_unwind
-# endif
-#endif
-
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-# define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl	$(FUTEX_WAIT | FUTEX_PRIVATE_FLAG), reg
-#else
-# if FUTEX_WAIT == 0
-#  define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl	%fs:PRIVATE_FUTEX, reg
-# else
-#  define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT, reg
-# endif
-#endif
-
-/* It is crucial that the functions in this file don't modify registers
-   other than %rax and %r11.  The syscall wrapper code depends on this
-   because it doesn't explicitly save the other registers which hold
-   relevant values.  */
-	.text
-
-	.hidden __pthread_enable_asynccancel
-ENTRY(__pthread_enable_asynccancel)
-	movl	%fs:CANCELHANDLING, %eax
-2:	movl	%eax, %r11d
-	orl	$TCB_CANCELTYPE_BITMASK, %r11d
-	cmpl	%eax, %r11d
-	je	1f
-
-	lock
-	cmpxchgl %r11d, %fs:CANCELHANDLING
-	jnz	2b
-
-	andl	$(TCB_CANCELSTATE_BITMASK|TCB_CANCELTYPE_BITMASK|TCB_CANCELED_BITMASK|TCB_EXITING_BITMASK|TCB_CANCEL_RESTMASK|TCB_TERMINATED_BITMASK), %r11d
-	cmpl	$(TCB_CANCELTYPE_BITMASK|TCB_CANCELED_BITMASK), %r11d
-	je	3f
-
-1:	ret
-
-3:	subq	$8, %rsp
-	cfi_adjust_cfa_offset(8)
-	LP_OP(mov) $TCB_PTHREAD_CANCELED, %fs:RESULT
-	lock
-	orl	$TCB_EXITING_BITMASK, %fs:CANCELHANDLING
-	mov	%fs:CLEANUP_JMP_BUF, %RDI_LP
-#ifdef SHARED
-	call	__pthread_unwind@PLT
-#else
-	call	__pthread_unwind
-#endif
-	hlt
-END(__pthread_enable_asynccancel)
-
-
-	.hidden __pthread_disable_asynccancel
-ENTRY(__pthread_disable_asynccancel)
-	testl	$TCB_CANCELTYPE_BITMASK, %edi
-	jnz	1f
-
-	movl	%fs:CANCELHANDLING, %eax
-2:	movl	%eax, %r11d
-	andl	$~TCB_CANCELTYPE_BITMASK, %r11d
-	lock
-	cmpxchgl %r11d, %fs:CANCELHANDLING
-	jnz	2b
-
-	movl	%r11d, %eax
-3:	andl	$(TCB_CANCELING_BITMASK|TCB_CANCELED_BITMASK), %eax
-	cmpl	$TCB_CANCELING_BITMASK, %eax
-	je	4f
-1:	ret
-
-	/* Performance doesn't matter in this loop.  We will
-	   delay until the thread is canceled.  And we will unlikely
-	   enter the loop twice.  */
-4:	mov	%fs:0, %RDI_LP
-	movl	$__NR_futex, %eax
-	xorq	%r10, %r10
-	addq	$CANCELHANDLING, %rdi
-	LOAD_PRIVATE_FUTEX_WAIT (%esi)
-	syscall
-	movl	%fs:CANCELHANDLING, %eax
-	jmp	3b
-END(__pthread_disable_asynccancel)
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/libc-cancellation.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/libc-cancellation.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/libc-cancellation.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/libc-cancellation.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,21 +0,0 @@
-/* Copyright (C) 2009-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2009.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#define __pthread_enable_asynccancel __libc_enable_asynccancel
-#define __pthread_disable_asynccancel __libc_disable_asynccancel
-#include "cancellation.S"
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/libc-lowlevellock.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/libc-lowlevellock.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/libc-lowlevellock.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/libc-lowlevellock.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include "lowlevellock.S"
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/librt-cancellation.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/librt-cancellation.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/librt-cancellation.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/librt-cancellation.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,21 +0,0 @@
-/* Copyright (C) 2009-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2009.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#define __pthread_enable_asynccancel __librt_enable_asynccancel
-#define __pthread_disable_asynccancel __librt_disable_asynccancel
-#include "cancellation.S"
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/lowlevellock.h glibc-2.21/sysdeps/unix/sysv/linux/x86_64/lowlevellock.h
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/lowlevellock.h	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/lowlevellock.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,355 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#ifndef _LOWLEVELLOCK_H
-#define _LOWLEVELLOCK_H	1
-
-#include <stap-probe.h>
-
-#ifndef __ASSEMBLER__
-# include <time.h>
-# include <sys/param.h>
-# include <bits/pthreadtypes.h>
-# include <kernel-features.h>
-# include <tcb-offsets.h>
-
-# ifndef LOCK_INSTR
-#  ifdef UP
-#   define LOCK_INSTR	/* nothing */
-#  else
-#   define LOCK_INSTR "lock;"
-#  endif
-# endif
-#else
-# ifndef LOCK
-#  ifdef UP
-#   define LOCK
-#  else
-#   define LOCK lock
-#  endif
-# endif
-#endif
-
-#include <lowlevellock-futex.h>
-
-/* XXX Remove when no assembler code uses futexes anymore.  */
-#define SYS_futex		__NR_futex
-
-#ifndef __ASSEMBLER__
-
-/* Initializer for lock.  */
-#define LLL_LOCK_INITIALIZER		(0)
-#define LLL_LOCK_INITIALIZER_LOCKED	(1)
-#define LLL_LOCK_INITIALIZER_WAITERS	(2)
-
-/* Delay in spinlock loop.  */
-#define BUSY_WAIT_NOP	  asm ("rep; nop")
-
-
-/* NB: in the lll_trylock macro we simply return the value in %eax
-   after the cmpxchg instruction.  In case the operation succeded this
-   value is zero.  In case the operation failed, the cmpxchg instruction
-   has loaded the current value of the memory work which is guaranteed
-   to be nonzero.  */
-#if !IS_IN (libc) || defined UP
-# define __lll_trylock_asm LOCK_INSTR "cmpxchgl %2, %1"
-#else
-# define __lll_trylock_asm "cmpl $0, __libc_multiple_threads(%%rip)\n\t"      \
-			   "je 0f\n\t"					      \
-			   "lock; cmpxchgl %2, %1\n\t"			      \
-			   "jmp 1f\n\t"					      \
-			   "0:\tcmpxchgl %2, %1\n\t"			      \
-			   "1:"
-#endif
-
-#define lll_trylock(futex) \
-  ({ int ret;								      \
-     __asm __volatile (__lll_trylock_asm				      \
-		       : "=a" (ret), "=m" (futex)			      \
-		       : "r" (LLL_LOCK_INITIALIZER_LOCKED), "m" (futex),      \
-			 "0" (LLL_LOCK_INITIALIZER)			      \
-		       : "memory");					      \
-     ret; })
-
-#define lll_cond_trylock(futex) \
-  ({ int ret;								      \
-     __asm __volatile (LOCK_INSTR "cmpxchgl %2, %1"			      \
-		       : "=a" (ret), "=m" (futex)			      \
-		       : "r" (LLL_LOCK_INITIALIZER_WAITERS),		      \
-			 "m" (futex), "0" (LLL_LOCK_INITIALIZER)	      \
-		       : "memory");					      \
-     ret; })
-
-#if !IS_IN (libc) || defined UP
-# define __lll_lock_asm_start LOCK_INSTR "cmpxchgl %4, %2\n\t"		      \
-			      "jz 24f\n\t"
-#else
-# define __lll_lock_asm_start "cmpl $0, __libc_multiple_threads(%%rip)\n\t"   \
-			      "je 0f\n\t"				      \
-			      "lock; cmpxchgl %4, %2\n\t"		      \
-			      "jnz 1f\n\t"				      \
-			      "jmp 24f\n"				      \
-			      "0:\tcmpxchgl %4, %2\n\t"			      \
-			      "jz 24f\n\t"
-#endif
-
-#define lll_lock(futex, private) \
-  (void)								      \
-    ({ int ignore1, ignore2, ignore3;					      \
-       if (__builtin_constant_p (private) && (private) == LLL_PRIVATE)	      \
-	 __asm __volatile (__lll_lock_asm_start				      \
-			   "1:\tlea %2, %%" RDI_LP "\n"			      \
-			   "2:\tsub $128, %%" RSP_LP "\n"		      \
-			   ".cfi_adjust_cfa_offset 128\n"		      \
-			   "3:\tcallq __lll_lock_wait_private\n"	      \
-			   "4:\tadd $128, %%" RSP_LP "\n"		      \
-			   ".cfi_adjust_cfa_offset -128\n"		      \
-			   "24:"					      \
-			   : "=S" (ignore1), "=&D" (ignore2), "=m" (futex),   \
-			     "=a" (ignore3)				      \
-			   : "0" (1), "m" (futex), "3" (0)		      \
-			   : "cx", "r11", "cc", "memory");		      \
-       else								      \
-	 __asm __volatile (__lll_lock_asm_start				      \
-			   "1:\tlea %2, %%" RDI_LP "\n"			      \
-			   "2:\tsub $128, %%" RSP_LP "\n"		      \
-			   ".cfi_adjust_cfa_offset 128\n"		      \
-			   "3:\tcallq __lll_lock_wait\n"		      \
-			   "4:\tadd $128, %%" RSP_LP "\n"		      \
-			   ".cfi_adjust_cfa_offset -128\n"		      \
-			   "24:"					      \
-			   : "=S" (ignore1), "=D" (ignore2), "=m" (futex),    \
-			     "=a" (ignore3)				      \
-			   : "1" (1), "m" (futex), "3" (0), "0" (private)     \
-			   : "cx", "r11", "cc", "memory");		      \
-    })									      \
-
-#define lll_robust_lock(futex, id, private) \
-  ({ int result, ignore1, ignore2;					      \
-    __asm __volatile (LOCK_INSTR "cmpxchgl %4, %2\n\t"			      \
-		      "jz 24f\n"					      \
-		      "1:\tlea %2, %%" RDI_LP "\n"			      \
-		      "2:\tsub $128, %%" RSP_LP "\n"			      \
-		      ".cfi_adjust_cfa_offset 128\n"			      \
-		      "3:\tcallq __lll_robust_lock_wait\n"		      \
-		      "4:\tadd $128, %%" RSP_LP "\n"			      \
-		      ".cfi_adjust_cfa_offset -128\n"			      \
-		      "24:"						      \
-		      : "=S" (ignore1), "=D" (ignore2), "=m" (futex),	      \
-			"=a" (result)					      \
-		      : "1" (id), "m" (futex), "3" (0), "0" (private)	      \
-		      : "cx", "r11", "cc", "memory");			      \
-    result; })
-
-#define lll_cond_lock(futex, private) \
-  (void)								      \
-    ({ int ignore1, ignore2, ignore3;					      \
-       __asm __volatile (LOCK_INSTR "cmpxchgl %4, %2\n\t"		      \
-			 "jz 24f\n"					      \
-			 "1:\tlea %2, %%" RDI_LP "\n"			      \
-			 "2:\tsub $128, %%" RSP_LP "\n"			      \
-			 ".cfi_adjust_cfa_offset 128\n"			      \
-			 "3:\tcallq __lll_lock_wait\n"			      \
-			 "4:\tadd $128, %%" RSP_LP "\n"			      \
-			 ".cfi_adjust_cfa_offset -128\n"		      \
-			 "24:"						      \
-			 : "=S" (ignore1), "=D" (ignore2), "=m" (futex),      \
-			   "=a" (ignore3)				      \
-			 : "1" (2), "m" (futex), "3" (0), "0" (private)	      \
-			 : "cx", "r11", "cc", "memory");		      \
-    })
-
-#define lll_robust_cond_lock(futex, id, private) \
-  ({ int result, ignore1, ignore2;					      \
-    __asm __volatile (LOCK_INSTR "cmpxchgl %4, %2\n\t"			      \
-		      "jz 24f\n"					      \
-		      "1:\tlea %2, %%" RDI_LP "\n"			      \
-		      "2:\tsub $128, %%" RSP_LP "\n"			      \
-		      ".cfi_adjust_cfa_offset 128\n"			      \
-		      "3:\tcallq __lll_robust_lock_wait\n"		      \
-		      "4:\tadd $128, %%" RSP_LP "\n"			      \
-		      ".cfi_adjust_cfa_offset -128\n"			      \
-		      "24:"						      \
-		      : "=S" (ignore1), "=D" (ignore2), "=m" (futex),	      \
-			"=a" (result)					      \
-		      : "1" (id | FUTEX_WAITERS), "m" (futex), "3" (0),	      \
-			"0" (private)					      \
-		      : "cx", "r11", "cc", "memory");			      \
-    result; })
-
-#define lll_timedlock(futex, timeout, private) \
-  ({ int result, ignore1, ignore2, ignore3;				      \
-     __asm __volatile (LOCK_INSTR "cmpxchgl %1, %4\n\t"			      \
-		       "jz 24f\n"					      \
-		       "1:\tlea %4, %%" RDI_LP "\n"			      \
-		       "0:\tmov %8, %%" RDX_LP "\n"			      \
-		       "2:\tsub $128, %%" RSP_LP "\n"			      \
-		       ".cfi_adjust_cfa_offset 128\n"			      \
-		       "3:\tcallq __lll_timedlock_wait\n"		      \
-		       "4:\tadd $128, %%" RSP_LP "\n"			      \
-		       ".cfi_adjust_cfa_offset -128\n"			      \
-		       "24:"						      \
-		       : "=a" (result), "=D" (ignore1), "=S" (ignore2),	      \
-			 "=&d" (ignore3), "=m" (futex)			      \
-		       : "0" (0), "1" (1), "m" (futex), "m" (timeout),	      \
-			 "2" (private)					      \
-		       : "memory", "cx", "cc", "r10", "r11");		      \
-     result; })
-
-extern int __lll_timedlock_elision (int *futex, short *adapt_count,
-					 const struct timespec *timeout,
-					 int private) attribute_hidden;
-
-#define lll_timedlock_elision(futex, adapt_count, timeout, private)	\
-  __lll_timedlock_elision(&(futex), &(adapt_count), timeout, private)
-
-#define lll_robust_timedlock(futex, timeout, id, private) \
-  ({ int result, ignore1, ignore2, ignore3;				      \
-     __asm __volatile (LOCK_INSTR "cmpxchgl %1, %4\n\t"			      \
-		       "jz 24f\n\t"					      \
-		       "1:\tlea %4, %%" RDI_LP "\n"			      \
-		       "0:\tmov %8, %%" RDX_LP "\n"			      \
-		       "2:\tsub $128, %%" RSP_LP "\n"			      \
-		       ".cfi_adjust_cfa_offset 128\n"			      \
-		       "3:\tcallq __lll_robust_timedlock_wait\n"	      \
-		       "4:\tadd $128, %%" RSP_LP "\n"			      \
-		       ".cfi_adjust_cfa_offset -128\n"			      \
-		       "24:"						      \
-		       : "=a" (result), "=D" (ignore1), "=S" (ignore2),       \
-			 "=&d" (ignore3), "=m" (futex)			      \
-		       : "0" (0), "1" (id), "m" (futex), "m" (timeout),	      \
-			 "2" (private)					      \
-		       : "memory", "cx", "cc", "r10", "r11");		      \
-     result; })
-
-#if !IS_IN (libc) || defined UP
-# define __lll_unlock_asm_start LOCK_INSTR "decl %0\n\t"		      \
-				"je 24f\n\t"
-#else
-# define __lll_unlock_asm_start "cmpl $0, __libc_multiple_threads(%%rip)\n\t" \
-				"je 0f\n\t"				      \
-				"lock; decl %0\n\t"			      \
-				"jne 1f\n\t"				      \
-				"jmp 24f\n\t"				      \
-				"0:\tdecl %0\n\t"			      \
-				"je 24f\n\t"
-#endif
-
-#define lll_unlock(futex, private) \
-  (void)								      \
-    ({ int ignore;							      \
-       if (__builtin_constant_p (private) && (private) == LLL_PRIVATE)	      \
-	 __asm __volatile (__lll_unlock_asm_start			      \
-			   "1:\tlea %0, %%" RDI_LP "\n"			      \
-			   "2:\tsub $128, %%" RSP_LP "\n"		      \
-			   ".cfi_adjust_cfa_offset 128\n"		      \
-			   "3:\tcallq __lll_unlock_wake_private\n"	      \
-			   "4:\tadd $128, %%" RSP_LP "\n"		      \
-			   ".cfi_adjust_cfa_offset -128\n"		      \
-			   "24:"					      \
-			   : "=m" (futex), "=&D" (ignore)		      \
-			   : "m" (futex)				      \
-			   : "ax", "cx", "r11", "cc", "memory");	      \
-       else								      \
-	 __asm __volatile (__lll_unlock_asm_start			      \
-			   "1:\tlea %0, %%" RDI_LP "\n"			      \
-			   "2:\tsub $128, %%" RSP_LP "\n"		      \
-			   ".cfi_adjust_cfa_offset 128\n"		      \
-			   "3:\tcallq __lll_unlock_wake\n"		      \
-			   "4:\tadd $128, %%" RSP_LP "\n"		      \
-			   ".cfi_adjust_cfa_offset -128\n"		      \
-			   "24:"					      \
-			   : "=m" (futex), "=&D" (ignore)		      \
-			   : "m" (futex), "S" (private)			      \
-			   : "ax", "cx", "r11", "cc", "memory");	      \
-    })
-
-#define lll_robust_unlock(futex, private) \
-  do									      \
-    {									      \
-      int ignore;							      \
-      __asm __volatile (LOCK_INSTR "andl %2, %0\n\t"			      \
-			"je 24f\n\t"					      \
-			"1:\tlea %0, %%" RDI_LP "\n"			      \
-			"2:\tsub $128, %%" RSP_LP "\n"			      \
-			".cfi_adjust_cfa_offset 128\n"			      \
-			"3:\tcallq __lll_unlock_wake\n"			      \
-			"4:\tadd $128, %%" RSP_LP "\n"			      \
-			".cfi_adjust_cfa_offset -128\n"			      \
-			"24:"						      \
-			: "=m" (futex), "=&D" (ignore)			      \
-			: "i" (FUTEX_WAITERS), "m" (futex),		      \
-			  "S" (private)					      \
-			: "ax", "cx", "r11", "cc", "memory");		      \
-    }									      \
-  while (0)
-
-#define lll_islocked(futex) \
-  (futex != LLL_LOCK_INITIALIZER)
-
-
-/* The kernel notifies a process which uses CLONE_CHILD_CLEARTID via futex
-   wake-up when the clone terminates.  The memory location contains the
-   thread ID while the clone is running and is reset to zero by the kernel
-   afterwards.  The kernel up to version 3.16.3 does not use the private futex
-   operations for futex wake-up when the clone terminates.  */
-#define lll_wait_tid(tid) \
-  do {					\
-    __typeof (tid) __tid;		\
-    while ((__tid = (tid)) != 0)	\
-      lll_futex_wait (&(tid), __tid, LLL_SHARED);\
-  } while (0)
-
-extern int __lll_timedwait_tid (int *, const struct timespec *)
-     attribute_hidden;
-
-/* As lll_wait_tid, but with a timeout.  If the timeout occurs then return
-   ETIMEDOUT.  If ABSTIME is invalid, return EINVAL.
-   XXX Note that this differs from the generic version in that we do the
-   error checking here and not in __lll_timedwait_tid.  */
-#define lll_timedwait_tid(tid, abstime) \
-  ({									      \
-    int __result = 0;							      \
-    if ((tid) != 0)							      \
-      {									      \
-	if ((abstime)->tv_nsec < 0 || (abstime)->tv_nsec >= 1000000000)	      \
-	  __result = EINVAL;						      \
-	else								      \
-	  __result = __lll_timedwait_tid (&(tid), (abstime));		      \
-      }									      \
-    __result; })
-
-extern int __lll_lock_elision (int *futex, short *adapt_count, int private)
-  attribute_hidden;
-
-extern int __lll_unlock_elision (int *lock, int private)
-  attribute_hidden;
-
-extern int __lll_trylock_elision (int *lock, short *adapt_count)
-  attribute_hidden;
-
-#define lll_lock_elision(futex, adapt_count, private) \
-  __lll_lock_elision (&(futex), &(adapt_count), private)
-#define lll_unlock_elision(futex, private) \
-  __lll_unlock_elision (&(futex), private)
-#define lll_trylock_elision(futex, adapt_count) \
-  __lll_trylock_elision (&(futex), &(adapt_count))
-
-#endif  /* !__ASSEMBLER__ */
-
-#endif	/* lowlevellock.h */
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,462 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <pthread-errnos.h>
-#include <kernel-features.h>
-#include <lowlevellock.h>
-
-#include <stap-probe.h>
-
-	.text
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-# define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl	$(FUTEX_WAIT | FUTEX_PRIVATE_FLAG), reg
-# define LOAD_PRIVATE_FUTEX_WAKE(reg) \
-	movl	$(FUTEX_WAKE | FUTEX_PRIVATE_FLAG), reg
-# define LOAD_FUTEX_WAIT(reg) \
-	xorl	$(FUTEX_WAIT | FUTEX_PRIVATE_FLAG), reg
-# define LOAD_FUTEX_WAIT_ABS(reg) \
-	xorl	$(FUTEX_WAIT_BITSET | FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME), reg
-# define LOAD_FUTEX_WAKE(reg) \
-	xorl	$(FUTEX_WAKE | FUTEX_PRIVATE_FLAG), reg
-#else
-# if FUTEX_WAIT == 0
-#  define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl    %fs:PRIVATE_FUTEX, reg
-# else
-#  define LOAD_PRIVATE_FUTEX_WAIT(reg) \
-	movl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT, reg
-# endif
-# define LOAD_PRIVATE_FUTEX_WAKE(reg) \
-	movl    %fs:PRIVATE_FUTEX, reg ; \
-	orl     $FUTEX_WAKE, reg
-# if FUTEX_WAIT == 0
-#  define LOAD_FUTEX_WAIT(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg
-# else
-#  define LOAD_FUTEX_WAIT(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT, reg
-# endif
-# define LOAD_FUTEX_WAIT_ABS(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT_BITSET | FUTEX_CLOCK_REALTIME, reg
-# define LOAD_FUTEX_WAKE(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAKE, reg
-#endif
-
-
-	.globl	__lll_lock_wait_private
-	.type	__lll_lock_wait_private,@function
-	.hidden	__lll_lock_wait_private
-	.align	16
-__lll_lock_wait_private:
-	cfi_startproc
-	pushq	%r10
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r10, -16)
-	cfi_offset(%rdx, -24)
-	xorq	%r10, %r10	/* No timeout.  */
-	movl	$2, %edx
-	LOAD_PRIVATE_FUTEX_WAIT (%esi)
-
-	cmpl	%edx, %eax	/* NB:	 %edx == 2 */
-	jne	2f
-
-1:	LIBC_PROBE (lll_lock_wait_private, 1, %rdi)
-	movl	$SYS_futex, %eax
-	syscall
-
-2:	movl	%edx, %eax
-	xchgl	%eax, (%rdi)	/* NB:	 lock is implied */
-
-	testl	%eax, %eax
-	jnz	1b
-
-	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%r10
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r10)
-	retq
-	cfi_endproc
-	.size	__lll_lock_wait_private,.-__lll_lock_wait_private
-
-#if !IS_IN (libc)
-	.globl	__lll_lock_wait
-	.type	__lll_lock_wait,@function
-	.hidden	__lll_lock_wait
-	.align	16
-__lll_lock_wait:
-	cfi_startproc
-	pushq	%r10
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r10, -16)
-	cfi_offset(%rdx, -24)
-	xorq	%r10, %r10	/* No timeout.  */
-	movl	$2, %edx
-	LOAD_FUTEX_WAIT (%esi)
-
-	cmpl	%edx, %eax	/* NB:	 %edx == 2 */
-	jne	2f
-
-1:	LIBC_PROBE (lll_lock_wait, 2, %rdi, %rsi)
-	movl	$SYS_futex, %eax
-	syscall
-
-2:	movl	%edx, %eax
-	xchgl	%eax, (%rdi)	/* NB:	 lock is implied */
-
-	testl	%eax, %eax
-	jnz	1b
-
-	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%r10
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r10)
-	retq
-	cfi_endproc
-	.size	__lll_lock_wait,.-__lll_lock_wait
-
-	/*      %rdi: futex
-		%rsi: flags
-		%rdx: timeout
-		%eax: futex value
-	*/
-	.globl	__lll_timedlock_wait
-	.type	__lll_timedlock_wait,@function
-	.hidden	__lll_timedlock_wait
-	.align	16
-__lll_timedlock_wait:
-	cfi_startproc
-# ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-# endif
-
-	cmpq	$0, (%rdx)
-	js	5f
-
-	pushq	%r9
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r9, 0)
-
-	movq	%rdx, %r10
-	movl	$0xffffffff, %r9d
-	LOAD_FUTEX_WAIT_ABS (%esi)
-
-	movl	$2, %edx
-	cmpl	%edx, %eax
-	jne	2f
-
-1:	movl	$SYS_futex, %eax
-	movl	$2, %edx
-	syscall
-
-2:	xchgl	%edx, (%rdi)	/* NB:   lock is implied */
-
-	testl	%edx, %edx
-	jz	3f
-
-	cmpl	$-ETIMEDOUT, %eax
-	je	4f
-	cmpl	$-EINVAL, %eax
-	jne	1b
-4:	movl	%eax, %edx
-	negl	%edx
-
-3:	movl	%edx, %eax
-	popq	%r9
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-	retq
-
-5:	movl	$ETIMEDOUT, %eax
-	retq
-
-# ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-.Lreltmo:
-	/* Check for a valid timeout value.  */
-	cmpq	$1000000000, 8(%rdx)
-	jae	3f
-
-	pushq	%r8
-	cfi_adjust_cfa_offset(8)
-	pushq	%r9
-	cfi_adjust_cfa_offset(8)
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	pushq	%r14
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r8, -16)
-	cfi_offset(%r9, -24)
-	cfi_offset(%r12, -32)
-	cfi_offset(%r13, -40)
-	cfi_offset(%r14, -48)
-	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-
-	/* Stack frame for the timespec and timeval structs.  */
-	subq	$24, %rsp
-	cfi_adjust_cfa_offset(24)
-
-	movq	%rdi, %r12
-	movq	%rdx, %r13
-
-	movl	$2, %edx
-	xchgl	%edx, (%r12)
-
-	testl	%edx, %edx
-	je	6f
-
-1:
-	/* Get current time.  */
-	movq	%rsp, %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rdi
-	movq	8(%r13), %rsi
-	subq	(%rsp), %rdi
-	subq	%rax, %rsi
-	jns	4f
-	addq	$1000000000, %rsi
-	decq	%rdi
-4:	testq	%rdi, %rdi
-	js	2f		/* Time is already up.  */
-
-	/* Store relative timeout.  */
-	movq	%rdi, (%rsp)
-	movq	%rsi, 8(%rsp)
-
-	/* Futex call.  */
-	movl	$2, %edx
-	movl	$1, %eax
-	movq	%rsp, %r10
-	movl	24(%rsp), %esi
-	LOAD_FUTEX_WAIT (%esi)
-	movq	%r12, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-
-	/* NB: %edx == 2 */
-	xchgl	%edx, (%r12)
-
-	testl	%edx, %edx
-	je	6f
-
-	cmpl	$-ETIMEDOUT, %eax
-	jne	1b
-2:	movl	$ETIMEDOUT, %edx
-
-6:	addq	$32, %rsp
-	cfi_adjust_cfa_offset(-32)
-	popq	%r14
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r14)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	popq	%r9
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-	popq	%r8
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r8)
-	movl	%edx, %eax
-	retq
-
-3:	movl	$EINVAL, %eax
-	retq
-# endif
-	cfi_endproc
-	.size	__lll_timedlock_wait,.-__lll_timedlock_wait
-#endif
-
-
-	.globl	__lll_unlock_wake_private
-	.type	__lll_unlock_wake_private,@function
-	.hidden	__lll_unlock_wake_private
-	.align	16
-__lll_unlock_wake_private:
-	cfi_startproc
-	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%rsi, -16)
-	cfi_offset(%rdx, -24)
-
-	movl	$0, (%rdi)
-	LOAD_PRIVATE_FUTEX_WAKE (%esi)
-	movl	$1, %edx	/* Wake one thread.  */
-	movl	$SYS_futex, %eax
-	syscall
-
-	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%rsi
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rsi)
-	retq
-	cfi_endproc
-	.size	__lll_unlock_wake_private,.-__lll_unlock_wake_private
-
-#if !IS_IN (libc)
-	.globl	__lll_unlock_wake
-	.type	__lll_unlock_wake,@function
-	.hidden	__lll_unlock_wake
-	.align	16
-__lll_unlock_wake:
-	cfi_startproc
-	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%rsi, -16)
-	cfi_offset(%rdx, -24)
-
-	movl	$0, (%rdi)
-	LOAD_FUTEX_WAKE (%esi)
-	movl	$1, %edx	/* Wake one thread.  */
-	movl	$SYS_futex, %eax
-	syscall
-
-	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%rsi
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rsi)
-	retq
-	cfi_endproc
-	.size	__lll_unlock_wake,.-__lll_unlock_wake
-
-	.globl	__lll_timedwait_tid
-	.type	__lll_timedwait_tid,@function
-	.hidden	__lll_timedwait_tid
-	.align	16
-__lll_timedwait_tid:
-	cfi_startproc
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r12, -16)
-	cfi_offset(%r13, -24)
-
-	movq	%rdi, %r12
-	movq	%rsi, %r13
-
-	subq	$16, %rsp
-	cfi_adjust_cfa_offset(16)
-
-	/* Get current time.  */
-2:	movq	%rsp, %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rdi
-	movq	8(%r13), %rsi
-	subq	(%rsp), %rdi
-	subq	%rax, %rsi
-	jns	5f
-	addq	$1000000000, %rsi
-	decq	%rdi
-5:	testq	%rdi, %rdi
-	js	6f		/* Time is already up.  */
-
-	movq	%rdi, (%rsp)	/* Store relative timeout.  */
-	movq	%rsi, 8(%rsp)
-
-	movl	(%r12), %edx
-	testl	%edx, %edx
-	jz	4f
-
-	movq	%rsp, %r10
-	/* XXX The kernel so far uses global futex for the wakeup at
-	   all times.  */
-#if FUTEX_WAIT == 0
-	xorl	%esi, %esi
-#else
-	movl	$FUTEX_WAIT, %esi
-#endif
-	movq	%r12, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-
-	cmpl	$0, (%rdi)
-	jne	1f
-4:	xorl	%eax, %eax
-
-8:	addq	$16, %rsp
-	cfi_adjust_cfa_offset(-16)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	retq
-
-	cfi_adjust_cfa_offset(32)
-1:	cmpq	$-ETIMEDOUT, %rax
-	jne	2b
-
-6:	movl	$ETIMEDOUT, %eax
-	jmp	8b
-	cfi_endproc
-	.size	__lll_timedwait_tid,.-__lll_timedwait_tid
-#endif
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,306 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <pthread-errnos.h>
-#include <lowlevellock.h>
-#include <lowlevelrobustlock.h>
-#include <kernel-features.h>
-
-	.text
-
-#define FUTEX_WAITERS		0x80000000
-#define FUTEX_OWNER_DIED	0x40000000
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-# define LOAD_FUTEX_WAIT(reg) \
-	xorl	$(FUTEX_WAIT | FUTEX_PRIVATE_FLAG), reg
-# define LOAD_FUTEX_WAIT_ABS(reg) \
-	xorl	$(FUTEX_WAIT_BITSET | FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME), reg
-#else
-# if FUTEX_WAIT == 0
-#  define LOAD_FUTEX_WAIT(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg
-# else
-#  define LOAD_FUTEX_WAIT(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT, reg
-# endif
-# define LOAD_FUTEX_WAIT_ABS(reg) \
-	xorl	$FUTEX_PRIVATE_FLAG, reg ; \
-	andl	%fs:PRIVATE_FUTEX, reg ; \
-	orl	$FUTEX_WAIT_BITSET | FUTEX_CLOCK_REALTIME, reg
-#endif
-
-
-	.globl	__lll_robust_lock_wait
-	.type	__lll_robust_lock_wait,@function
-	.hidden	__lll_robust_lock_wait
-	.align	16
-__lll_robust_lock_wait:
-	cfi_startproc
-	pushq	%r10
-	cfi_adjust_cfa_offset(8)
-	pushq	%rdx
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r10, -16)
-	cfi_offset(%rdx, -24)
-
-	xorq	%r10, %r10	/* No timeout.  */
-	LOAD_FUTEX_WAIT (%esi)
-
-4:	movl	%eax, %edx
-	orl	$FUTEX_WAITERS, %edx
-
-	testl	$FUTEX_OWNER_DIED, %eax
-	jnz	3f
-
-	cmpl	%edx, %eax
-	je	1f
-
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	jnz	2f
-
-1:	movl	$SYS_futex, %eax
-	syscall
-
-	movl	(%rdi), %eax
-
-2:	testl	%eax, %eax
-	jne	4b
-
-	movl	%fs:TID, %edx
-	orl	$FUTEX_WAITERS, %edx
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	jnz	4b
-	/* NB:	 %rax == 0 */
-
-3:	popq	%rdx
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%rdx)
-	popq	%r10
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r10)
-	retq
-	cfi_endproc
-	.size	__lll_robust_lock_wait,.-__lll_robust_lock_wait
-
-
-	.globl	__lll_robust_timedlock_wait
-	.type	__lll_robust_timedlock_wait,@function
-	.hidden	__lll_robust_timedlock_wait
-	.align	16
-__lll_robust_timedlock_wait:
-	cfi_startproc
-# ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-# endif
-
-	cmpq	$0, (%rdx)
-	js	7f
-
-	pushq	%r9
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r9, 0)
-	movq	%rdx, %r10
-	movl	$0xffffffff, %r9d
-	LOAD_FUTEX_WAIT_ABS (%esi)
-
-1:	testl	$FUTEX_OWNER_DIED, %eax
-	jnz	3f
-
-	movl	%eax, %edx
-	orl	$FUTEX_WAITERS, %edx
-
-	cmpl	%eax, %edx
-	je	5f
-
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	movq	$0, %rcx	/* Must use mov to avoid changing cc.  */
-	jnz	6f
-
-5:	movl	$SYS_futex, %eax
-	syscall
-	movl	%eax, %ecx
-
-	movl	(%rdi), %eax
-
-6:	testl	%eax, %eax
-	jne	2f
-
-	movl	%fs:TID, %edx
-	orl	$FUTEX_WAITERS, %edx
-	LOCK
-	cmpxchgl %edx, (%rdi)
-	jnz	2f
-
-3:	popq	%r9
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-	retq
-
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r9, 0)
-	/* Check whether the time expired.  */
-2:	cmpl	$-ETIMEDOUT, %ecx
-	je	4f
-	cmpl	$-EINVAL, %ecx
-	jne	1b
-
-4:	movl	%ecx, %eax
-	negl	%eax
-	jmp	3b
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-
-7:	movl	$ETIMEDOUT, %eax
-	retq
-
-
-# ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-.Lreltmo:
-	/* Check for a valid timeout value.  */
-	cmpq	$1000000000, 8(%rdx)
-	jae	3f
-
-	pushq	%r8
-	cfi_adjust_cfa_offset(8)
-	pushq	%r9
-	cfi_adjust_cfa_offset(8)
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_offset(%r8, -16)
-	cfi_offset(%r9, -24)
-	cfi_offset(%r12, -32)
-	cfi_offset(%r13, -40)
-	pushq	%rsi
-	cfi_adjust_cfa_offset(8)
-
-	/* Stack frame for the timespec and timeval structs.  */
-	subq	$32, %rsp
-	cfi_adjust_cfa_offset(32)
-
-	movq	%rdi, %r12
-	movq	%rdx, %r13
-
-1:	movq	%rax, 16(%rsp)
-
-	/* Get current time.  */
-	movq	%rsp, %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	8(%rsp), %rax
-	movl	$1000, %edi
-	mul	%rdi		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rdi
-	movq	8(%r13), %rsi
-	subq	(%rsp), %rdi
-	subq	%rax, %rsi
-	jns	4f
-	addq	$1000000000, %rsi
-	decq	%rdi
-4:	testq	%rdi, %rdi
-	js	8f		/* Time is already up.  */
-
-	/* Futex call.  */
-	movq	%rdi, (%rsp)	/* Store relative timeout.  */
-	movq	%rsi, 8(%rsp)
-
-	movq	16(%rsp), %rdx
-	movl	%edx, %eax
-	orl	$FUTEX_WAITERS, %edx
-
-	testl	$FUTEX_OWNER_DIED, %eax
-	jnz	6f
-
-	cmpl	%eax, %edx
-	je	2f
-
-	LOCK
-	cmpxchgl %edx, (%r12)
-	movq	$0, %rcx	/* Must use mov to avoid changing cc.  */
-	jnz	5f
-
-2:	movq	%rsp, %r10
-	movl	32(%rsp), %esi
-	LOAD_FUTEX_WAIT (%esi)
-	movq	%r12, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-	movq	%rax, %rcx
-
-	movl	(%r12), %eax
-
-5:	testl	%eax, %eax
-	jne	7f
-
-	movl	%fs:TID, %edx
-	orl	$FUTEX_WAITERS, %edx
-	LOCK
-	cmpxchgl %edx, (%r12)
-	jnz	7f
-
-6:	addq	$40, %rsp
-	cfi_adjust_cfa_offset(-40)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-	popq	%r9
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r9)
-	popq	%r8
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r8)
-	retq
-
-3:	movl	$EINVAL, %eax
-	retq
-
-	cfi_adjust_cfa_offset(72)
-	cfi_offset(%r8, -16)
-	cfi_offset(%r9, -24)
-	cfi_offset(%r12, -32)
-	cfi_offset(%r13, -40)
-	/* Check whether the time expired.  */
-7:	cmpl	$-ETIMEDOUT, %ecx
-	jne	1b
-
-8:	movl	$ETIMEDOUT, %eax
-	jmp	6b
-#endif
-	cfi_endproc
-	.size	__lll_robust_timedlock_wait,.-__lll_robust_timedlock_wait
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_barrier_wait.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_barrier_wait.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_barrier_wait.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_barrier_wait.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,160 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <lowlevellock.h>
-#include <lowlevelbarrier.h>
-
-
-	.text
-
-	.globl	pthread_barrier_wait
-	.type	pthread_barrier_wait,@function
-	.align	16
-pthread_barrier_wait:
-	/* Get the mutex.  */
-	xorl	%eax, %eax
-	movl	$1, %esi
-	LOCK
-	cmpxchgl %esi, MUTEX(%rdi)
-	jnz	1f
-
-	/* One less waiter.  If this was the last one needed wake
-	   everybody.  */
-2:	decl	LEFT(%rdi)
-	je	3f
-
-	/* There are more threads to come.  */
-#if CURR_EVENT == 0
-	movl	(%rdi), %edx
-#else
-	movl	CURR_EVENT(%rdi), %edx
-#endif
-
-	/* Release the mutex.  */
-	LOCK
-	decl	MUTEX(%rdi)
-	jne	6f
-
-	/* Wait for the remaining threads.  The call will return immediately
-	   if the CURR_EVENT memory has meanwhile been changed.  */
-7:
-#if FUTEX_WAIT == 0
-	movl	PRIVATE(%rdi), %esi
-#else
-	movl	$FUTEX_WAIT, %esi
-	orl	PRIVATE(%rdi), %esi
-#endif
-	xorq	%r10, %r10
-8:	movl	$SYS_futex, %eax
-	syscall
-
-	/* Don't return on spurious wakeups.  The syscall does not change
-	   any register except %eax so there is no need to reload any of
-	   them.  */
-#if CURR_EVENT == 0
-	cmpl	%edx, (%rdi)
-#else
-	cmpl	%edx, CURR_EVENT(%rdi)
-#endif
-	je	8b
-
-	/* Increment LEFT.  If this brings the count back to the
-	   initial count unlock the object.  */
-	movl	$1, %edx
-	movl	INIT_COUNT(%rdi), %eax
-	LOCK
-	xaddl	%edx, LEFT(%rdi)
-	subl	$1, %eax
-	cmpl	%eax, %edx
-	jne,pt	10f
-
-	/* Release the mutex.  We cannot release the lock before
-	   waking the waiting threads since otherwise a new thread might
-	   arrive and gets waken up, too.  */
-	LOCK
-	decl	MUTEX(%rdi)
-	jne	9f
-
-10:	xorl	%eax, %eax		/* != PTHREAD_BARRIER_SERIAL_THREAD */
-
-	retq
-
-	/* The necessary number of threads arrived.  */
-3:
-#if CURR_EVENT == 0
-	incl	(%rdi)
-#else
-	incl	CURR_EVENT(%rdi)
-#endif
-
-	/* Wake up all waiters.  The count is a signed number in the kernel
-	   so 0x7fffffff is the highest value.  */
-	movl	$0x7fffffff, %edx
-	movl	$FUTEX_WAKE, %esi
-	orl	PRIVATE(%rdi), %esi
-	movl	$SYS_futex, %eax
-	syscall
-
-	/* Increment LEFT.  If this brings the count back to the
-	   initial count unlock the object.  */
-	movl	$1, %edx
-	movl	INIT_COUNT(%rdi), %eax
-	LOCK
-	xaddl	%edx, LEFT(%rdi)
-	subl	$1, %eax
-	cmpl	%eax, %edx
-	jne,pt	5f
-
-	/* Release the mutex.  We cannot release the lock before
-	   waking the waiting threads since otherwise a new thread might
-	   arrive and gets waken up, too.  */
-	LOCK
-	decl	MUTEX(%rdi)
-	jne	4f
-
-5:	orl	$-1, %eax		/* == PTHREAD_BARRIER_SERIAL_THREAD */
-
-	retq
-
-1:	movl	PRIVATE(%rdi), %esi
-	addq	$MUTEX, %rdi
-	xorl	$LLL_SHARED, %esi
-	callq	__lll_lock_wait
-	subq	$MUTEX, %rdi
-	jmp	2b
-
-4:	movl	PRIVATE(%rdi), %esi
-	addq	$MUTEX, %rdi
-	xorl	$LLL_SHARED, %esi
-	callq	__lll_unlock_wake
-	jmp	5b
-
-6:	movl	PRIVATE(%rdi), %esi
-	addq	$MUTEX, %rdi
-	xorl	$LLL_SHARED, %esi
-	callq	__lll_unlock_wake
-	subq	$MUTEX, %rdi
-	jmp	7b
-
-9:	movl	PRIVATE(%rdi), %esi
-	addq	$MUTEX, %rdi
-	xorl	$LLL_SHARED, %esi
-	callq	__lll_unlock_wake
-	jmp	10b
-	.size	pthread_barrier_wait,.-pthread_barrier_wait
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_cond_broadcast.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_cond_broadcast.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_cond_broadcast.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_cond_broadcast.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,179 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <shlib-compat.h>
-#include <lowlevellock.h>
-#include <lowlevelcond.h>
-#include <kernel-features.h>
-#include <pthread-pi-defines.h>
-#include <pthread-errnos.h>
-#include <stap-probe.h>
-
-	.text
-
-	/* int pthread_cond_broadcast (pthread_cond_t *cond) */
-	.globl	__pthread_cond_broadcast
-	.type	__pthread_cond_broadcast, @function
-	.align	16
-__pthread_cond_broadcast:
-
-	LIBC_PROBE (cond_broadcast, 1, %rdi)
-
-	/* Get internal lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jnz	1f
-
-2:	addq	$cond_futex, %rdi
-	movq	total_seq-cond_futex(%rdi), %r9
-	cmpq	wakeup_seq-cond_futex(%rdi), %r9
-	jna	4f
-
-	/* Cause all currently waiting threads to recognize they are
-	   woken up.  */
-	movq	%r9, wakeup_seq-cond_futex(%rdi)
-	movq	%r9, woken_seq-cond_futex(%rdi)
-	addq	%r9, %r9
-	movl	%r9d, (%rdi)
-	incl	broadcast_seq-cond_futex(%rdi)
-
-	/* Get the address of the mutex used.  */
-	mov	dep_mutex-cond_futex(%rdi), %R8_LP
-
-	/* Unlock.  */
-	LOCK
-	decl	cond_lock-cond_futex(%rdi)
-	jne	7f
-
-8:	cmp	$-1, %R8_LP
-	je	9f
-
-	/* Do not use requeue for pshared condvars.  */
-	testl	$PS_BIT, MUTEX_KIND(%r8)
-	jne	9f
-
-	/* Requeue to a PI mutex if the PI bit is set.  */
-	movl	MUTEX_KIND(%r8), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	je	81f
-
-	/* Wake up all threads.  */
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$(FUTEX_CMP_REQUEUE|FUTEX_PRIVATE_FLAG), %esi
-#else
-	movl	%fs:PRIVATE_FUTEX, %esi
-	orl	$FUTEX_CMP_REQUEUE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	movl	$1, %edx
-	movl	$0x7fffffff, %r10d
-	syscall
-
-	/* For any kind of error, which mainly is EAGAIN, we try again
-	   with WAKE.  The general test also covers running on old
-	   kernels.  */
-	cmpq	$-4095, %rax
-	jae	9f
-
-10:	xorl	%eax, %eax
-	retq
-
-	/* Wake up all threads.  */
-81:	movl	$(FUTEX_CMP_REQUEUE_PI|FUTEX_PRIVATE_FLAG), %esi
-	movl	$SYS_futex, %eax
-	movl	$1, %edx
-	movl	$0x7fffffff, %r10d
-	syscall
-
-	/* For any kind of error, which mainly is EAGAIN, we try again
-	   with WAKE.  The general test also covers running on old
-	   kernels.  */
-	cmpq	$-4095, %rax
-	jb	10b
-	jmp	9f
-
-	.align	16
-	/* Unlock.  */
-4:	LOCK
-	decl	cond_lock-cond_futex(%rdi)
-	jne	5f
-
-6:	xorl	%eax, %eax
-	retq
-
-	/* Initial locking failed.  */
-1:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	2b
-
-	/* Unlock in loop requires wakeup.  */
-5:	addq	$cond_lock-cond_futex, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	6b
-
-	/* Unlock in loop requires wakeup.  */
-7:	addq	$cond_lock-cond_futex, %rdi
-	cmp	$-1, %R8_LP
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	subq	$cond_lock-cond_futex, %rdi
-	jmp	8b
-
-9:	/* The futex requeue functionality is not available.  */
-	cmp	$-1, %R8_LP
-	movl	$0x7fffffff, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	jmp	10b
-	.size	__pthread_cond_broadcast, .-__pthread_cond_broadcast
-versioned_symbol (libpthread, __pthread_cond_broadcast, pthread_cond_broadcast,
-		  GLIBC_2_3_2)
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_cond_signal.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_cond_signal.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_cond_signal.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_cond_signal.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,164 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <shlib-compat.h>
-#include <lowlevellock.h>
-#include <lowlevelcond.h>
-#include <pthread-pi-defines.h>
-#include <kernel-features.h>
-#include <pthread-errnos.h>
-#include <stap-probe.h>
-
-
-	.text
-
-	/* int pthread_cond_signal (pthread_cond_t *cond) */
-	.globl	__pthread_cond_signal
-	.type	__pthread_cond_signal, @function
-	.align	16
-__pthread_cond_signal:
-
-	LIBC_PROBE (cond_signal, 1, %rdi)
-
-	/* Get internal lock.  */
-	movq	%rdi, %r8
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jnz	1f
-
-2:	addq	$cond_futex, %rdi
-	movq	total_seq(%r8), %rcx
-	cmpq	wakeup_seq(%r8), %rcx
-	jbe	4f
-
-	/* Bump the wakeup number.  */
-	addq	$1, wakeup_seq(%r8)
-	addl	$1, (%rdi)
-
-	/* Wake up one thread.  */
-	LP_OP(cmp) $-1, dep_mutex(%r8)
-	movl	$FUTEX_WAKE_OP, %esi
-	movl	$1, %edx
-	movl	$SYS_futex, %eax
-	je	8f
-
-	/* Get the address of the mutex used.  */
-	mov     dep_mutex(%r8), %RCX_LP
-	movl	MUTEX_KIND(%rcx), %r11d
-	andl	$(ROBUST_BIT|PI_BIT), %r11d
-	cmpl	$PI_BIT, %r11d
-	je	9f
-
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$(FUTEX_WAKE_OP|FUTEX_PRIVATE_FLAG), %esi
-#else
-	orl	%fs:PRIVATE_FUTEX, %esi
-#endif
-
-8:	movl	$1, %r10d
-#if cond_lock != 0
-	addq	$cond_lock, %r8
-#endif
-	movl	$FUTEX_OP_CLEAR_WAKE_IF_GT_ONE, %r9d
-	syscall
-#if cond_lock != 0
-	subq	$cond_lock, %r8
-#endif
-	/* For any kind of error, we try again with WAKE.
-	   The general test also covers running on old kernels.  */
-	cmpq	$-4095, %rax
-	jae	7f
-
-	xorl	%eax, %eax
-	retq
-
-	/* Wake up one thread and requeue none in the PI Mutex case.  */
-9:	movl	$(FUTEX_CMP_REQUEUE_PI|FUTEX_PRIVATE_FLAG), %esi
-	movq	%rcx, %r8
-	xorq	%r10, %r10
-	movl	(%rdi), %r9d	// XXX Can this be right?
-	syscall
-
-	leaq	-cond_futex(%rdi), %r8
-
-	/* For any kind of error, we try again with WAKE.
-	   The general test also covers running on old kernels.  */
-	cmpq	$-4095, %rax
-	jb	4f
-
-7:
-#ifdef __ASSUME_PRIVATE_FUTEX
-	andl	$FUTEX_PRIVATE_FLAG, %esi
-#else
-	andl	%fs:PRIVATE_FUTEX, %esi
-#endif
-	orl	$FUTEX_WAKE, %esi
-	movl	$SYS_futex, %eax
-	/* %rdx should be 1 already from $FUTEX_WAKE_OP syscall.
-	movl	$1, %edx  */
-	syscall
-
-	/* Unlock.  */
-4:	LOCK
-#if cond_lock == 0
-	decl	(%r8)
-#else
-	decl	cond_lock(%r8)
-#endif
-	jne	5f
-
-6:	xorl	%eax, %eax
-	retq
-
-	/* Initial locking failed.  */
-1:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	2b
-
-	/* Unlock in loop requires wakeup.  */
-5:
-	movq	%r8, %rdi
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	6b
-	.size	__pthread_cond_signal, .-__pthread_cond_signal
-versioned_symbol (libpthread, __pthread_cond_signal, pthread_cond_signal,
-		  GLIBC_2_3_2)
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S	2015-04-27 12:45:21.921214172 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,840 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <shlib-compat.h>
-#include <lowlevellock.h>
-#include <lowlevelcond.h>
-#include <pthread-pi-defines.h>
-#include <pthread-errnos.h>
-#include <stap-probe.h>
-
-#include <kernel-features.h>
-
-
-	.text
-
-
-/* int pthread_cond_timedwait (pthread_cond_t *cond, pthread_mutex_t *mutex,
-			       const struct timespec *abstime)  */
-	.globl	__pthread_cond_timedwait
-	.type	__pthread_cond_timedwait, @function
-	.align	16
-__pthread_cond_timedwait:
-.LSTARTCODE:
-	cfi_startproc
-#ifdef SHARED
-	cfi_personality(DW_EH_PE_pcrel | DW_EH_PE_sdata4 | DW_EH_PE_indirect,
-			DW.ref.__gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_pcrel | DW_EH_PE_sdata4, .LexceptSTART)
-#else
-	cfi_personality(DW_EH_PE_udata4, __gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_udata4, .LexceptSTART)
-#endif
-
-	pushq	%r12
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r12, 0)
-	pushq	%r13
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r13, 0)
-	pushq	%r14
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r14, 0)
-	pushq	%r15
-	cfi_adjust_cfa_offset(8)
-	cfi_rel_offset(%r15, 0)
-#ifdef __ASSUME_FUTEX_CLOCK_REALTIME
-# define FRAME_SIZE (32+8)
-#else
-# define FRAME_SIZE (48+8)
-#endif
-	subq	$FRAME_SIZE, %rsp
-	cfi_adjust_cfa_offset(FRAME_SIZE)
-	cfi_remember_state
-
-	LIBC_PROBE (cond_timedwait, 3, %rdi, %rsi, %rdx)
-
-	cmpq	$1000000000, 8(%rdx)
-	movl	$EINVAL, %eax
-	jae	48f
-
-	/* Stack frame:
-
-	   rsp + 48
-		    +--------------------------+
-	   rsp + 32 | timeout value            |
-		    +--------------------------+
-	   rsp + 24 | old wake_seq value       |
-		    +--------------------------+
-	   rsp + 16 | mutex pointer            |
-		    +--------------------------+
-	   rsp +  8 | condvar pointer          |
-		    +--------------------------+
-	   rsp +  4 | old broadcast_seq value  |
-		    +--------------------------+
-	   rsp +  0 | old cancellation mode    |
-		    +--------------------------+
-	*/
-
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-
-	/* Prepare structure passed to cancellation handler.  */
-	movq	%rdi, 8(%rsp)
-	movq	%rsi, 16(%rsp)
-	movq	%rdx, %r13
-
-	je	22f
-	mov	%RSI_LP, dep_mutex(%rdi)
-
-22:
-	xorb	%r15b, %r15b
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-#  ifdef PIC
-	cmpl	$0, __have_futex_clock_realtime(%rip)
-#  else
-	cmpl	$0, __have_futex_clock_realtime
-#  endif
-	je	.Lreltmo
-#endif
-
-	/* Get internal lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jnz	31f
-
-	/* Unlock the mutex.  */
-32:	movq	16(%rsp), %rdi
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-
-	testl	%eax, %eax
-	jne	46f
-
-	movq	8(%rsp), %rdi
-	incq	total_seq(%rdi)
-	incl	cond_futex(%rdi)
-	addl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Get and store current wakeup_seq value.  */
-	movq	8(%rsp), %rdi
-	movq	wakeup_seq(%rdi), %r9
-	movl	broadcast_seq(%rdi), %edx
-	movq	%r9, 24(%rsp)
-	movl	%edx, 4(%rsp)
-
-	cmpq	$0, (%r13)
-	movq	$-ETIMEDOUT, %r14
-	js	36f
-
-38:	movl	cond_futex(%rdi), %r12d
-
-	/* Unlock.  */
-	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	33f
-
-.LcleanupSTART1:
-34:	callq	__pthread_enable_asynccancel
-	movl	%eax, (%rsp)
-
-	movq	%r13, %r10
-	movl	$FUTEX_WAIT_BITSET, %esi
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	je	60f
-
-	mov	dep_mutex(%rdi), %R8_LP
-	/* Requeue to a non-robust PI mutex if the PI bit is set and
-	the robust bit is not set.  */
-	movl	MUTEX_KIND(%r8), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	jne	61f
-
-	movl	$(FUTEX_WAIT_REQUEUE_PI|FUTEX_PRIVATE_FLAG), %esi
-	xorl	%eax, %eax
-	/* The following only works like this because we only support
-	   two clocks, represented using a single bit.  */
-	testl	$1, cond_nwaiters(%rdi)
-	movl	$FUTEX_CLOCK_REALTIME, %edx
-	cmove	%edx, %eax
-	orl	%eax, %esi
-	movq	%r12, %rdx
-	addq	$cond_futex, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-
-	cmpl	$0, %eax
-	sete	%r15b
-
-#ifdef __ASSUME_REQUEUE_PI
-	jmp	62f
-#else
-	je	62f
-
-	/* When a futex syscall with FUTEX_WAIT_REQUEUE_PI returns
-	   successfully, it has already locked the mutex for us and the
-	   pi_flag (%r15b) is set to denote that fact.  However, if another
-	   thread changed the futex value before we entered the wait, the
-	   syscall may return an EAGAIN and the mutex is not locked.  We go
-	   ahead with a success anyway since later we look at the pi_flag to
-	   decide if we got the mutex or not.  The sequence numbers then make
-	   sure that only one of the threads actually wake up.  We retry using
-	   normal FUTEX_WAIT only if the kernel returned ENOSYS, since normal
-	   and PI futexes don't mix.
-
-	   Note that we don't check for EAGAIN specifically; we assume that the
-	   only other error the futex function could return is EAGAIN (barring
-	   the ETIMEOUT of course, for the timeout case in futex) since
-	   anything else would mean an error in our function.  It is too
-	   expensive to do that check for every call (which is  quite common in
-	   case of a large number of threads), so it has been skipped.  */
-	cmpl    $-ENOSYS, %eax
-	jne     62f
-
-	subq	$cond_futex, %rdi
-#endif
-
-61:	movl	$(FUTEX_WAIT_BITSET|FUTEX_PRIVATE_FLAG), %esi
-60:	xorb	%r15b, %r15b
-	xorl	%eax, %eax
-	/* The following only works like this because we only support
-	   two clocks, represented using a single bit.  */
-	testl	$1, cond_nwaiters(%rdi)
-	movl	$FUTEX_CLOCK_REALTIME, %edx
-	movl	$0xffffffff, %r9d
-	cmove	%edx, %eax
-	orl	%eax, %esi
-	movq	%r12, %rdx
-	addq	$cond_futex, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-62:	movq	%rax, %r14
-
-	movl	(%rsp), %edi
-	callq	__pthread_disable_asynccancel
-.LcleanupEND1:
-
-	/* Lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jne	35f
-
-36:	movl	broadcast_seq(%rdi), %edx
-
-	movq	woken_seq(%rdi), %rax
-
-	movq	wakeup_seq(%rdi), %r9
-
-	cmpl	4(%rsp), %edx
-	jne	53f
-
-	cmpq	24(%rsp), %r9
-	jbe	45f
-
-	cmpq	%rax, %r9
-	ja	39f
-
-45:	cmpq	$-ETIMEDOUT, %r14
-	je	99f
-
-	/* We need to go back to futex_wait.  If we're using requeue_pi, then
-	   release the mutex we had acquired and go back.  */
-	test	%r15b, %r15b
-	jz	38b
-
-	/* Adjust the mutex values first and then unlock it.  The unlock
-	   should always succeed or else the kernel did not lock the
-	   mutex correctly.  */
-	movq	%r8, %rdi
-	callq	__pthread_mutex_cond_lock_adjust
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-	/* Reload cond_var.  */
-	movq	8(%rsp), %rdi
-	jmp	38b
-
-99:	incq	wakeup_seq(%rdi)
-	incl	cond_futex(%rdi)
-	movl	$ETIMEDOUT, %r14d
-	jmp	44f
-
-53:	xorq	%r14, %r14
-	jmp	54f
-
-39:	xorq	%r14, %r14
-44:	incq	woken_seq(%rdi)
-
-54:	subl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Wake up a thread which wants to destroy the condvar object.  */
-	cmpq	$0xffffffffffffffff, total_seq(%rdi)
-	jne	55f
-	movl	cond_nwaiters(%rdi), %eax
-	andl	$~((1 << nwaiters_shift) - 1), %eax
-	jne	55f
-
-	addq	$cond_nwaiters, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_nwaiters(%rdi)
-	movl	$1, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	subq	$cond_nwaiters, %rdi
-
-55:	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	40f
-
-	/* If requeue_pi is used the kernel performs the locking of the
-	   mutex. */
-41:	movq	16(%rsp), %rdi
-	testb	%r15b, %r15b
-	jnz	64f
-
-	callq	__pthread_mutex_cond_lock
-
-63:	testq	%rax, %rax
-	cmoveq	%r14, %rax
-
-48:	addq	$FRAME_SIZE, %rsp
-	cfi_adjust_cfa_offset(-FRAME_SIZE)
-	popq	%r15
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r15)
-	popq	%r14
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r14)
-	popq	%r13
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r13)
-	popq	%r12
-	cfi_adjust_cfa_offset(-8)
-	cfi_restore(%r12)
-
-	retq
-
-	cfi_restore_state
-
-64:	callq	__pthread_mutex_cond_lock_adjust
-	movq	%r14, %rax
-	jmp	48b
-
-	/* Initial locking failed.  */
-31:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-	jmp	32b
-
-	/* Unlock in loop requires wakeup.  */
-33:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	34b
-
-	/* Locking in loop failed.  */
-35:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	36b
-
-	/* Unlock after loop requires wakeup.  */
-40:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	41b
-
-	/* The initial unlocking of the mutex failed.  */
-46:	movq	8(%rsp), %rdi
-	movq	%rax, (%rsp)
-	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	47f
-
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-
-47:	movq	(%rsp), %rax
-	jmp	48b
-
-
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-.Lreltmo:
-	/* Get internal lock.  */
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-# if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-# else
-	cmpxchgl %esi, cond_lock(%rdi)
-# endif
-	jnz	1f
-
-	/* Unlock the mutex.  */
-2:	movq	16(%rsp), %rdi
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-
-	testl	%eax, %eax
-	jne	46b
-
-	movq	8(%rsp), %rdi
-	incq	total_seq(%rdi)
-	incl	cond_futex(%rdi)
-	addl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Get and store current wakeup_seq value.  */
-	movq	8(%rsp), %rdi
-	movq	wakeup_seq(%rdi), %r9
-	movl	broadcast_seq(%rdi), %edx
-	movq	%r9, 24(%rsp)
-	movl	%edx, 4(%rsp)
-
-	/* Get the current time.  */
-8:
-# ifdef __NR_clock_gettime
-	/* Get the clock number.  Note that the field in the condvar
-	   structure stores the number minus 1.  */
-	movq	8(%rsp), %rdi
-	movl	cond_nwaiters(%rdi), %edi
-	andl	$((1 << nwaiters_shift) - 1), %edi
-	/* Only clocks 0 and 1 are allowed so far.  Both are handled in the
-	   kernel.  */
-	leaq	32(%rsp), %rsi
-#  ifdef SHARED
-	mov	__vdso_clock_gettime@GOTPCREL(%rip), %RAX_LP
-	mov	(%rax), %RAX_LP
-	PTR_DEMANGLE (%RAX_LP)
-	call	*%rax
-#  else
-	movl	$__NR_clock_gettime, %eax
-	syscall
-#  endif
-
-	/* Compute relative timeout.  */
-	movq	(%r13), %rcx
-	movq	8(%r13), %rdx
-	subq	32(%rsp), %rcx
-	subq	40(%rsp), %rdx
-# else
-	leaq	24(%rsp), %rdi
-	xorl	%esi, %esi
-	/* This call works because we directly jump to a system call entry
-	   which preserves all the registers.  */
-	call	JUMPTARGET(__gettimeofday)
-
-	/* Compute relative timeout.  */
-	movq	40(%rsp), %rax
-	movl	$1000, %edx
-	mul	%rdx		/* Milli seconds to nano seconds.  */
-	movq	(%r13), %rcx
-	movq	8(%r13), %rdx
-	subq	32(%rsp), %rcx
-	subq	%rax, %rdx
-# endif
-	jns	12f
-	addq	$1000000000, %rdx
-	decq	%rcx
-12:	testq	%rcx, %rcx
-	movq	8(%rsp), %rdi
-	movq	$-ETIMEDOUT, %r14
-	js	6f
-
-	/* Store relative timeout.  */
-21:	movq	%rcx, 32(%rsp)
-	movq	%rdx, 40(%rsp)
-
-	movl	cond_futex(%rdi), %r12d
-
-	/* Unlock.  */
-	LOCK
-# if cond_lock == 0
-	decl	(%rdi)
-# else
-	decl	cond_lock(%rdi)
-# endif
-	jne	3f
-
-.LcleanupSTART2:
-4:	callq	__pthread_enable_asynccancel
-	movl	%eax, (%rsp)
-
-	leaq	32(%rsp), %r10
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	movq	%r12, %rdx
-# ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAIT, %eax
-	movl	$(FUTEX_WAIT|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-# else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-#  if FUTEX_WAIT != 0
-	orl	$FUTEX_WAIT, %esi
-#  endif
-# endif
-	addq	$cond_futex, %rdi
-	movl	$SYS_futex, %eax
-	syscall
-	movq	%rax, %r14
-
-	movl	(%rsp), %edi
-	callq	__pthread_disable_asynccancel
-.LcleanupEND2:
-
-	/* Lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-# if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-# else
-	cmpxchgl %esi, cond_lock(%rdi)
-# endif
-	jne	5f
-
-6:	movl	broadcast_seq(%rdi), %edx
-
-	movq	woken_seq(%rdi), %rax
-
-	movq	wakeup_seq(%rdi), %r9
-
-	cmpl	4(%rsp), %edx
-	jne	53b
-
-	cmpq	24(%rsp), %r9
-	jbe	15f
-
-	cmpq	%rax, %r9
-	ja	39b
-
-15:	cmpq	$-ETIMEDOUT, %r14
-	jne	8b
-
-	jmp	99b
-
-	/* Initial locking failed.  */
-1:
-# if cond_lock != 0
-	addq	$cond_lock, %rdi
-# endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-	jmp	2b
-
-	/* Unlock in loop requires wakeup.  */
-3:
-# if cond_lock != 0
-	addq	$cond_lock, %rdi
-# endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	4b
-
-	/* Locking in loop failed.  */
-5:
-# if cond_lock != 0
-	addq	$cond_lock, %rdi
-# endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-# if cond_lock != 0
-	subq	$cond_lock, %rdi
-# endif
-	jmp	6b
-#endif
-	.size	__pthread_cond_timedwait, .-__pthread_cond_timedwait
-versioned_symbol (libpthread, __pthread_cond_timedwait, pthread_cond_timedwait,
-		  GLIBC_2_3_2)
-
-
-	.align	16
-	.type	__condvar_cleanup2, @function
-__condvar_cleanup2:
-	/* Stack frame:
-
-	   rsp + 72
-		    +--------------------------+
-	   rsp + 64 | %r12                     |
-		    +--------------------------+
-	   rsp + 56 | %r13                     |
-		    +--------------------------+
-	   rsp + 48 | %r14                     |
-		    +--------------------------+
-	   rsp + 24 | unused                   |
-		    +--------------------------+
-	   rsp + 16 | mutex pointer            |
-		    +--------------------------+
-	   rsp +  8 | condvar pointer          |
-		    +--------------------------+
-	   rsp +  4 | old broadcast_seq value  |
-		    +--------------------------+
-	   rsp +  0 | old cancellation mode    |
-		    +--------------------------+
-	*/
-
-	movq	%rax, 24(%rsp)
-
-	/* Get internal lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jz	1f
-
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-
-1:	movl	broadcast_seq(%rdi), %edx
-	cmpl	4(%rsp), %edx
-	jne	3f
-
-	/* We increment the wakeup_seq counter only if it is lower than
-	   total_seq.  If this is not the case the thread was woken and
-	   then canceled.  In this case we ignore the signal.  */
-	movq	total_seq(%rdi), %rax
-	cmpq	wakeup_seq(%rdi), %rax
-	jbe	6f
-	incq	wakeup_seq(%rdi)
-	incl	cond_futex(%rdi)
-6:	incq	woken_seq(%rdi)
-
-3:	subl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Wake up a thread which wants to destroy the condvar object.  */
-	xorq	%r12, %r12
-	cmpq	$0xffffffffffffffff, total_seq(%rdi)
-	jne	4f
-	movl	cond_nwaiters(%rdi), %eax
-	andl	$~((1 << nwaiters_shift) - 1), %eax
-	jne	4f
-
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	leaq	cond_nwaiters(%rdi), %rdi
-	movl	$1, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	subq	$cond_nwaiters, %rdi
-	movl	$1, %r12d
-
-4:	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	je	2f
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-
-	/* Wake up all waiters to make sure no signal gets lost.  */
-2:	testq	%r12, %r12
-	jnz	5f
-	addq	$cond_futex, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_futex(%rdi)
-	movl	$0x7fffffff, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-
-	/* Lock the mutex only if we don't own it already.  This only happens
-	   in case of PI mutexes, if we got cancelled after a successful
-	   return of the futex syscall and before disabling async
-	   cancellation.  */
-5:	movq	16(%rsp), %rdi
-	movl	MUTEX_KIND(%rdi), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	jne	7f
-
-	movl	(%rdi), %eax
-	andl	$TID_MASK, %eax
-	cmpl	%eax, %fs:TID
-	jne	7f
-	/* We managed to get the lock.  Fix it up before returning.  */
-	callq	__pthread_mutex_cond_lock_adjust
-	jmp	8f
-
-7:	callq	__pthread_mutex_cond_lock
-
-8:	movq	24(%rsp), %rdi
-	movq	FRAME_SIZE(%rsp), %r15
-	movq	FRAME_SIZE+8(%rsp), %r14
-	movq	FRAME_SIZE+16(%rsp), %r13
-	movq	FRAME_SIZE+24(%rsp), %r12
-.LcallUR:
-	call	_Unwind_Resume@PLT
-	hlt
-.LENDCODE:
-	cfi_endproc
-	.size	__condvar_cleanup2, .-__condvar_cleanup2
-
-
-	.section .gcc_except_table,"a",@progbits
-.LexceptSTART:
-	.byte	DW_EH_PE_omit			# @LPStart format
-	.byte	DW_EH_PE_omit			# @TType format
-	.byte	DW_EH_PE_uleb128		# call-site format
-	.uleb128 .Lcstend-.Lcstbegin
-.Lcstbegin:
-	.uleb128 .LcleanupSTART1-.LSTARTCODE
-	.uleb128 .LcleanupEND1-.LcleanupSTART1
-	.uleb128 __condvar_cleanup2-.LSTARTCODE
-	.uleb128  0
-#ifndef __ASSUME_FUTEX_CLOCK_REALTIME
-	.uleb128 .LcleanupSTART2-.LSTARTCODE
-	.uleb128 .LcleanupEND2-.LcleanupSTART2
-	.uleb128 __condvar_cleanup2-.LSTARTCODE
-	.uleb128  0
-#endif
-	.uleb128 .LcallUR-.LSTARTCODE
-	.uleb128 .LENDCODE-.LcallUR
-	.uleb128 0
-	.uleb128  0
-.Lcstend:
-
-
-#ifdef SHARED
-	.hidden	DW.ref.__gcc_personality_v0
-	.weak	DW.ref.__gcc_personality_v0
-	.section .gnu.linkonce.d.DW.ref.__gcc_personality_v0,"aw",@progbits
-	.align	LP_SIZE
-	.type	DW.ref.__gcc_personality_v0, @object
-	.size	DW.ref.__gcc_personality_v0, LP_SIZE
-DW.ref.__gcc_personality_v0:
-	ASM_ADDR __gcc_personality_v0
-#endif
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S	2015-04-27 12:45:23.040703115 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,555 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <sysdep.h>
-#include <shlib-compat.h>
-#include <lowlevellock.h>
-#include <lowlevelcond.h>
-#include <tcb-offsets.h>
-#include <pthread-pi-defines.h>
-#include <pthread-errnos.h>
-#include <stap-probe.h>
-
-#include <kernel-features.h>
-
-
-	.text
-
-/* int pthread_cond_wait (pthread_cond_t *cond, pthread_mutex_t *mutex)  */
-	.globl	__pthread_cond_wait
-	.type	__pthread_cond_wait, @function
-	.align	16
-__pthread_cond_wait:
-.LSTARTCODE:
-	cfi_startproc
-#ifdef SHARED
-	cfi_personality(DW_EH_PE_pcrel | DW_EH_PE_sdata4 | DW_EH_PE_indirect,
-			DW.ref.__gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_pcrel | DW_EH_PE_sdata4, .LexceptSTART)
-#else
-	cfi_personality(DW_EH_PE_udata4, __gcc_personality_v0)
-	cfi_lsda(DW_EH_PE_udata4, .LexceptSTART)
-#endif
-
-#define FRAME_SIZE (32+8)
-	leaq	-FRAME_SIZE(%rsp), %rsp
-	cfi_adjust_cfa_offset(FRAME_SIZE)
-
-	/* Stack frame:
-
-	   rsp + 32
-		    +--------------------------+
-	   rsp + 24 | old wake_seq value       |
-		    +--------------------------+
-	   rsp + 16 | mutex pointer            |
-		    +--------------------------+
-	   rsp +  8 | condvar pointer          |
-		    +--------------------------+
-	   rsp +  4 | old broadcast_seq value  |
-		    +--------------------------+
-	   rsp +  0 | old cancellation mode    |
-		    +--------------------------+
-	*/
-
-	LIBC_PROBE (cond_wait, 2, %rdi, %rsi)
-
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-
-	/* Prepare structure passed to cancellation handler.  */
-	movq	%rdi, 8(%rsp)
-	movq	%rsi, 16(%rsp)
-
-	je	15f
-	mov	%RSI_LP, dep_mutex(%rdi)
-
-	/* Get internal lock.  */
-15:	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jne	1f
-
-	/* Unlock the mutex.  */
-2:	movq	16(%rsp), %rdi
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-
-	testl	%eax, %eax
-	jne	12f
-
-	movq	8(%rsp), %rdi
-	incq	total_seq(%rdi)
-	incl	cond_futex(%rdi)
-	addl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Get and store current wakeup_seq value.  */
-	movq	8(%rsp), %rdi
-	movq	wakeup_seq(%rdi), %r9
-	movl	broadcast_seq(%rdi), %edx
-	movq	%r9, 24(%rsp)
-	movl	%edx, 4(%rsp)
-
-	/* Unlock.  */
-8:	movl	cond_futex(%rdi), %edx
-	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	3f
-
-.LcleanupSTART:
-4:	callq	__pthread_enable_asynccancel
-	movl	%eax, (%rsp)
-
-	xorq	%r10, %r10
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	leaq	cond_futex(%rdi), %rdi
-	movl	$FUTEX_WAIT, %esi
-	je	60f
-
-	mov	dep_mutex-cond_futex(%rdi), %R8_LP
-	/* Requeue to a non-robust PI mutex if the PI bit is set and
-	the robust bit is not set.  */
-	movl	MUTEX_KIND(%r8), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	jne	61f
-
-	movl	$(FUTEX_WAIT_REQUEUE_PI|FUTEX_PRIVATE_FLAG), %esi
-	movl	$SYS_futex, %eax
-	syscall
-
-	cmpl	$0, %eax
-	sete	%r8b
-
-#ifdef __ASSUME_REQUEUE_PI
-	jmp	62f
-#else
-	je	62f
-
-	/* When a futex syscall with FUTEX_WAIT_REQUEUE_PI returns
-	   successfully, it has already locked the mutex for us and the
-	   pi_flag (%r8b) is set to denote that fact.  However, if another
-	   thread changed the futex value before we entered the wait, the
-	   syscall may return an EAGAIN and the mutex is not locked.  We go
-	   ahead with a success anyway since later we look at the pi_flag to
-	   decide if we got the mutex or not.  The sequence numbers then make
-	   sure that only one of the threads actually wake up.  We retry using
-	   normal FUTEX_WAIT only if the kernel returned ENOSYS, since normal
-	   and PI futexes don't mix.
-
-	   Note that we don't check for EAGAIN specifically; we assume that the
-	   only other error the futex function could return is EAGAIN since
-	   anything else would mean an error in our function.  It is too
-	   expensive to do that check for every call (which is 	quite common in
-	   case of a large number of threads), so it has been skipped.  */
-	cmpl	$-ENOSYS, %eax
-	jne	62f
-
-# ifndef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAIT, %esi
-# endif
-#endif
-
-61:
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$(FUTEX_WAIT|FUTEX_PRIVATE_FLAG), %esi
-#else
-	orl	%fs:PRIVATE_FUTEX, %esi
-#endif
-60:	xorb	%r8b, %r8b
-	movl	$SYS_futex, %eax
-	syscall
-
-62:	movl	(%rsp), %edi
-	callq	__pthread_disable_asynccancel
-.LcleanupEND:
-
-	/* Lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jnz	5f
-
-6:	movl	broadcast_seq(%rdi), %edx
-
-	movq	woken_seq(%rdi), %rax
-
-	movq	wakeup_seq(%rdi), %r9
-
-	cmpl	4(%rsp), %edx
-	jne	16f
-
-	cmpq	24(%rsp), %r9
-	jbe	19f
-
-	cmpq	%rax, %r9
-	jna	19f
-
-	incq	woken_seq(%rdi)
-
-	/* Unlock */
-16:	subl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Wake up a thread which wants to destroy the condvar object.  */
-	cmpq	$0xffffffffffffffff, total_seq(%rdi)
-	jne	17f
-	movl	cond_nwaiters(%rdi), %eax
-	andl	$~((1 << nwaiters_shift) - 1), %eax
-	jne	17f
-
-	addq	$cond_nwaiters, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_nwaiters(%rdi)
-	movl	$1, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	subq	$cond_nwaiters, %rdi
-
-17:	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	jne	10f
-
-	/* If requeue_pi is used the kernel performs the locking of the
-	   mutex. */
-11:	movq	16(%rsp), %rdi
-	testb	%r8b, %r8b
-	jnz	18f
-
-	callq	__pthread_mutex_cond_lock
-
-14:	leaq	FRAME_SIZE(%rsp), %rsp
-	cfi_adjust_cfa_offset(-FRAME_SIZE)
-
-	/* We return the result of the mutex_lock operation.  */
-	retq
-
-	cfi_adjust_cfa_offset(FRAME_SIZE)
-
-18:	callq	__pthread_mutex_cond_lock_adjust
-	xorl	%eax, %eax
-	jmp	14b
-
-	/* We need to go back to futex_wait.  If we're using requeue_pi, then
-	   release the mutex we had acquired and go back.  */
-19:	testb	%r8b, %r8b
-	jz	8b
-
-	/* Adjust the mutex values first and then unlock it.  The unlock
-	   should always succeed or else the kernel did not lock the mutex
-	   correctly.  */
-	movq	16(%rsp), %rdi
-	callq	__pthread_mutex_cond_lock_adjust
-	movq	%rdi, %r8
-	xorl	%esi, %esi
-	callq	__pthread_mutex_unlock_usercnt
-	/* Reload cond_var.  */
-	movq	8(%rsp), %rdi
-	jmp	8b
-
-	/* Initial locking failed.  */
-1:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-	jmp	2b
-
-	/* Unlock in loop requires wakeup.  */
-3:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	/* The call preserves %rdx.  */
-	callq	__lll_unlock_wake
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	4b
-
-	/* Locking in loop failed.  */
-5:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-	jmp	6b
-
-	/* Unlock after loop requires wakeup.  */
-10:
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-	jmp	11b
-
-	/* The initial unlocking of the mutex failed.  */
-12:	movq	%rax, %r10
-	movq	8(%rsp), %rdi
-	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	je	13f
-
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_unlock_wake
-
-13:	movq	%r10, %rax
-	jmp	14b
-
-	.size	__pthread_cond_wait, .-__pthread_cond_wait
-versioned_symbol (libpthread, __pthread_cond_wait, pthread_cond_wait,
-		  GLIBC_2_3_2)
-
-
-	.align	16
-	.type	__condvar_cleanup1, @function
-	.globl	__condvar_cleanup1
-	.hidden	__condvar_cleanup1
-__condvar_cleanup1:
-	/* Stack frame:
-
-	   rsp + 32
-		    +--------------------------+
-	   rsp + 24 | unused                   |
-		    +--------------------------+
-	   rsp + 16 | mutex pointer            |
-		    +--------------------------+
-	   rsp +  8 | condvar pointer          |
-		    +--------------------------+
-	   rsp +  4 | old broadcast_seq value  |
-		    +--------------------------+
-	   rsp +  0 | old cancellation mode    |
-		    +--------------------------+
-	*/
-
-	movq	%rax, 24(%rsp)
-
-	/* Get internal lock.  */
-	movq	8(%rsp), %rdi
-	movl	$1, %esi
-	xorl	%eax, %eax
-	LOCK
-#if cond_lock == 0
-	cmpxchgl %esi, (%rdi)
-#else
-	cmpxchgl %esi, cond_lock(%rdi)
-#endif
-	jz	1f
-
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	callq	__lll_lock_wait
-#if cond_lock != 0
-	subq	$cond_lock, %rdi
-#endif
-
-1:	movl	broadcast_seq(%rdi), %edx
-	cmpl	4(%rsp), %edx
-	jne	3f
-
-	/* We increment the wakeup_seq counter only if it is lower than
-	   total_seq.  If this is not the case the thread was woken and
-	   then canceled.  In this case we ignore the signal.  */
-	movq	total_seq(%rdi), %rax
-	cmpq	wakeup_seq(%rdi), %rax
-	jbe	6f
-	incq	wakeup_seq(%rdi)
-	incl	cond_futex(%rdi)
-6:	incq	woken_seq(%rdi)
-
-3:	subl	$(1 << nwaiters_shift), cond_nwaiters(%rdi)
-
-	/* Wake up a thread which wants to destroy the condvar object.  */
-	xorl	%ecx, %ecx
-	cmpq	$0xffffffffffffffff, total_seq(%rdi)
-	jne	4f
-	movl	cond_nwaiters(%rdi), %eax
-	andl	$~((1 << nwaiters_shift) - 1), %eax
-	jne	4f
-
-	LP_OP(cmp) $-1, dep_mutex(%rdi)
-	leaq	cond_nwaiters(%rdi), %rdi
-	movl	$1, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-	subq	$cond_nwaiters, %rdi
-	movl	$1, %ecx
-
-4:	LOCK
-#if cond_lock == 0
-	decl	(%rdi)
-#else
-	decl	cond_lock(%rdi)
-#endif
-	je	2f
-#if cond_lock != 0
-	addq	$cond_lock, %rdi
-#endif
-	LP_OP(cmp) $-1, dep_mutex-cond_lock(%rdi)
-	movl	$LLL_PRIVATE, %eax
-	movl	$LLL_SHARED, %esi
-	cmovne	%eax, %esi
-	/* The call preserves %rcx.  */
-	callq	__lll_unlock_wake
-
-	/* Wake up all waiters to make sure no signal gets lost.  */
-2:	testl	%ecx, %ecx
-	jnz	5f
-	addq	$cond_futex, %rdi
-	LP_OP(cmp) $-1, dep_mutex-cond_futex(%rdi)
-	movl	$0x7fffffff, %edx
-#ifdef __ASSUME_PRIVATE_FUTEX
-	movl	$FUTEX_WAKE, %eax
-	movl	$(FUTEX_WAKE|FUTEX_PRIVATE_FLAG), %esi
-	cmove	%eax, %esi
-#else
-	movl	$0, %eax
-	movl	%fs:PRIVATE_FUTEX, %esi
-	cmove	%eax, %esi
-	orl	$FUTEX_WAKE, %esi
-#endif
-	movl	$SYS_futex, %eax
-	syscall
-
-	/* Lock the mutex only if we don't own it already.  This only happens
-	   in case of PI mutexes, if we got cancelled after a successful
-	   return of the futex syscall and before disabling async
-	   cancellation.  */
-5:	movq	16(%rsp), %rdi
-	movl	MUTEX_KIND(%rdi), %eax
-	andl	$(ROBUST_BIT|PI_BIT), %eax
-	cmpl	$PI_BIT, %eax
-	jne	7f
-
-	movl	(%rdi), %eax
-	andl	$TID_MASK, %eax
-	cmpl	%eax, %fs:TID
-	jne	7f
-	/* We managed to get the lock.  Fix it up before returning.  */
-	callq	__pthread_mutex_cond_lock_adjust
-	jmp	8f
-
-
-7:	callq	__pthread_mutex_cond_lock
-
-8:	movq	24(%rsp), %rdi
-.LcallUR:
-	call	_Unwind_Resume@PLT
-	hlt
-.LENDCODE:
-	cfi_endproc
-	.size	__condvar_cleanup1, .-__condvar_cleanup1
-
-
-	.section .gcc_except_table,"a",@progbits
-.LexceptSTART:
-	.byte	DW_EH_PE_omit			# @LPStart format
-	.byte	DW_EH_PE_omit			# @TType format
-	.byte	DW_EH_PE_uleb128		# call-site format
-	.uleb128 .Lcstend-.Lcstbegin
-.Lcstbegin:
-	.uleb128 .LcleanupSTART-.LSTARTCODE
-	.uleb128 .LcleanupEND-.LcleanupSTART
-	.uleb128 __condvar_cleanup1-.LSTARTCODE
-	.uleb128 0
-	.uleb128 .LcallUR-.LSTARTCODE
-	.uleb128 .LENDCODE-.LcallUR
-	.uleb128 0
-	.uleb128 0
-.Lcstend:
-
-
-#ifdef SHARED
-	.hidden	DW.ref.__gcc_personality_v0
-	.weak	DW.ref.__gcc_personality_v0
-	.section .gnu.linkonce.d.DW.ref.__gcc_personality_v0,"aw",@progbits
-	.align	LP_SIZE
-	.type	DW.ref.__gcc_personality_v0, @object
-	.size	DW.ref.__gcc_personality_v0, LP_SIZE
-DW.ref.__gcc_personality_v0:
-	ASM_ADDR __gcc_personality_v0
-#endif
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/sysdep-cancel.h glibc-2.21/sysdeps/unix/sysv/linux/x86_64/sysdep-cancel.h
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/sysdep-cancel.h	2015-04-28 13:23:01.866403628 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/sysdep-cancel.h	2015-04-28 13:22:31.061623241 -0700
@@ -29,34 +29,51 @@
    and %r11 if they return.  Therefore we don't have to preserve other
    registers around these calls.  */
 # undef PSEUDO
-# define PSEUDO(name, syscall_name, args)				      \
-  .text;								      \
-  ENTRY (name)								      \
-    SINGLE_THREAD_P;							      \
-    jne L(pseudo_cancel);						      \
-  .type __##syscall_name##_nocancel,@function;				      \
-  .globl __##syscall_name##_nocancel;					      \
-  __##syscall_name##_nocancel:						      \
-    DO_CALL (syscall_name, args);					      \
-    cmpq $-4095, %rax;							      \
-    jae SYSCALL_ERROR_LABEL;						      \
-    ret;								      \
-  .size __##syscall_name##_nocancel,.-__##syscall_name##_nocancel;	      \
-  L(pseudo_cancel):							      \
-    /* We always have to align the stack before calling a function.  */	      \
-    subq $8, %rsp; cfi_adjust_cfa_offset (8);				      \
-    CENABLE								      \
-    /* The return value from CENABLE is argument for CDISABLE.  */	      \
-    movq %rax, (%rsp);							      \
-    DO_CALL (syscall_name, args);					      \
-    movq (%rsp), %rdi;							      \
-    /* Save %rax since it's the error code from the syscall.  */	      \
-    movq %rax, %rdx;							      \
-    CDISABLE								      \
-    movq %rdx, %rax;							      \
-    addq $8,%rsp; cfi_adjust_cfa_offset (-8);				      \
-    cmpq $-4095, %rax;							      \
-    jae SYSCALL_ERROR_LABEL
+# define PSEUDO(name, syscall_name, args)				\
+  .text;								\
+  ENTRY (name)								\
+  SINGLE_THREAD_P;							\
+  jne L(pseudo_cancel);							\
+  .type __##syscall_name##_nocancel,@function;				\
+  .globl __##syscall_name##_nocancel;					\
+__##syscall_name##_nocancel:						\
+  DO_CALL (syscall_name, args);						\
+  cmpq $-4095, %rax;							\
+  jae SYSCALL_ERROR_LABEL;						\
+  ret;									\
+  .size __##syscall_name##_nocancel,.-__##syscall_name##_nocancel;	\
+L(pseudo_cancel):							\
+		/* We always have to align the stack before calling a function.  */ \
+		subq $8, %rsp; cfi_adjust_cfa_offset (8);		\
+		/* MVEE patch - we use the C functions to enable/disable cancellation so we have to respect the calling conventions! */ \
+		pushq %rcx;						\
+		pushq %rdx;						\
+		pushq %rsi;						\
+		pushq %rdi;						\
+		CENABLE							\
+		popq %rdi;						\
+		popq %rsi;						\
+		popq %rdx;						\
+		popq %rcx;						\
+		/* The return value from CENABLE is argument for CDISABLE.  */ \
+		movq %rax, (%rsp);					\
+		DO_CALL (syscall_name, args);				\
+		movq (%rsp), %rdi;					\
+		/* Save %rax since it's the error code from the syscall.  */ \
+		movq %rax, %rdx;					\
+		pushq %rcx;						\
+		pushq %rdx;						\
+		pushq %rsi;						\
+		pushq %rdi;						\
+		CDISABLE						\
+		popq %rdi;						\
+		popq %rsi;						\
+		popq %rdx;						\
+		popq %rcx;						\
+		movq %rdx, %rax;					\
+		addq $8,%rsp; cfi_adjust_cfa_offset (-8);		\
+		cmpq $-4095, %rax;					\
+		jae SYSCALL_ERROR_LABEL
 
 
 # if IS_IN (libpthread)
diff -N -r --unified glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/timer_create.c glibc-2.21/sysdeps/unix/sysv/linux/x86_64/timer_create.c
--- glibc-2.21.orig/sysdeps/unix/sysv/linux/x86_64/timer_create.c	2015-04-27 12:45:23.076687040 -0700
+++ glibc-2.21/sysdeps/unix/sysv/linux/x86_64/timer_create.c	2015-04-27 12:52:07.322797797 -0700
@@ -42,7 +42,7 @@
     {
       int i;
       for (i = 0; i < OLD_TIMER_MAX; ++i)
-	if (__compat_timer_list[i] == NULL
+	if (atomic_load(__compat_timer_list[i]) == NULL
 	    && ! atomic_compare_and_exchange_bool_acq (&__compat_timer_list[i],
 						       newp, NULL))
 	  {
diff -N -r --unified glibc-2.21.orig/sysdeps/x86_64/bits/atomic.h glibc-2.21/sysdeps/x86_64/bits/atomic.h
--- glibc-2.21.orig/sysdeps/x86_64/bits/atomic.h	2015-04-27 12:45:23.116669179 -0700
+++ glibc-2.21/sysdeps/x86_64/bits/atomic.h	2015-04-28 19:14:04.414399185 -0700
@@ -56,17 +56,74 @@
 #endif
 
 #define __HAVE_64B_ATOMICS 1
-#if __GNUC_PREREQ (4, 7)
-#define USE_ATOMIC_COMPILER_BUILTINS 1
-#else
-#define USE_ATOMIC_COMPILER_BUILTINS 0
-#endif
 
-#define atomic_compare_and_exchange_val_acq(mem, newval, oldval) \
+#define orig_catomic_max(mem, value)					\
+  do {									\
+    __typeof (*(mem)) __atg9_oldv;					\
+    __typeof (mem) __atg9_memp = (mem);					\
+    __typeof (*(mem)) __atg9_value = (value);				\
+    do {								\
+      __atg9_oldv = *(volatile __typeof (mem))__atg9_memp;		\
+      if (__atg9_oldv >= __atg9_value)					\
+	break;                                                          \
+    } while (__builtin_expect						\
+	     (orig_catomic_compare_and_exchange_bool_acq (__atg9_memp,  \
+							  __atg9_value, \
+							  __atg9_oldv), 0)); \
+  } while (0)
+  
+// overrides from include/atomic.h
+#define orig_catomic_compare_and_exchange_val_acq(mem, newval, oldval)	\
+  __atomic_val_bysize (__arch_c_compare_and_exchange_val,acq,		\
+		       mem, newval, oldval)
+    
+#define orig_catomic_compare_and_exchange_bool_acq(mem, newval, oldval) \
+  ({ __typeof (oldval) __atg3_old = (oldval);				\
+    orig_catomic_compare_and_exchange_val_acq (mem, newval, __atg3_old) \
+      != __atg3_old;							\
+  })
+    
+#define orig_atomic_forced_read(x)					\
+  ({ __typeof (x) __x; __asm ("" : "=r" (__x) : "0" (x)); __x; })
+    
+// MVEE additions
+#define orig_atomic_max(mem, value)					\
+  do {									\
+    __typeof (*(mem)) __atg8_oldval;					\
+    __typeof (mem) __atg8_memp = (mem);					\
+    __typeof (*(mem)) __atg8_value = (value);				\
+    do {								\
+      __atg8_oldval = *(volatile __typeof (mem))__atg8_memp;		\
+      if (__atg8_oldval >= __atg8_value)				\
+	break;                                                          \
+    } while (__builtin_expect						\
+	     (orig_atomic_compare_and_exchange_bool_acq (__atg8_memp, __atg8_value, \
+							 __atg8_oldval), 0)); \
+  } while (0)
+      
+#define orig_atomic_decrement_if_positive(mem)				\
+  ({ __typeof (*(mem)) __atg11_oldval;					\
+    __typeof (mem) __atg11_memp = (mem);				\
+									\
+    do									\
+      {									\
+	__atg11_oldval = *(volatile __typeof (mem))__atg11_memp;        \
+	if (__builtin_expect (__atg11_oldval <= 0, 0))                  \
+	  break;                                                        \
+      }									\
+    while (__builtin_expect						\
+	   (orig_atomic_compare_and_exchange_bool_acq (__atg11_memp,    \
+						       __atg11_oldval - 1, \
+						       __atg11_oldval), 0)); \
+    __atg11_oldval; })
+	
+
+// original sysdeps atomics
+#define orig_atomic_compare_and_exchange_val_acq(mem, newval, oldval)	\
   __sync_val_compare_and_swap (mem, oldval, newval)
-#define atomic_compare_and_exchange_bool_acq(mem, newval, oldval) \
-  (! __sync_bool_compare_and_swap (mem, oldval, newval))
 
+#define orig_atomic_compare_and_exchange_bool_acq(mem, newval, oldval)	\
+  (! __sync_bool_compare_and_swap (mem, oldval, newval))                      
 
 #define __arch_c_compare_and_exchange_val_8_acq(mem, newval, oldval) \
   ({ __typeof (*mem) ret;						      \
@@ -116,7 +173,7 @@
 
 
 /* Note that we need no lock prefix.  */
-#define atomic_exchange_acq(mem, newvalue) \
+#define orig_atomic_exchange_acq(mem, newvalue) \
   ({ __typeof (*mem) result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile ("xchgb %b0, %1"				      \
@@ -138,7 +195,7 @@
      result; })
 
 
-#define __arch_exchange_and_add_body(lock, mem, value)			      \
+#define __arch_exchange_and_add_body(lock, mem, value)			\
   ({ __typeof (*mem) result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (lock "xaddb %b0, %1"				      \
@@ -163,13 +220,13 @@
 			   "i" (offsetof (tcbhead_t, multiple_threads)));     \
      result; })
 
-#define atomic_exchange_and_add(mem, value) \
+#define orig_atomic_exchange_and_add(mem, value) \
   __sync_fetch_and_add (mem, value)
 
 #define __arch_exchange_and_add_cprefix \
   "cmpl $0, %%fs:%P4\n\tje 0f\n\tlock\n0:\t"
 
-#define catomic_exchange_and_add(mem, value) \
+#define orig_catomic_exchange_and_add(mem, value) \
   __arch_exchange_and_add_body (__arch_exchange_and_add_cprefix, mem, value)
 
 
@@ -202,17 +259,17 @@
 			  "i" (offsetof (tcbhead_t, multiple_threads)));      \
   } while (0)
 
-#define atomic_add(mem, value) \
-  __arch_add_body (LOCK_PREFIX, atomic, mem, value)
+#define orig_atomic_add(mem, value) \
+  ({__arch_add_body (LOCK_PREFIX, atomic, mem, value);})
 
 #define __arch_add_cprefix \
   "cmpl $0, %%fs:%P3\n\tje 0f\n\tlock\n0:\t"
 
-#define catomic_add(mem, value) \
-  __arch_add_body (__arch_add_cprefix, catomic, mem, value)
+#define orig_catomic_add(mem, value) \
+  ({__arch_add_body (__arch_add_cprefix, catomic, mem, value);})
 
 
-#define atomic_add_negative(mem, value) \
+#define orig_atomic_add_negative(mem, value) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "addb %b2, %0; sets %1"		      \
@@ -234,7 +291,7 @@
      __result; })
 
 
-#define atomic_add_zero(mem, value) \
+#define orig_atomic_add_zero(mem, value) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "addb %b2, %0; setz %1"		      \
@@ -280,16 +337,17 @@
 			  "i" (offsetof (tcbhead_t, multiple_threads)));      \
   } while (0)
 
-#define atomic_increment(mem) __arch_increment_body (LOCK_PREFIX, mem)
+#define orig_atomic_increment(mem) ({__arch_increment_body (LOCK_PREFIX, mem);})
+#define orig_nonatomic_increment(mem) ({__arch_increment_body ("", mem);})
 
 #define __arch_increment_cprefix \
   "cmpl $0, %%fs:%P2\n\tje 0f\n\tlock\n0:\t"
 
-#define catomic_increment(mem) \
-  __arch_increment_body (__arch_increment_cprefix, mem)
+#define orig_catomic_increment(mem) \
+  ({__arch_increment_body (__arch_increment_cprefix, mem);})
 
 
-#define atomic_increment_and_test(mem) \
+#define orig_atomic_increment_and_test(mem) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "incb %b0; sete %1"		      \
@@ -334,16 +392,16 @@
 			  "i" (offsetof (tcbhead_t, multiple_threads)));      \
   } while (0)
 
-#define atomic_decrement(mem) __arch_decrement_body (LOCK_PREFIX, mem)
+#define orig_atomic_decrement(mem) ({__arch_decrement_body (LOCK_PREFIX, mem);})
 
 #define __arch_decrement_cprefix \
   "cmpl $0, %%fs:%P2\n\tje 0f\n\tlock\n0:\t"
 
-#define catomic_decrement(mem) \
-  __arch_decrement_body (__arch_decrement_cprefix, mem)
+#define orig_catomic_decrement(mem) \
+    ({__arch_decrement_body (__arch_decrement_cprefix, mem);})
 
 
-#define atomic_decrement_and_test(mem) \
+#define orig_atomic_decrement_and_test(mem) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "decb %b0; sete %1"		      \
@@ -364,7 +422,7 @@
      __result; })
 
 
-#define atomic_bit_set(mem, bit) \
+#define orig_atomic_bit_set(mem, bit) \
   do {									      \
     if (sizeof (*mem) == 1)						      \
       __asm __volatile (LOCK_PREFIX "orb %b2, %0"			      \
@@ -389,7 +447,7 @@
   } while (0)
 
 
-#define atomic_bit_test_set(mem, bit) \
+#define orig_atomic_bit_test_set(mem, bit) \
   ({ unsigned char __result;						      \
      if (sizeof (*mem) == 1)						      \
        __asm __volatile (LOCK_PREFIX "btsb %3, %1; setc %0"		      \
@@ -440,9 +498,9 @@
 #define __arch_cprefix \
   "cmpl $0, %%fs:%P3\n\tje 0f\n\tlock\n0:\t"
 
-#define atomic_and(mem, mask) __arch_and_body (LOCK_PREFIX, mem, mask)
+#define orig_atomic_and(mem, mask) ({__arch_and_body (LOCK_PREFIX, mem, mask);})
 
-#define catomic_and(mem, mask) __arch_and_body (__arch_cprefix, mem, mask)
+#define orig_catomic_and(mem, mask) ({__arch_and_body (__arch_cprefix, mem, mask);})
 
 
 #define __arch_or_body(lock, mem, mask)					      \
@@ -469,6 +527,619 @@
 			  "i" (offsetof (tcbhead_t, multiple_threads)));      \
   } while (0)
 
-#define atomic_or(mem, mask) __arch_or_body (LOCK_PREFIX, mem, mask)
+#define orig_atomic_or(mem, mask) ({__arch_or_body (LOCK_PREFIX, mem, mask);})
+
+#define orig_catomic_or(mem, mask) ({__arch_or_body (__arch_cprefix, mem, mask);})
+
+/*--------------------------------------------------------------------------------
+                                  MVEE PATCHES
+--------------------------------------------------------------------------------*/
+#define USE_MVEE_LIBC
+
+#define MVEE_MAX_COUNTERS 65536
+
+#ifdef USE_MVEE_LIBC
+#define MVEE_FAKE_SYSCALL_BASE          0x6FFFFFFF
+#define MVEE_GET_MASTERTHREAD_ID        MVEE_FAKE_SYSCALL_BASE + 3
+#define MVEE_GET_SHARED_BUFFER          MVEE_FAKE_SYSCALL_BASE + 4
+#define MVEE_FLUSH_SHARED_BUFFER        MVEE_FAKE_SYSCALL_BASE + 5
+#define MVEE_SET_INFINITE_LOOP_PTR      MVEE_FAKE_SYSCALL_BASE + 6
+#define MVEE_TOGGLESYNC                 MVEE_FAKE_SYSCALL_BASE + 7
+#define MVEE_SET_SHARED_BUFFER_POS_PTR  MVEE_FAKE_SYSCALL_BASE + 8
+#define MVEE_RUNS_UNDER_MVEE_CONTROL    MVEE_FAKE_SYSCALL_BASE + 9
+#define MVEE_GET_THREAD_NUM             MVEE_FAKE_SYSCALL_BASE + 10
+#define MVEE_SET_SYNC_PRIMITIVES_PTR    MVEE_FAKE_SYSCALL_BASE + 12
+#define MVEE_ALL_HEAPS_ALIGNED          MVEE_FAKE_SYSCALL_BASE + 13
+#define MVEE_LIBC_LOCK_BUFFER           3
+#define MVEE_LIBC_LOCK_BUFFER_PARTIAL   16
+#define MVEE_LIBC_MALLOC_DEBUG_BUFFER   11
+#define MVEE_LIBC_ATOMIC_BUFFER         13
+#define MVEE_FUTEX_WAIT_TID             30
+
+#ifndef __ASSEMBLER
+enum mvee_alloc_types
+  {
+  LIBC_MALLOC,
+  LIBC_FREE,
+  LIBC_REALLOC,
+  LIBC_MEMALIGN,
+  LIBC_CALLOC,
+  MALLOC_TRIM,
+  HEAP_TRIM,
+  MALLOC_CONSOLIDATE,
+  ARENA_GET2,
+  _INT_MALLOC,
+  _INT_FREE,
+  _INT_REALLOC
+  };
+
+enum mvee_base_atomics
+  {
+    // LOAD OPERATIONS FIRST!!! DO NOT CHANGE THIS CONVENTION
+    ATOMIC_FORCED_READ,
+    ATOMIC_LOAD,
+    ATOMIC_LOAD_RELAXED,
+    ATOMIC_LOAD_ACQUIRE,
+    // THE FOLLOWING IS NOT AN ACTUAL ATOMIC OPERATION, IT JUST DENOTES THE END OF THE LOAD-ONLY ATOMICS!!!
+    ATOMIC_LOAD_MAX,
+    // STORES AFTER LOADS
+    CATOMIC_COMPARE_AND_EXCHANGE_VAL_ACQ,
+    CATOMIC_COMPARE_AND_EXCHANGE_BOOL_ACQ,
+    CATOMIC_AND,
+    CATOMIC_OR,
+    CATOMIC_EXCHANGE_AND_ADD,
+    CATOMIC_ADD,
+    CATOMIC_INCREMENT,
+    CATOMIC_DECREMENT,
+    CATOMIC_MAX,
+    ATOMIC_COMPARE_AND_EXCHANGE_VAL_ACQ,
+    ATOMIC_COMPARE_AND_EXCHANGE_BOOL_ACQ,
+    ATOMIC_EXCHANGE_ACQ,
+    ATOMIC_EXCHANGE_AND_ADD,
+    ATOMIC_INCREMENT_AND_TEST,
+    ATOMIC_DECREMENT_AND_TEST,
+    ATOMIC_ADD_ZERO,
+    ATOMIC_ADD,
+    ATOMIC_INCREMENT,
+    ATOMIC_DECREMENT,
+    ATOMIC_BIT_TEST_SET,
+    ATOMIC_BIT_SET,
+    ATOMIC_AND,
+    ATOMIC_STORE,
+    ATOMIC_MAX,
+    ATOMIC_DECREMENT_IF_POSITIVE,
+    ATOMIC_STORE_RELAXED,
+    ATOMIC_STORE_RELEASE,
+    ATOMIC_COMPARE_EXCHANGE_N,
+    ATOMIC_EXCHANGE_N,
+    ATOMIC_FETCH_ADD,
+    ATOMIC_FETCH_AND,
+    ATOMIC_FETCH_OR,
+    __THREAD_ATOMIC_CMPXCHG_VAL,
+    __THREAD_ATOMIC_AND,
+    __THREAD_ATOMIC_BIT_SET,
+    ___UNKNOWN_LOCK_TYPE___,
+    __MVEE_BASE_ATOMICS_MAX__
+  };
+
+enum mvee_extended_atomics {
+  mvee_atomic_load_n,
+  mvee_atomic_load,
+  mvee_atomic_store_n,
+  mvee_atomic_store,
+  mvee_atomic_exchange_n,
+  mvee_atomic_exchange,
+  mvee_atomic_compare_exchange_n,
+  mvee_atomic_compare_exchange,
+  mvee_atomic_add_fetch,
+  mvee_atomic_sub_fetch,
+  mvee_atomic_and_fetch,
+  mvee_atomic_xor_fetch,
+  mvee_atomic_or_fetch,
+  mvee_atomic_nand_fetch,
+  mvee_atomic_fetch_add,
+  mvee_atomic_fetch_sub,
+  mvee_atomic_fetch_and,
+  mvee_atomic_fetch_xor,
+  mvee_atomic_fetch_or,
+  mvee_atomic_fetch_nand,
+  mvee_atomic_test_and_set,
+  mvee_atomic_clear,
+  mvee_atomic_always_lock_free,
+  mvee_atomic_is_lock_free,
+  mvee_sync_fetch_and_add,
+  mvee_sync_fetch_and_sub,
+  mvee_sync_fetch_and_or,
+  mvee_sync_fetch_and_and,
+  mvee_sync_fetch_and_xor,
+  mvee_sync_fetch_and_nand,
+  mvee_sync_add_and_fetch,
+  mvee_sync_sub_and_fetch,
+  mvee_sync_or_and_fetch,
+  mvee_sync_and_and_fetch,
+  mvee_sync_xor_and_fetch,
+  mvee_sync_nand_and_fetch,
+  mvee_sync_bool_compare_and_swap,
+  mvee_sync_val_compare_and_swap,
+  mvee_sync_lock_test_and_set,
+  mvee_sync_lock_release,
+  mvee_atomic_ops_max
+};
+#endif
+
+#define MVEE_ROUND_UP(x, multiple)		\
+  ((x + (multiple - 1)) & ~(multiple -1))
+#define MVEE_MIN(a, b) ((a > b) ? (b) : (a))
+#define MVEE_MALLOC_HOOK(type, msg, sz, ar_ptr, chunk_ptr)
+
+#if !defined(__ASSEMBLER__) && !IS_IN(rtld)
+extern void          mvee_atomic_postop_internal (unsigned char preop_result);
+extern unsigned char mvee_atomic_preop_internal  (void* word_ptr);
+extern int           mvee_should_sync_tid        (void);
+extern int           mvee_all_heaps_aligned      (char* heap);
+extern void          mvee_invalidate_buffer      (void);
+#endif
+
+#define MVEE_POSTOP()                                   \
+  mvee_atomic_postop_internal(__tmp_mvee_preop);
+
+#define MVEE_PREOP(op_type, mem, is_store)                                      \
+  register unsigned char  __tmp_mvee_preop = mvee_atomic_preop_internal((void*)mem);
+
 
-#define catomic_or(mem, mask) __arch_or_body (__arch_cprefix, mem, mask)
+
+#endif // USE_MVEE_LIBC
+
+#if IS_IN(rtld)
+
+#define USE_ATOMIC_COMPILER_BUILTINS 1
+
+// sysdeps/atomic.h patches
+#define catomic_and(mem, mask) orig_catomic_and(mem, mask)
+#define catomic_or(mem, mask) orig_catomic_or(mem, mask)
+#define catomic_exchange_and_add(mem, value) orig_catomic_exchange_and_add(mem, value)
+#define catomic_add(mem, value) orig_catomic_add(mem, value)
+#define catomic_increment(mem) orig_catomic_increment(mem)
+#define catomic_decrement(mem) orig_catomic_decrement(mem)
+#define atomic_compare_and_exchange_val_acq(mem, newval, oldval) orig_atomic_compare_and_exchange_val_acq(mem, newval, oldval)
+#define atomic_compare_and_exchange_bool_acq(mem, newval, oldval) orig_atomic_compare_and_exchange_bool_acq(mem, newval, oldval)
+#define atomic_exchange_acq(mem, newvalue) orig_atomic_exchange_acq(mem, newvalue)
+#define atomic_exchange_and_add(mem, value) orig_atomic_exchange_and_add(mem, value)
+#define atomic_increment_and_test(mem) orig_atomic_increment_and_test(mem)
+#define atomic_decrement_and_test(mem) orig_atomic_decrement_and_test(mem)
+#define atomic_add_zero(mem, value) orig_atomic_add_zero(mem, value)
+#define atomic_add(mem, value) orig_atomic_add(mem, value)
+#define atomic_increment(mem) orig_atomic_increment(mem)
+#define atomic_decrement(mem) orig_atomic_decrement(mem)
+#define atomic_bit_test_set(mem, bit) orig_atomic_bit_test_set(mem, bit)
+#define atomic_bit_set(mem, bit) orig_atomic_bit_set(mem, bit)
+#define atomic_and(mem, mask) orig_atomic_and(mem, mask)
+
+// include/atomic.h patches
+// #define catomic_compare_and_exchange_val_acq(mem, newval, oldval) orig_catomic_compare_and_exchange_val_acq(mem, newval, oldval)
+// #define catomic_compare_and_exchange_bool_acq(mem, newval, oldval) orig_catomic_compare_and_exchange_bool_acq(mem, newval, oldval)
+// #define atomic_forced_read(x) orig_atomic_forced_read(x)
+
+// nptl/sysdeps/tls.h patches
+// #define THREAD_ATOMIC_CMPXCHG_VAL(descr, member, newval, oldval) orig_THREAD_ATOMIC_CMPXCHG_VAL(descr, member, newval, oldval)
+// #define THREAD_ATOMIC_AND(descr, member, val) orig_THREAD_ATOMIC_AND(descr, member, val)
+// #define THREAD_ATOMIC_BIT_SET(descr, member, bit) orig_THREAD_ATOMIC_BIT_SET(descr, member, bit)
+
+// MVEE additions
+#define atomic_load(var) ({ var; })
+#define atomic_store(var, val) ({ var = val; })
+
+#else // !IS_IN_rtld
+
+#define USE_ATOMIC_COMPILER_BUILTINS 0
+
+// sysdeps/atomic.h patches
+#define catomic_and(mem, mask)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_AND, mem, 1);		\
+    orig_catomic_and(mem, mask);		\
+    MVEE_POSTOP();				\
+  })
+
+#define catomic_or(mem, mask)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_OR, mem, 1);		\
+    orig_catomic_or(mem, mask);			\
+    MVEE_POSTOP();				\
+  })
+
+
+#define catomic_exchange_and_add(mem, value)			\
+  ({								\
+    typeof(*mem) ____result;					\
+    MVEE_PREOP(CATOMIC_EXCHANGE_AND_ADD, mem, 1);		\
+    ____result = orig_catomic_exchange_and_add(mem, value);	\
+    MVEE_POSTOP();						\
+    ____result;							\
+  })
+
+
+#define catomic_add(mem, value)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_ADD, mem, 1);		\
+    orig_catomic_add(mem, value);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define catomic_increment(mem)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_INCREMENT, mem, 1);	\
+    orig_catomic_increment(mem);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define catomic_decrement(mem)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_DECREMENT, mem, 1);	\
+    orig_catomic_decrement(mem);		\
+    MVEE_POSTOP();				\
+  })
+
+#define catomic_max(mem, value)			\
+  ({						\
+    MVEE_PREOP(CATOMIC_MAX, mem, 1);		\
+    orig_catomic_max(mem, value);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_compare_and_exchange_val_acq(mem, newval, oldval)	\
+  ({									\
+    typeof(*mem) ____result;						\
+    MVEE_PREOP(ATOMIC_COMPARE_AND_EXCHANGE_VAL_ACQ, mem, 1);		\
+    ____result = orig_atomic_compare_and_exchange_val_acq(mem, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+
+#define atomic_compare_and_exchange_bool_acq(mem, newval, oldval)	\
+  ({									\
+    bool ____result;							\
+    MVEE_PREOP(ATOMIC_COMPARE_AND_EXCHANGE_BOOL_ACQ, mem, 1);		\
+    ____result = orig_atomic_compare_and_exchange_bool_acq(mem, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+
+#define atomic_exchange_acq(mem, newvalue)			\
+  ({								\
+    typeof(*mem) ____result;					\
+    MVEE_PREOP(ATOMIC_EXCHANGE_ACQ, mem, 1);			\
+    ____result = orig_atomic_exchange_acq(mem, newvalue);	\
+    MVEE_POSTOP();						\
+    ____result;							\
+  })
+
+
+#define atomic_exchange_and_add(mem, value)			\
+  ({								\
+    typeof(*mem) ____result;					\
+    MVEE_PREOP(ATOMIC_EXCHANGE_AND_ADD, mem, 1);		\
+    ____result = orig_atomic_exchange_and_add(mem, value);	\
+    MVEE_POSTOP();						\
+    ____result;							\
+  })
+
+
+#define atomic_increment_and_test(mem)			\
+  ({							\
+    unsigned char ____result;				\
+    MVEE_PREOP(ATOMIC_INCREMENT_AND_TEST, mem, 1);	\
+    ____result = orig_atomic_increment_and_test(mem);	\
+    MVEE_POSTOP();					\
+    ____result;						\
+  })
+
+
+#define atomic_decrement_and_test(mem)			\
+  ({							\
+    unsigned char ____result;				\
+    MVEE_PREOP(ATOMIC_DECREMENT_AND_TEST, mem, 1);	\
+    ____result = orig_atomic_decrement_and_test(mem);	\
+    MVEE_POSTOP();					\
+    ____result;						\
+  })
+
+
+#define atomic_add_zero(mem, value)			\
+  ({							\
+    unsigned char ____result;				\
+    MVEE_PREOP(ATOMIC_ADD_ZERO, mem, 1);		\
+    ____result = orig_atomic_add_zero(mem, value);	\
+    MVEE_POSTOP();					\
+    ____result;						\
+  })
+
+
+#define atomic_add(mem, value)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_ADD, mem, 1);		\
+    orig_atomic_add(mem, value);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_increment(mem)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_INCREMENT, mem, 1);	\
+    orig_atomic_increment(mem);			\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_decrement(mem)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_DECREMENT, mem, 1);	\
+    orig_atomic_decrement(mem);			\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_bit_test_set(mem, bit)			\
+  ({							\
+    unsigned char ____result;				\
+    MVEE_PREOP(ATOMIC_BIT_TEST_SET, mem, 1);		\
+    ____result = orig_atomic_bit_test_set(mem, bit);	\
+    MVEE_POSTOP();					\
+    ____result;						\
+  })
+
+
+#define atomic_bit_set(mem, bit)		\
+  ({						\
+    MVEE_PREOP(ATOMIC_BIT_SET, mem, 1);		\
+    orig_atomic_bit_set(mem, bit);		\
+    MVEE_POSTOP();				\
+  })
+
+
+#define atomic_and(mem, mask)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_AND, mem, 1);		\
+    orig_atomic_and(mem, mask);			\
+    MVEE_POSTOP();				\
+  })
+
+
+
+// include/atomic.h patches
+#define catomic_compare_and_exchange_val_acq(mem, newval, oldval)	\
+  ({									\
+    typeof(*mem) ____result;						\
+    MVEE_PREOP(CATOMIC_COMPARE_AND_EXCHANGE_VAL_ACQ, mem, 1);		\
+    ____result = orig_catomic_compare_and_exchange_val_acq(mem, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+#define catomic_compare_and_exchange_bool_acq(mem, newval, oldval)	\
+  ({									\
+    bool ____result;							\
+    MVEE_PREOP(CATOMIC_COMPARE_AND_EXCHANGE_BOOL_ACQ, mem, 1);		\
+    ____result = orig_catomic_compare_and_exchange_bool_acq(mem, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+#define atomic_forced_read(x)			\
+  ({						\
+    typeof(x) ____result;			\
+    MVEE_PREOP(ATOMIC_FORCED_READ, &x, 0);	\
+    ____result = orig_atomic_forced_read(x);	\
+    MVEE_POSTOP();				\
+    ____result;					\
+  })
+
+
+
+// nptl/sysdeps/tls.h patches
+#if 0
+#define THREAD_ATOMIC_CMPXCHG_VAL(descr, member, newval, oldval)	\
+  ({									\
+    __typeof(descr->member) ____result;					\
+    MVEE_PREOP(__THREAD_ATOMIC_CMPXCHG_VAL, &descr->member, 1);		\
+    ____result = orig_THREAD_ATOMIC_CMPXCHG_VAL(descr, member, newval, oldval); \
+    MVEE_POSTOP();							\
+    ____result;								\
+  })
+
+
+#define THREAD_ATOMIC_AND(descr, member, val)			\
+  (void)({							\
+      MVEE_PREOP(__THREAD_ATOMIC_AND, &descr->member, 1);	\
+      orig_THREAD_ATOMIC_AND(descr, member, val);		\
+      MVEE_POSTOP();						\
+    })
+
+
+#define THREAD_ATOMIC_BIT_SET(descr, member, bit)		\
+  (void)({							\
+      MVEE_PREOP(__THREAD_ATOMIC_BIT_SET, &descr->member, 1);	\
+      orig_THREAD_ATOMIC_BIT_SET(descr, member, bit);		\
+      MVEE_POSTOP();						\
+    })
+#endif
+
+
+// MVEE additions
+#define atomic_load(var)			\
+  ({						\
+    __typeof(var+0) ____result;			\
+    MVEE_PREOP(ATOMIC_LOAD, &var, 0);		\
+    ____result = var;				\
+    MVEE_POSTOP();				\
+    ____result;					\
+  })
+
+#define atomic_store(var, val)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_STORE, &var, 1);		\
+    var = val;					\
+    MVEE_POSTOP();				\
+  })
+
+#define atomic_max(mem, value)			\
+  ({						\
+    MVEE_PREOP(ATOMIC_MAX, mem, 1);		\
+    orig_atomic_max(mem, value);		\
+    MVEE_POSTOP();				\
+  })
+
+#define atomic_decrement_if_positive(mem)		\
+  ({							\
+    __typeof(*mem) __result;				\
+    MVEE_PREOP(ATOMIC_DECREMENT_IF_POSITIVE, mem, 1);	\
+    __result = orig_atomic_decrement_if_positive(mem);	\
+    MVEE_POSTOP();					\
+    __result;						\
+  })
+
+/*--------------------------------------------------------------------------------
+  NEW GLIBC 2.2x+ goodies
+--------------------------------------------------------------------------------*/
+#ifndef __ASSEMBLER__
+void __atomic_link_error (void);
+#endif
+
+#define __atomic_check_size(mem)			\
+  if ((sizeof (*mem) != 4) && (sizeof (*mem) != 8))	\
+    __atomic_link_error ();
+
+#define atomic_load_relaxed(mem)			\
+  ({							\
+    typeof(*mem + 0) __ret;				\
+    __atomic_check_size((mem));				\
+    MVEE_PREOP(ATOMIC_LOAD_RELAXED, mem, 0);		\
+    __ret = __atomic_load_n ((mem), __ATOMIC_RELAXED);	\
+    MVEE_POSTOP();					\
+    __ret;						\
+  })
+
+#define atomic_load_acquire(mem)			\
+  ({							\
+    typeof(*mem + 0) __ret;				\
+    __atomic_check_size((mem));				\
+    MVEE_PREOP(ATOMIC_LOAD_ACQUIRE, mem, 0);		\
+    __ret = __atomic_load_n ((mem), __ATOMIC_ACQUIRE);	\
+    MVEE_POSTOP();					\
+    __ret;						\
+  })
+
+#define atomic_store_relaxed(mem, val)			\
+  do {							\
+    __atomic_check_size((mem));				\
+    MVEE_PREOP(ATOMIC_STORE_RELAXED, mem, 1);		\
+    __atomic_store_n ((mem), (val), __ATOMIC_RELAXED);	\
+    MVEE_POSTOP();					\
+  } while (0)
+
+# define atomic_store_release(mem, val)			\
+  do {							\
+    __atomic_check_size((mem));				\
+    MVEE_PREOP(ATOMIC_STORE_RELEASE, mem, 1);		\
+    __atomic_store_n ((mem), (val), __ATOMIC_RELEASE);	\
+    MVEE_POSTOP();					\
+  } while (0)
+
+#define mvee_atomic_compare_exchange_n(mem, expected, desired, weak, success_memmodel, failure_memmodel) \
+  ({									\
+    typeof(*mem + 0) __ret;						\
+    MVEE_PREOP(ATOMIC_COMPARE_EXCHANGE_N, mem, 1);			\
+    __ret = __atomic_compare_exchange_n((mem), (expected), (desired), (weak), (success_memmodel), (failure_memmodel)); \
+    MVEE_POSTOP();							\
+    __ret;								\
+  })
+
+#define mvee_atomic_exchange_n(mem, desired, memmodel)		\
+  ({								\
+    typeof(*mem + 0) __ret;					\
+    MVEE_PREOP(ATOMIC_EXCHANGE_N, mem, 1);			\
+    __ret = __atomic_exchange_n((mem), (desired), (memmodel));	\
+    MVEE_POSTOP();						\
+    __ret;							\
+  })
+
+#define mvee_atomic_fetch_add(mem, operand, memmodel)		\
+  ({								\
+    typeof(*mem + 0) __ret;					\
+    MVEE_PREOP(ATOMIC_FETCH_ADD, mem, 1);			\
+    __ret = __atomic_fetch_add((mem), (operand), (memmodel));	\
+    MVEE_POSTOP();						\
+    __ret;							\
+  })
+
+#define mvee_atomic_fetch_and(mem, operand, memmodel)		\
+  ({								\
+    typeof(*mem + 0) __ret;					\
+    MVEE_PREOP(ATOMIC_FETCH_AND, mem, 1);			\
+    __ret = __atomic_fetch_and((mem), (operand), (memmodel));	\
+    MVEE_POSTOP();						\
+    __ret;							\
+  })
+
+#define mvee_atomic_fetch_or(mem, operand, memmodel)		\
+  ({								\
+    typeof(*mem + 0) __ret;					\
+    MVEE_PREOP(ATOMIC_FETCH_OR, mem, 1);			\
+    __ret = __atomic_fetch_or((mem), (operand), (memmodel));	\
+    MVEE_POSTOP();						\
+    __ret;							\
+  })
+
+# define atomic_compare_exchange_weak_relaxed(mem, expected, desired)	\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_compare_exchange_n ((mem), (expected), (desired), 1,	\
+				    __ATOMIC_RELAXED, __ATOMIC_RELAXED); })
+
+# define atomic_compare_exchange_weak_acquire(mem, expected, desired)	\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_compare_exchange_n ((mem), (expected), (desired), 1,	\
+				    __ATOMIC_ACQUIRE, __ATOMIC_RELAXED); })
+
+# define atomic_compare_exchange_weak_release(mem, expected, desired)	\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_compare_exchange_n ((mem), (expected), (desired), 1,	\
+				    __ATOMIC_RELEASE, __ATOMIC_RELAXED); })
+
+# define atomic_exchange_acquire(mem, desired)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_exchange_n ((mem), (desired), __ATOMIC_ACQUIRE); })
+# define atomic_exchange_release(mem, desired)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_exchange_n ((mem), (desired), __ATOMIC_RELEASE); })
+
+# define atomic_fetch_add_relaxed(mem, operand)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_fetch_add ((mem), (operand), __ATOMIC_RELAXED); })
+# define atomic_fetch_add_acquire(mem, operand)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_fetch_add ((mem), (operand), __ATOMIC_ACQUIRE); })
+# define atomic_fetch_add_release(mem, operand)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_fetch_add ((mem), (operand), __ATOMIC_RELEASE); })
+# define atomic_fetch_add_acq_rel(mem, operand)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_fetch_add ((mem), (operand), __ATOMIC_ACQ_REL); })
+
+# define atomic_fetch_and_acquire(mem, operand)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_fetch_and ((mem), (operand), __ATOMIC_ACQUIRE); })
+
+# define atomic_fetch_or_relaxed(mem, operand)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_fetch_or ((mem), (operand), __ATOMIC_RELAXED); })
+# define atomic_fetch_or_acquire(mem, operand)				\
+  ({ __atomic_check_size((mem));					\
+    mvee_atomic_fetch_or ((mem), (operand), __ATOMIC_ACQUIRE); })
+
+
+#endif
diff -N -r --unified glibc-2.21.orig/sysdeps/x86_64/nptl/pthread_spin_lock.S glibc-2.21/sysdeps/x86_64/nptl/pthread_spin_lock.S
--- glibc-2.21.orig/sysdeps/x86_64/nptl/pthread_spin_lock.S	2015-04-27 12:45:23.124665607 -0700
+++ glibc-2.21/sysdeps/x86_64/nptl/pthread_spin_lock.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,36 +0,0 @@
-/* Copyright (C) 2012-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <lowlevellock.h>
-
-	.globl	pthread_spin_lock
-	.type	pthread_spin_lock,@function
-	.align	16
-pthread_spin_lock:
-1:	LOCK
-	decl	0(%rdi)
-	jne	2f
-	xor	%eax, %eax
-	ret
-
-	.align	16
-2:	rep
-	nop
-	cmpl	$0, 0(%rdi)
-	jg	1b
-	jmp	2b
-	.size	pthread_spin_lock,.-pthread_spin_lock
diff -N -r --unified glibc-2.21.orig/sysdeps/x86_64/nptl/pthread_spin_trylock.S glibc-2.21/sysdeps/x86_64/nptl/pthread_spin_trylock.S
--- glibc-2.21.orig/sysdeps/x86_64/nptl/pthread_spin_trylock.S	2015-04-27 12:45:23.124665607 -0700
+++ glibc-2.21/sysdeps/x86_64/nptl/pthread_spin_trylock.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,39 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <pthread-errnos.h>
-
-
-#ifdef UP
-# define LOCK
-#else
-# define LOCK lock
-#endif
-
-	.globl	pthread_spin_trylock
-	.type	pthread_spin_trylock,@function
-	.align	16
-pthread_spin_trylock:
-	movl	$1, %eax
-	xorl	%ecx, %ecx
-	LOCK
-	cmpxchgl %ecx, (%rdi)
-	movl	$EBUSY, %eax
-	cmovel	%ecx, %eax
-	retq
-	.size	pthread_spin_trylock,.-pthread_spin_trylock
diff -N -r --unified glibc-2.21.orig/sysdeps/x86_64/nptl/pthread_spin_unlock.S glibc-2.21/sysdeps/x86_64/nptl/pthread_spin_unlock.S
--- glibc-2.21.orig/sysdeps/x86_64/nptl/pthread_spin_unlock.S	2015-04-27 12:45:23.124665607 -0700
+++ glibc-2.21/sysdeps/x86_64/nptl/pthread_spin_unlock.S	1969-12-31 16:00:00.000000000 -0800
@@ -1,30 +0,0 @@
-/* Copyright (C) 2002-2015 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-	.globl	pthread_spin_unlock
-	.type	pthread_spin_unlock,@function
-	.align	16
-pthread_spin_unlock:
-	movl	$1, (%rdi)
-	xorl	%eax, %eax
-	retq
-	.size	pthread_spin_unlock,.-pthread_spin_unlock
-
-	/* The implementation of pthread_spin_init is identical.  */
-	.globl	pthread_spin_init
-pthread_spin_init = pthread_spin_unlock
